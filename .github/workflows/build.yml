name: Build and Upload

on:
  push:
    tags:
      - v[0-9].[0-9]+.[0-9]+
  
  workflow_dispatch: # Allow manual triggering of the workflow

jobs:
  build-ubuntu:
    name: "Build Binary for Linux"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Build Binary
      run: |
        echo -e "// go:build fpt_make\n\npackage main\n\nconst VV = \"fpt $GITHUB_REF_NAME - $(date '+%F %T') - $GITHUB_SHA\"" > ./cmd/fpt/version.go
        rm -rf build/fpt
        mkdir -p build/fpt
        go build -tags fpt_make -o build/fpt/fpt ./cmd/fpt
        chmod +x build/fpt/fpt*
        tar -zcf "fpt-linux-amd64-${GITHUB_REF_NAME}.tgz" -C build fpt
        rm -r build/fpt

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fpt-linux-amd64-${{ github.ref_name }}.tgz
        path: fpt-linux-amd64-${{ github.ref_name }}.tgz

  build-macos:
    name: "Build Binary for macOS"
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Build Binary
      run: |
        echo -e "// go:build fpt_make\n\npackage main\n\nconst VV = \"fpt $GITHUB_REF_NAME - $(date '+%F %T') - $GITHUB_SHA\"" > ./cmd/fpt/version.go
        rm -rf build/fpt
        mkdir -p build/fpt
        go build -tags fpt_make -o build/fpt/fpt ./cmd/fpt
        chmod +x build/fpt/fpt*
        tar -zcf fpt-darwin-amd64-${GITHUB_REF_NAME}.tgz -C build fpt
        rm -r build/fpt

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fpt-darwin-amd64-${{ github.ref_name }}.tgz
        path: fpt-darwin-amd64-${{ github.ref_name }}.tgz

  build-windows:
    name: "Build Binary for Windows"
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Build Binary
      run: |
        echo -e "// go:build fpt_make\n\npackage main\n\nconst VV = \"fpt $GITHUB_REF_NAME - $(date '+%F %T') - $GITHUB_SHA\"" > ./cmd/fpt/version.go
        rm -rf build/fpt
        export CC="x86_64-w64-mingw32-gcc"
        export CXX="x86_64-w64-mingw32-g++"
        mkdir -p build/fpt
        go build -tags fpt_make -o build/fpt/fpt.exe ./cmd/fpt
        chmod +x build/fpt/fpt.exe
        pushd build; ls; pwd; 7z a -r ../fpt-windows-amd64-${GITHUB_REF_NAME}.zip fpt; ls; pwd; popd
        rm -r build/fpt
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fpt-windows-amd64-${{ github.ref_name }}.zip
        path: fpt-windows-amd64-${{ github.ref_name }}.zip

  release:
    if: startsWith(github.ref, 'refs/tags/v') # Only upload on tag push events
    name: Release
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos, build-windows]
    steps:
    - uses: actions/download-artifact@v5

    - name: Display structure of downloaded files
      run: ls -R

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        append_body: false
        draft: true # Indicator of whether or not this release is a draft
        # actions/download-artifact uses folders to store artifacts, so we need to include the wildcard to get the actual files
        files: |
          fpt-linux-amd64-${GITHUB_REF_NAME}.tgz/fpt-linux-amd64-${GITHUB_REF_NAME}.tgz
          fpt-darwin-amd64-${GITHUB_REF_NAME}.tgz/fpt-darwin-amd64-${GITHUB_REF_NAME}.tgz
          fpt-windows-amd64-${GITHUB_REF_NAME}.zip/fpt-windows-amd64-${GITHUB_REF_NAME}.zip