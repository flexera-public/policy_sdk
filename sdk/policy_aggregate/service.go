// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PolicyAggregate service
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package policyaggregate

import (
	"context"

	policyaggregateviews "github.com/flexera-public/policy_sdk/sdk/policy_aggregate/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the PolicyAggregate service interface.
type Service interface {
	// Create applies a policy template to a given project. The policy aggregate
	// will continually run until deleted.
	Create(context.Context, *CreatePayload) (res *CreateResult, err error)
	// Update changes the list of projects in a policy aggregate.
	Update(context.Context, *UpdatePayload) (err error)
	// Delete asynchronously stops and deletes a policy aggregate. All individual
	// applied policies in the aggregate will be stopped.
	Delete(context.Context, *DeletePayload) (err error)
	// Show retrieves the details of a policy aggregate.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "index"
	//	- "source"
	//	- "link"
	Show(context.Context, *ShowPayload) (res *PolicyAggregate, view string, err error)
	// ShowNonCatalog retrieves applied policies that are not part of a regular
	// aggregate. Only applied policies are applied from the project-scoped
	// Template endpoint (as opposed to the org-wide Catalog) are part of this
	// view. These template-based policies should largely be only used for
	// development and testing purposes.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "index"
	//	- "link"
	ShowNonCatalog(context.Context, *ShowNonCatalogPayload) (res *PolicyAggregateNonCatalog, view string, err error)
	// Index retrieves the list of policy aggregates in an org.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "link"
	Index(context.Context, *IndexPayload) (res *PolicyAggregateList, view string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "PolicyAggregate"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"create", "update", "delete", "show", "show_non_catalog", "index"}

// CreatePayload is the payload type of the PolicyAggregate service create
// method.
type CreatePayload struct {
	// org_id identifies an org by ID.
	OrgID uint
	// name provides a name for this specific application of the policy.
	Name string
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// template_href is the href of the published template that is applied.
	TemplateHref string
	// A list of project ids to include in this aggregate.
	ProjectIds []uint
	// all_projects is a flag to specify the policy should be run on all projects
	// in the org.
	AllProjects bool
	// frequency specifies the frequency with which to run policy evaluations
	Frequency string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun bool
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals bool
	// severity is the severity level of the incident.
	Severity *string
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateType
	// credentials is the map of name to credential used to launch the policy.
	Credentials map[string]string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// CreateResult is the result type of the PolicyAggregate service create method.
type CreateResult struct {
	Location string
}

// UpdatePayload is the payload type of the PolicyAggregate service update
// method.
type UpdatePayload struct {
	// policy_aggregate_id identifies an policy aggregate by ID.
	PolicyAggregateID string
	// org_id identifies an org by ID.
	OrgID uint
	// project_ids is a the list of projects in this aggregate. If empty, applies
	// to all projects, minus excluded projects
	ProjectIds []uint
	// excluded_project_ids is a list of project ids to exclude from this aggregate.
	ExcludedProjectIds []uint
	// name provides a name for this specific application of the policy.
	Name *string
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateType
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// DeletePayload is the payload type of the PolicyAggregate service delete
// method.
type DeletePayload struct {
	// org_id identifies an org by ID.
	OrgID uint
	// policy_aggregate_id identifies a policy aggregate by ID.
	PolicyAggregateID string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ShowPayload is the payload type of the PolicyAggregate service show method.
type ShowPayload struct {
	// org_id identifies an org by ID.
	OrgID uint
	// policy_aggregate_id identifies a policy aggregate by ID.
	PolicyAggregateID string
	// View used to render policy aggregate
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// PolicyAggregate is the result type of the PolicyAggregate service show
// method.
type PolicyAggregate struct {
	// id identifies an policy aggregate by ID.
	ID string
	// name provides a name for this specific application of the policy.
	Name string
	// Org represents a RightScale organization.
	Org *Org
	// href is the href of the policy aggregate.
	Href string
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplate
	// project_ids is a the list of projects in this aggregate. If empty, applies
	// to all projects, minus excluded projects
	ProjectIds []uint
	// excluded_project_ids is a list of projects to exclude form this aggregate.
	ExcludedProjectIds []uint
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// created_by is the RightScale user that applied the policy.
	CreatedBy *User
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string
	// category is the type categorization of the policy aggregate.
	Category *string
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOption
	// credentials is the map of name to credential used to launch the policy.
	Credentials map[string]string
	// status is used to identify the current status of the policy aggregate.
	Status *string
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint
	// The number of applied policies running across all projects.
	Count *uint
	// The number of applied policies in an active state.
	ActiveCount *uint
	// The number of applied policies in an error state.
	ErrorCount *uint
	// errors captures the errors occurred while applying aggregate to individual
	// projects.
	Errors map[string]string
	// An array of the individual applied policies and their statuses.
	Items PolicyAggregateItemCollection
	// kind is "gov#policy_aggregate".
	Kind string
}

// ShowNonCatalogPayload is the payload type of the PolicyAggregate service
// show_non_catalog method.
type ShowNonCatalogPayload struct {
	// org_id identifies an org by ID.
	OrgID uint
	// View used to render applied policy items.
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// PolicyAggregateNonCatalog is the result type of the PolicyAggregate service
// show_non_catalog method.
type PolicyAggregateNonCatalog struct {
	// href is the href of the policy aggregate.
	Href string
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint
	// The number of applied policies running across all projects.
	Count *uint
	// The number of applied policies in an active state.
	ActiveCount *uint
	// The number of applied policies in an error state.
	ErrorCount *uint
	// An array of the individual applied policies and their statuses.
	Items PolicyAggregateNonCatalogItemCollection
	// kind is "gov#policy_aggregate_non_catalog".
	Kind string
}

// IndexPayload is the payload type of the PolicyAggregate service index method.
type IndexPayload struct {
	// org_id identifies an org by ID.
	OrgID uint
	// etag is an HTTP ETag. It is typically the previous ETag value retrieved by
	// client if any. Service returns an empty response with HTTP status code 304
	// Not Modified if value matches current value server side.
	Etag *string
	// View used to render policy aggregates.
	View *string
	// name is a filter to only show policy aggregates that match this name.
	Name []string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// PolicyAggregateList is the result type of the PolicyAggregate service index
// method.
type PolicyAggregateList struct {
	// count is the number of policy aggregates in the list.
	Count *uint
	// etag is an HTTP ETag for the policy aggregate list.
	Etag string
	// items is the array of policy aggregates.
	Items PolicyAggregateCollection
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#policy_aggregate_list".
	Kind string
}

// ConfigurationOptionCreateType is the payload for creating a single parameter
// value used to configure an applied policy.
type ConfigurationOptionCreateType struct {
	// name of option
	Name string
	// value of option
	Value interface{}
}

// Org represents a RightScale organization.
type Org struct {
	// id is the Org ID
	ID uint
	// name is the organization name
	Name string
}

// PublishedTemplate describes a previously created published template.
type PublishedTemplate struct {
	// id identifies a published template by ID.
	ID string
	// name is the unique name of the published template in the organization.
	Name string
	// org_id is the ID of the organization that the published template belongs to.
	OrgID *uint
	// project_id is the ID of the project that the published template is published
	// from.
	ProjectID *uint
	// policy_template_id is the ID of the policy template from which the published
	// template originated.
	PolicyTemplateID *string
	// policy_template_url is the full URL to the policy template from which the
	// published template originated.
	PolicyTemplateURL *string
	// policy_template_fingerprint is fingerprint of the policy template. It is
	// used to determine if the policy template that this was published from is
	// outdated.
	PolicyTemplateFingerprint *string
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the published template.
	ShortDescription *string
	// long_description is the long description of the published template. The
	// content can be markdown.
	LongDescription *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the self-referential href of the published template.
	Href string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is published template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string
	// category is the type categorization of the published template.
	Category *string
	// created_by is the RightScale user that created the published template.
	CreatedBy *User
	// created_at is the published template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *User
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*Permission
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*Parameter
	// severity defines the severity level of incidents raised from this published
	// template.
	Severity *string
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool
	// hidden is a flag to indicate whether the published template is hidden.
	Hidden *bool
	// hidden_by is the RightScale user that marked the published template as
	// hidden.
	HiddenBy *User
	// hidden_at is the hidden at timestamp in RFC3339 format.
	HiddenAt *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*Credentials
	// kind is "gov#published_template".
	Kind string
}

// User represents a registered RightScale user.
type User struct {
	// ID of user
	ID uint
	// email of user
	Email string
	// name of user, usually of the form 'First Last'
	Name string
}

// Permission defines a role required in RightScale to perform actions on
// resources
type Permission struct {
	// Name of a permission
	Name string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// Parameter defines a parameter given as input to a Policy
type Parameter struct {
	// Name of the parameter
	Name string `json:"name"`
	// Type of the parameter
	Type string `json:"type"`
	// Label to show in the UI
	Label string `json:"label"`
	// The index of this parameter in the list
	Index uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *Regexp `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// Regular expression
type Regexp struct {
	// Pattern is the regular expression pattern.
	Pattern string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// Credentials describes a reference to an API signer in the credentials
// service in the policy language.
type Credentials struct {
	// Name in policy template source code
	Name string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTag `json:"tags"`
}

type CredentialsTag struct {
	// Key is the tag key.
	Key string `json:"key"`
	// Value is the tag value.
	Value string `json:"value"`
}

// ConfigurationOption describes a single parameter value used to configure an
// applied policy.
type ConfigurationOption struct {
	// name of option
	Name string
	// label of option
	Label string
	// type of option
	Type string
	// value of option
	Value interface{}
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho bool
}

type PolicyAggregateItemCollection []*PolicyAggregateItem

// PolicyAggregateItem is a summarized view of a running applied policy.
type PolicyAggregateItem struct {
	// id identifies an applied policy by ID.
	ID string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *Project
	// url of the applied policy.
	URL string
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string
	// status is used to identify the current status of the applied policy.
	Status *string
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string
	// kind is "gov#policy_aggregate_item".
	Kind string
}

// Project represents a RightScale project and provides some information about
// the project.
type Project struct {
	// id is the Project ID
	ID uint
	// name is the Project Name
	Name string
	// org_id is the RightScale Organization ID
	OrgID uint
	// org_name is the RightScale Organization Name
	OrgName string
}

type PolicyAggregateNonCatalogItemCollection []*PolicyAggregateNonCatalogItem

// PolicyAggregateNonCatalogItem is a summarized view of a running applied
// policy.
type PolicyAggregateNonCatalogItem struct {
	// id identifies an applied policy by ID.
	ID string
	// name provides a name for this specific application of the policy.
	Name *string
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *Project
	// url of the applied policy.
	URL string
	// policy_template links to key attributes of the template from which the item
	// originated.
	PolicyTemplate *PolicyTemplate
	// status is used to identify the current status of the applied policy.
	Status *string
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string
	// created_by is the RightScale user that applied the policy.
	CreatedBy *User
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string
	// category is the type categorization of the policy aggregate.
	Category *string
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool
	// kind is "gov#policy_aggregate_non_catalog_item".
	Kind string
}

// PolicyTemplate describes a previously uploaded policy template.
type PolicyTemplate struct {
	// id identifies a policy template by ID.
	ID string
	// name is the unique name of the policy template in the project.
	Name string
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the policy template.
	ShortDescription *string
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the href of the policy template.
	Href string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is the policy template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string
	// category is the type categorization of the policy template.
	Category *string
	// created_by is the RightScale user that created the policy template.
	CreatedBy *User
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *User
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*Permission
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*Parameter
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*Credentials
	// kind is "gov#policy_template".
	Kind string
}

type PolicyAggregateCollection []*PolicyAggregate

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadGateway builds a goa.ServiceError from an error.
func MakeBadGateway(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_gateway",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnprocessableEntity builds a goa.ServiceError from an error.
func MakeUnprocessableEntity(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unprocessable_entity",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewPolicyAggregate initializes result type PolicyAggregate from viewed
// result type PolicyAggregate.
func NewPolicyAggregate(vres *policyaggregateviews.PolicyAggregate) *PolicyAggregate {
	var res *PolicyAggregate
	switch vres.View {
	case "default", "":
		res = newPolicyAggregate(vres.Projected)
	case "index":
		res = newPolicyAggregateIndex(vres.Projected)
	case "source":
		res = newPolicyAggregateSource(vres.Projected)
	case "link":
		res = newPolicyAggregateLink(vres.Projected)
	}
	return res
}

// NewViewedPolicyAggregate initializes viewed result type PolicyAggregate from
// result type PolicyAggregate using the given view.
func NewViewedPolicyAggregate(res *PolicyAggregate, view string) *policyaggregateviews.PolicyAggregate {
	var vres *policyaggregateviews.PolicyAggregate
	switch view {
	case "default", "":
		p := newPolicyAggregateView(res)
		vres = &policyaggregateviews.PolicyAggregate{Projected: p, View: "default"}
	case "index":
		p := newPolicyAggregateViewIndex(res)
		vres = &policyaggregateviews.PolicyAggregate{Projected: p, View: "index"}
	case "source":
		p := newPolicyAggregateViewSource(res)
		vres = &policyaggregateviews.PolicyAggregate{Projected: p, View: "source"}
	case "link":
		p := newPolicyAggregateViewLink(res)
		vres = &policyaggregateviews.PolicyAggregate{Projected: p, View: "link"}
	}
	return vres
}

// NewPolicyAggregateNonCatalog initializes result type
// PolicyAggregateNonCatalog from viewed result type PolicyAggregateNonCatalog.
func NewPolicyAggregateNonCatalog(vres *policyaggregateviews.PolicyAggregateNonCatalog) *PolicyAggregateNonCatalog {
	var res *PolicyAggregateNonCatalog
	switch vres.View {
	case "default", "":
		res = newPolicyAggregateNonCatalog(vres.Projected)
	case "index":
		res = newPolicyAggregateNonCatalogIndex(vres.Projected)
	case "link":
		res = newPolicyAggregateNonCatalogLink(vres.Projected)
	}
	return res
}

// NewViewedPolicyAggregateNonCatalog initializes viewed result type
// PolicyAggregateNonCatalog from result type PolicyAggregateNonCatalog using
// the given view.
func NewViewedPolicyAggregateNonCatalog(res *PolicyAggregateNonCatalog, view string) *policyaggregateviews.PolicyAggregateNonCatalog {
	var vres *policyaggregateviews.PolicyAggregateNonCatalog
	switch view {
	case "default", "":
		p := newPolicyAggregateNonCatalogView(res)
		vres = &policyaggregateviews.PolicyAggregateNonCatalog{Projected: p, View: "default"}
	case "index":
		p := newPolicyAggregateNonCatalogViewIndex(res)
		vres = &policyaggregateviews.PolicyAggregateNonCatalog{Projected: p, View: "index"}
	case "link":
		p := newPolicyAggregateNonCatalogViewLink(res)
		vres = &policyaggregateviews.PolicyAggregateNonCatalog{Projected: p, View: "link"}
	}
	return vres
}

// NewPolicyAggregateList initializes result type PolicyAggregateList from
// viewed result type PolicyAggregateList.
func NewPolicyAggregateList(vres *policyaggregateviews.PolicyAggregateList) *PolicyAggregateList {
	var res *PolicyAggregateList
	switch vres.View {
	case "default", "":
		res = newPolicyAggregateList(vres.Projected)
	case "link":
		res = newPolicyAggregateListLink(vres.Projected)
	}
	return res
}

// NewViewedPolicyAggregateList initializes viewed result type
// PolicyAggregateList from result type PolicyAggregateList using the given
// view.
func NewViewedPolicyAggregateList(res *PolicyAggregateList, view string) *policyaggregateviews.PolicyAggregateList {
	var vres *policyaggregateviews.PolicyAggregateList
	switch view {
	case "default", "":
		p := newPolicyAggregateListView(res)
		vres = &policyaggregateviews.PolicyAggregateList{Projected: p, View: "default"}
	case "link":
		p := newPolicyAggregateListViewLink(res)
		vres = &policyaggregateviews.PolicyAggregateList{Projected: p, View: "link"}
	}
	return vres
}

// newPolicyAggregate converts projected type PolicyAggregate to service type
// PolicyAggregate.
func newPolicyAggregate(vres *policyaggregateviews.PolicyAggregateView) *PolicyAggregate {
	res := &PolicyAggregate{
		IncidentAggregateHref: vres.IncidentAggregateHref,
		Description:           vres.Description,
		DocLink:               vres.DocLink,
		CreatedAt:             vres.CreatedAt,
		UpdatedAt:             vres.UpdatedAt,
		Severity:              vres.Severity,
		Category:              vres.Category,
		Frequency:             vres.Frequency,
		DryRun:                vres.DryRun,
		SkipApprovals:         vres.SkipApprovals,
		Status:                vres.Status,
		Count:                 vres.Count,
		ActiveCount:           vres.ActiveCount,
		ErrorCount:            vres.ErrorCount,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Org != nil {
		res.Org = transformPolicyaggregateviewsOrgViewToOrg(vres.Org)
	}
	if vres.ProjectIds != nil {
		res.ProjectIds = make([]uint, len(vres.ProjectIds))
		for i, val := range vres.ProjectIds {
			res.ProjectIds[i] = val
		}
	}
	if vres.ExcludedProjectIds != nil {
		res.ExcludedProjectIds = make([]uint, len(vres.ExcludedProjectIds))
		for i, val := range vres.ExcludedProjectIds {
			res.ExcludedProjectIds[i] = val
		}
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformPolicyaggregateviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]string, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}
	if vres.RunningProjectIds != nil {
		res.RunningProjectIds = make([]uint, len(vres.RunningProjectIds))
		for i, val := range vres.RunningProjectIds {
			res.RunningProjectIds[i] = val
		}
	}
	if vres.Errors != nil {
		res.Errors = make(map[string]string, len(vres.Errors))
		for key, val := range vres.Errors {
			tk := key
			tv := val
			res.Errors[tk] = tv
		}
	}
	if vres.PublishedTemplate != nil {
		res.PublishedTemplate = newPublishedTemplateLink(vres.PublishedTemplate)
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateItemCollection(vres.Items)
	}
	return res
}

// newPolicyAggregateIndex converts projected type PolicyAggregate to service
// type PolicyAggregate.
func newPolicyAggregateIndex(vres *policyaggregateviews.PolicyAggregateView) *PolicyAggregate {
	res := &PolicyAggregate{
		IncidentAggregateHref: vres.IncidentAggregateHref,
		Description:           vres.Description,
		DocLink:               vres.DocLink,
		CreatedAt:             vres.CreatedAt,
		UpdatedAt:             vres.UpdatedAt,
		Severity:              vres.Severity,
		Category:              vres.Category,
		Frequency:             vres.Frequency,
		DryRun:                vres.DryRun,
		SkipApprovals:         vres.SkipApprovals,
		Status:                vres.Status,
		Count:                 vres.Count,
		ActiveCount:           vres.ActiveCount,
		ErrorCount:            vres.ErrorCount,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Org != nil {
		res.Org = transformPolicyaggregateviewsOrgViewToOrg(vres.Org)
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformPolicyaggregateviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]string, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}
	if vres.RunningProjectIds != nil {
		res.RunningProjectIds = make([]uint, len(vres.RunningProjectIds))
		for i, val := range vres.RunningProjectIds {
			res.RunningProjectIds[i] = val
		}
	}
	if vres.PublishedTemplate != nil {
		res.PublishedTemplate = newPublishedTemplateLink(vres.PublishedTemplate)
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateItemCollection(vres.Items)
	}
	return res
}

// newPolicyAggregateSource converts projected type PolicyAggregate to service
// type PolicyAggregate.
func newPolicyAggregateSource(vres *policyaggregateviews.PolicyAggregateView) *PolicyAggregate {
	res := &PolicyAggregate{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Org != nil {
		res.Org = transformPolicyaggregateviewsOrgViewToOrg(vres.Org)
	}
	if vres.PublishedTemplate != nil {
		res.PublishedTemplate = newPublishedTemplateSource(vres.PublishedTemplate)
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateItemCollection(vres.Items)
	}
	return res
}

// newPolicyAggregateLink converts projected type PolicyAggregate to service
// type PolicyAggregate.
func newPolicyAggregateLink(vres *policyaggregateviews.PolicyAggregateView) *PolicyAggregate {
	res := &PolicyAggregate{
		IncidentAggregateHref: vres.IncidentAggregateHref,
		CreatedAt:             vres.CreatedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.PublishedTemplate != nil {
		res.PublishedTemplate = newPublishedTemplateLink(vres.PublishedTemplate)
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateItemCollection(vres.Items)
	}
	return res
}

// newPolicyAggregateView projects result type PolicyAggregate to projected
// type PolicyAggregateView using the "default" view.
func newPolicyAggregateView(res *PolicyAggregate) *policyaggregateviews.PolicyAggregateView {
	vres := &policyaggregateviews.PolicyAggregateView{
		ID:                    &res.ID,
		Name:                  &res.Name,
		Href:                  &res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Description:           res.Description,
		DocLink:               res.DocLink,
		CreatedAt:             res.CreatedAt,
		UpdatedAt:             res.UpdatedAt,
		Severity:              res.Severity,
		Category:              res.Category,
		Frequency:             res.Frequency,
		DryRun:                res.DryRun,
		SkipApprovals:         res.SkipApprovals,
		Status:                res.Status,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  &res.Kind,
	}
	if res.Org != nil {
		vres.Org = transformOrgToPolicyaggregateviewsOrgView(res.Org)
	}
	if res.ProjectIds != nil {
		vres.ProjectIds = make([]uint, len(res.ProjectIds))
		for i, val := range res.ProjectIds {
			vres.ProjectIds[i] = val
		}
	}
	if res.ExcludedProjectIds != nil {
		vres.ExcludedProjectIds = make([]uint, len(res.ExcludedProjectIds))
		for i, val := range res.ExcludedProjectIds {
			vres.ExcludedProjectIds[i] = val
		}
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.Options != nil {
		vres.Options = make([]*policyaggregateviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToPolicyaggregateviewsConfigurationOptionView(val)
		}
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]string, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			tv := val
			vres.Credentials[tk] = tv
		}
	}
	if res.RunningProjectIds != nil {
		vres.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			vres.RunningProjectIds[i] = val
		}
	}
	if res.Errors != nil {
		vres.Errors = make(map[string]string, len(res.Errors))
		for key, val := range res.Errors {
			tk := key
			tv := val
			vres.Errors[tk] = tv
		}
	}
	if res.PublishedTemplate != nil {
		vres.PublishedTemplate = newPublishedTemplateViewLink(res.PublishedTemplate)
	}
	if res.Items != nil {
		vres.Items = newPolicyAggregateItemCollectionView(res.Items)
	}
	return vres
}

// newPolicyAggregateViewIndex projects result type PolicyAggregate to
// projected type PolicyAggregateView using the "index" view.
func newPolicyAggregateViewIndex(res *PolicyAggregate) *policyaggregateviews.PolicyAggregateView {
	vres := &policyaggregateviews.PolicyAggregateView{
		ID:                    &res.ID,
		Name:                  &res.Name,
		Href:                  &res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Description:           res.Description,
		DocLink:               res.DocLink,
		CreatedAt:             res.CreatedAt,
		UpdatedAt:             res.UpdatedAt,
		Severity:              res.Severity,
		Category:              res.Category,
		Frequency:             res.Frequency,
		DryRun:                res.DryRun,
		SkipApprovals:         res.SkipApprovals,
		Status:                res.Status,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  &res.Kind,
	}
	if res.Org != nil {
		vres.Org = transformOrgToPolicyaggregateviewsOrgView(res.Org)
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.Options != nil {
		vres.Options = make([]*policyaggregateviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToPolicyaggregateviewsConfigurationOptionView(val)
		}
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]string, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			tv := val
			vres.Credentials[tk] = tv
		}
	}
	if res.RunningProjectIds != nil {
		vres.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			vres.RunningProjectIds[i] = val
		}
	}
	if res.PublishedTemplate != nil {
		vres.PublishedTemplate = newPublishedTemplateViewLink(res.PublishedTemplate)
	}
	return vres
}

// newPolicyAggregateViewSource projects result type PolicyAggregate to
// projected type PolicyAggregateView using the "source" view.
func newPolicyAggregateViewSource(res *PolicyAggregate) *policyaggregateviews.PolicyAggregateView {
	vres := &policyaggregateviews.PolicyAggregateView{
		ID:   &res.ID,
		Name: &res.Name,
		Href: &res.Href,
		Kind: &res.Kind,
	}
	if res.Org != nil {
		vres.Org = transformOrgToPolicyaggregateviewsOrgView(res.Org)
	}
	if res.PublishedTemplate != nil {
		vres.PublishedTemplate = newPublishedTemplateViewSource(res.PublishedTemplate)
	}
	return vres
}

// newPolicyAggregateViewLink projects result type PolicyAggregate to projected
// type PolicyAggregateView using the "link" view.
func newPolicyAggregateViewLink(res *PolicyAggregate) *policyaggregateviews.PolicyAggregateView {
	vres := &policyaggregateviews.PolicyAggregateView{
		ID:                    &res.ID,
		Name:                  &res.Name,
		Href:                  &res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		CreatedAt:             res.CreatedAt,
		Kind:                  &res.Kind,
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.PublishedTemplate != nil {
		vres.PublishedTemplate = newPublishedTemplateViewLink(res.PublishedTemplate)
	}
	return vres
}

// newPublishedTemplate converts projected type PublishedTemplate to service
// type PublishedTemplate.
func newPublishedTemplate(vres *policyaggregateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		OrgID:                     vres.OrgID,
		ProjectID:                 vres.ProjectID,
		PolicyTemplateID:          vres.PolicyTemplateID,
		PolicyTemplateURL:         vres.PolicyTemplateURL,
		PolicyTemplateFingerprint: vres.PolicyTemplateFingerprint,
		RsPtVer:                   vres.RsPtVer,
		ShortDescription:          vres.ShortDescription,
		DocLink:                   vres.DocLink,
		DefaultFrequency:          vres.DefaultFrequency,
		Category:                  vres.Category,
		CreatedAt:                 vres.CreatedAt,
		UpdatedAt:                 vres.UpdatedAt,
		HiddenAt:                  vres.HiddenAt,
		Severity:                  vres.Severity,
		BuiltIn:                   vres.BuiltIn,
		Hidden:                    vres.Hidden,
		Tenancy:                   vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPolicyaggregateviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.HiddenBy != nil {
		res.HiddenBy = transformPolicyaggregateviewsUserViewToUser(vres.HiddenBy)
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	return res
}

// newPublishedTemplateExtended converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateExtended(vres *policyaggregateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		OrgID:                     vres.OrgID,
		ProjectID:                 vres.ProjectID,
		PolicyTemplateID:          vres.PolicyTemplateID,
		PolicyTemplateURL:         vres.PolicyTemplateURL,
		PolicyTemplateFingerprint: vres.PolicyTemplateFingerprint,
		RsPtVer:                   vres.RsPtVer,
		ShortDescription:          vres.ShortDescription,
		LongDescription:           vres.LongDescription,
		DocLink:                   vres.DocLink,
		DefaultFrequency:          vres.DefaultFrequency,
		Category:                  vres.Category,
		CreatedAt:                 vres.CreatedAt,
		UpdatedAt:                 vres.UpdatedAt,
		HiddenAt:                  vres.HiddenAt,
		Severity:                  vres.Severity,
		BuiltIn:                   vres.BuiltIn,
		Hidden:                    vres.Hidden,
		Tenancy:                   vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPolicyaggregateviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.HiddenBy != nil {
		res.HiddenBy = transformPolicyaggregateviewsUserViewToUser(vres.HiddenBy)
	}
	if vres.Permissions != nil {
		res.Permissions = make(map[string]*Permission, len(vres.Permissions))
		for key, val := range vres.Permissions {
			tk := key
			res.Permissions[tk] = transformPolicyaggregateviewsPermissionViewToPermission(val)
		}
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if vres.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(vres.Parameters))
		for key, val := range vres.Parameters {
			tk := key
			res.Parameters[tk] = transformPolicyaggregateviewsParameterViewToParameter(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]*Credentials, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			res.Credentials[tk] = transformPolicyaggregateviewsCredentialsViewToCredentials(val)
		}
	}
	return res
}

// newPublishedTemplateSource converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateSource(vres *policyaggregateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		Filename: vres.Filename,
		Source:   vres.Source,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	return res
}

// newPublishedTemplateLink converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateLink(vres *policyaggregateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		UpdatedAt: vres.UpdatedAt,
		BuiltIn:   vres.BuiltIn,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPolicyaggregateviewsUserViewToUser(vres.UpdatedBy)
	}
	return res
}

// newPublishedTemplateView projects result type PublishedTemplate to projected
// type PublishedTemplateView using the "default" view.
func newPublishedTemplateView(res *PublishedTemplate) *policyaggregateviews.PublishedTemplateView {
	vres := &policyaggregateviews.PublishedTemplateView{
		ID:                        &res.ID,
		Name:                      &res.Name,
		OrgID:                     res.OrgID,
		ProjectID:                 res.ProjectID,
		PolicyTemplateID:          res.PolicyTemplateID,
		PolicyTemplateURL:         res.PolicyTemplateURL,
		PolicyTemplateFingerprint: res.PolicyTemplateFingerprint,
		RsPtVer:                   res.RsPtVer,
		ShortDescription:          res.ShortDescription,
		DocLink:                   res.DocLink,
		DefaultFrequency:          res.DefaultFrequency,
		Href:                      &res.Href,
		Fingerprint:               &res.Fingerprint,
		Category:                  res.Category,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
		Severity:                  res.Severity,
		BuiltIn:                   res.BuiltIn,
		Hidden:                    res.Hidden,
		HiddenAt:                  res.HiddenAt,
		Tenancy:                   res.Tenancy,
		Kind:                      &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPolicyaggregateviewsUserView(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.HiddenBy != nil {
		vres.HiddenBy = transformUserToPolicyaggregateviewsUserView(res.HiddenBy)
	}
	return vres
}

// newPublishedTemplateViewExtended projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "extended" view.
func newPublishedTemplateViewExtended(res *PublishedTemplate) *policyaggregateviews.PublishedTemplateView {
	vres := &policyaggregateviews.PublishedTemplateView{
		ID:                        &res.ID,
		Name:                      &res.Name,
		OrgID:                     res.OrgID,
		ProjectID:                 res.ProjectID,
		PolicyTemplateID:          res.PolicyTemplateID,
		PolicyTemplateURL:         res.PolicyTemplateURL,
		PolicyTemplateFingerprint: res.PolicyTemplateFingerprint,
		RsPtVer:                   res.RsPtVer,
		ShortDescription:          res.ShortDescription,
		LongDescription:           res.LongDescription,
		DocLink:                   res.DocLink,
		DefaultFrequency:          res.DefaultFrequency,
		Href:                      &res.Href,
		Fingerprint:               &res.Fingerprint,
		Category:                  res.Category,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
		Severity:                  res.Severity,
		BuiltIn:                   res.BuiltIn,
		Hidden:                    res.Hidden,
		HiddenAt:                  res.HiddenAt,
		Tenancy:                   res.Tenancy,
		Kind:                      &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPolicyaggregateviewsUserView(res.UpdatedBy)
	}
	if res.Permissions != nil {
		vres.Permissions = make(map[string]*policyaggregateviews.PermissionView, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			vres.Permissions[tk] = transformPermissionToPolicyaggregateviewsPermissionView(val)
		}
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		vres.Parameters = make(map[string]*policyaggregateviews.ParameterView, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			vres.Parameters[tk] = transformParameterToPolicyaggregateviewsParameterView(val)
		}
	}
	if res.HiddenBy != nil {
		vres.HiddenBy = transformUserToPolicyaggregateviewsUserView(res.HiddenBy)
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]*policyaggregateviews.CredentialsView, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			vres.Credentials[tk] = transformCredentialsToPolicyaggregateviewsCredentialsView(val)
		}
	}
	return vres
}

// newPublishedTemplateViewSource projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "source" view.
func newPublishedTemplateViewSource(res *PublishedTemplate) *policyaggregateviews.PublishedTemplateView {
	vres := &policyaggregateviews.PublishedTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: &res.Fingerprint,
		Kind:        &res.Kind,
	}
	return vres
}

// newPublishedTemplateViewLink projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "link" view.
func newPublishedTemplateViewLink(res *PublishedTemplate) *policyaggregateviews.PublishedTemplateView {
	vres := &policyaggregateviews.PublishedTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Fingerprint: &res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		BuiltIn:     res.BuiltIn,
		Kind:        &res.Kind,
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPolicyaggregateviewsUserView(res.UpdatedBy)
	}
	return vres
}

// newPolicyAggregateItemCollection converts projected type
// PolicyAggregateItemCollection to service type PolicyAggregateItemCollection.
func newPolicyAggregateItemCollection(vres policyaggregateviews.PolicyAggregateItemCollectionView) PolicyAggregateItemCollection {
	res := make(PolicyAggregateItemCollection, len(vres))
	for i, n := range vres {
		res[i] = newPolicyAggregateItem(n)
	}
	return res
}

// newPolicyAggregateItemCollectionLink converts projected type
// PolicyAggregateItemCollection to service type PolicyAggregateItemCollection.
func newPolicyAggregateItemCollectionLink(vres policyaggregateviews.PolicyAggregateItemCollectionView) PolicyAggregateItemCollection {
	res := make(PolicyAggregateItemCollection, len(vres))
	for i, n := range vres {
		res[i] = newPolicyAggregateItemLink(n)
	}
	return res
}

// newPolicyAggregateItemCollectionView projects result type
// PolicyAggregateItemCollection to projected type
// PolicyAggregateItemCollectionView using the "default" view.
func newPolicyAggregateItemCollectionView(res PolicyAggregateItemCollection) policyaggregateviews.PolicyAggregateItemCollectionView {
	vres := make(policyaggregateviews.PolicyAggregateItemCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPolicyAggregateItemView(n)
	}
	return vres
}

// newPolicyAggregateItemCollectionViewLink projects result type
// PolicyAggregateItemCollection to projected type
// PolicyAggregateItemCollectionView using the "link" view.
func newPolicyAggregateItemCollectionViewLink(res PolicyAggregateItemCollection) policyaggregateviews.PolicyAggregateItemCollectionView {
	vres := make(policyaggregateviews.PolicyAggregateItemCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPolicyAggregateItemViewLink(n)
	}
	return vres
}

// newPolicyAggregateItem converts projected type PolicyAggregateItem to
// service type PolicyAggregateItem.
func newPolicyAggregateItem(vres *policyaggregateviews.PolicyAggregateItemView) *PolicyAggregateItem {
	res := &PolicyAggregateItem{
		CreatedAt: vres.CreatedAt,
		UpdatedAt: vres.UpdatedAt,
		Status:    vres.Status,
		Error:     vres.Error,
		ErroredAt: vres.ErroredAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.URL != nil {
		res.URL = *vres.URL
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Project != nil {
		res.Project = transformPolicyaggregateviewsProjectViewToProject(vres.Project)
	}
	return res
}

// newPolicyAggregateItemLink converts projected type PolicyAggregateItem to
// service type PolicyAggregateItem.
func newPolicyAggregateItemLink(vres *policyaggregateviews.PolicyAggregateItemView) *PolicyAggregateItem {
	res := &PolicyAggregateItem{
		CreatedAt: vres.CreatedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.URL != nil {
		res.URL = *vres.URL
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	return res
}

// newPolicyAggregateItemView projects result type PolicyAggregateItem to
// projected type PolicyAggregateItemView using the "default" view.
func newPolicyAggregateItemView(res *PolicyAggregateItem) *policyaggregateviews.PolicyAggregateItemView {
	vres := &policyaggregateviews.PolicyAggregateItemView{
		ID:        &res.ID,
		URL:       &res.URL,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
		Status:    res.Status,
		Error:     res.Error,
		ErroredAt: res.ErroredAt,
		Kind:      &res.Kind,
	}
	if res.Project != nil {
		vres.Project = transformProjectToPolicyaggregateviewsProjectView(res.Project)
	}
	return vres
}

// newPolicyAggregateItemViewLink projects result type PolicyAggregateItem to
// projected type PolicyAggregateItemView using the "link" view.
func newPolicyAggregateItemViewLink(res *PolicyAggregateItem) *policyaggregateviews.PolicyAggregateItemView {
	vres := &policyaggregateviews.PolicyAggregateItemView{
		ID:        &res.ID,
		URL:       &res.URL,
		CreatedAt: res.CreatedAt,
		Kind:      &res.Kind,
	}
	return vres
}

// newPolicyAggregateNonCatalog converts projected type
// PolicyAggregateNonCatalog to service type PolicyAggregateNonCatalog.
func newPolicyAggregateNonCatalog(vres *policyaggregateviews.PolicyAggregateNonCatalogView) *PolicyAggregateNonCatalog {
	res := &PolicyAggregateNonCatalog{
		IncidentAggregateHref: vres.IncidentAggregateHref,
		Count:                 vres.Count,
		ActiveCount:           vres.ActiveCount,
		ErrorCount:            vres.ErrorCount,
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.RunningProjectIds != nil {
		res.RunningProjectIds = make([]uint, len(vres.RunningProjectIds))
		for i, val := range vres.RunningProjectIds {
			res.RunningProjectIds[i] = val
		}
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateNonCatalogItemCollection(vres.Items)
	}
	return res
}

// newPolicyAggregateNonCatalogIndex converts projected type
// PolicyAggregateNonCatalog to service type PolicyAggregateNonCatalog.
func newPolicyAggregateNonCatalogIndex(vres *policyaggregateviews.PolicyAggregateNonCatalogView) *PolicyAggregateNonCatalog {
	res := &PolicyAggregateNonCatalog{
		IncidentAggregateHref: vres.IncidentAggregateHref,
		Count:                 vres.Count,
		ActiveCount:           vres.ActiveCount,
		ErrorCount:            vres.ErrorCount,
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.RunningProjectIds != nil {
		res.RunningProjectIds = make([]uint, len(vres.RunningProjectIds))
		for i, val := range vres.RunningProjectIds {
			res.RunningProjectIds[i] = val
		}
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateNonCatalogItemCollection(vres.Items)
	}
	return res
}

// newPolicyAggregateNonCatalogLink converts projected type
// PolicyAggregateNonCatalog to service type PolicyAggregateNonCatalog.
func newPolicyAggregateNonCatalogLink(vres *policyaggregateviews.PolicyAggregateNonCatalogView) *PolicyAggregateNonCatalog {
	res := &PolicyAggregateNonCatalog{
		IncidentAggregateHref: vres.IncidentAggregateHref,
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateNonCatalogItemCollection(vres.Items)
	}
	return res
}

// newPolicyAggregateNonCatalogView projects result type
// PolicyAggregateNonCatalog to projected type PolicyAggregateNonCatalogView
// using the "default" view.
func newPolicyAggregateNonCatalogView(res *PolicyAggregateNonCatalog) *policyaggregateviews.PolicyAggregateNonCatalogView {
	vres := &policyaggregateviews.PolicyAggregateNonCatalogView{
		Href:                  &res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  &res.Kind,
	}
	if res.RunningProjectIds != nil {
		vres.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			vres.RunningProjectIds[i] = val
		}
	}
	if res.Items != nil {
		vres.Items = newPolicyAggregateNonCatalogItemCollectionView(res.Items)
	}
	return vres
}

// newPolicyAggregateNonCatalogViewIndex projects result type
// PolicyAggregateNonCatalog to projected type PolicyAggregateNonCatalogView
// using the "index" view.
func newPolicyAggregateNonCatalogViewIndex(res *PolicyAggregateNonCatalog) *policyaggregateviews.PolicyAggregateNonCatalogView {
	vres := &policyaggregateviews.PolicyAggregateNonCatalogView{
		Href:                  &res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  &res.Kind,
	}
	if res.RunningProjectIds != nil {
		vres.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			vres.RunningProjectIds[i] = val
		}
	}
	return vres
}

// newPolicyAggregateNonCatalogViewLink projects result type
// PolicyAggregateNonCatalog to projected type PolicyAggregateNonCatalogView
// using the "link" view.
func newPolicyAggregateNonCatalogViewLink(res *PolicyAggregateNonCatalog) *policyaggregateviews.PolicyAggregateNonCatalogView {
	vres := &policyaggregateviews.PolicyAggregateNonCatalogView{
		Href:                  &res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Kind:                  &res.Kind,
	}
	return vres
}

// newPolicyAggregateNonCatalogItemCollection converts projected type
// PolicyAggregateNonCatalogItemCollection to service type
// PolicyAggregateNonCatalogItemCollection.
func newPolicyAggregateNonCatalogItemCollection(vres policyaggregateviews.PolicyAggregateNonCatalogItemCollectionView) PolicyAggregateNonCatalogItemCollection {
	res := make(PolicyAggregateNonCatalogItemCollection, len(vres))
	for i, n := range vres {
		res[i] = newPolicyAggregateNonCatalogItem(n)
	}
	return res
}

// newPolicyAggregateNonCatalogItemCollectionView projects result type
// PolicyAggregateNonCatalogItemCollection to projected type
// PolicyAggregateNonCatalogItemCollectionView using the "default" view.
func newPolicyAggregateNonCatalogItemCollectionView(res PolicyAggregateNonCatalogItemCollection) policyaggregateviews.PolicyAggregateNonCatalogItemCollectionView {
	vres := make(policyaggregateviews.PolicyAggregateNonCatalogItemCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPolicyAggregateNonCatalogItemView(n)
	}
	return vres
}

// newPolicyAggregateNonCatalogItem converts projected type
// PolicyAggregateNonCatalogItem to service type PolicyAggregateNonCatalogItem.
func newPolicyAggregateNonCatalogItem(vres *policyaggregateviews.PolicyAggregateNonCatalogItemView) *PolicyAggregateNonCatalogItem {
	res := &PolicyAggregateNonCatalogItem{
		CreatedAt:   vres.CreatedAt,
		UpdatedAt:   vres.UpdatedAt,
		Status:      vres.Status,
		Error:       vres.Error,
		ErroredAt:   vres.ErroredAt,
		Name:        vres.Name,
		Description: vres.Description,
		Severity:    vres.Severity,
		Category:    vres.Category,
		Frequency:   vres.Frequency,
		DryRun:      vres.DryRun,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.URL != nil {
		res.URL = *vres.URL
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Project != nil {
		res.Project = transformPolicyaggregateviewsProjectViewToProject(vres.Project)
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.PolicyTemplate != nil {
		res.PolicyTemplate = newPolicyTemplateLink(vres.PolicyTemplate)
	}
	return res
}

// newPolicyAggregateNonCatalogItemView projects result type
// PolicyAggregateNonCatalogItem to projected type
// PolicyAggregateNonCatalogItemView using the "default" view.
func newPolicyAggregateNonCatalogItemView(res *PolicyAggregateNonCatalogItem) *policyaggregateviews.PolicyAggregateNonCatalogItemView {
	vres := &policyaggregateviews.PolicyAggregateNonCatalogItemView{
		ID:          &res.ID,
		Name:        res.Name,
		Description: res.Description,
		URL:         &res.URL,
		Status:      res.Status,
		Error:       res.Error,
		ErroredAt:   res.ErroredAt,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		Severity:    res.Severity,
		Category:    res.Category,
		Frequency:   res.Frequency,
		DryRun:      res.DryRun,
		Kind:        &res.Kind,
	}
	if res.Project != nil {
		vres.Project = transformProjectToPolicyaggregateviewsProjectView(res.Project)
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.PolicyTemplate != nil {
		vres.PolicyTemplate = newPolicyTemplateViewLink(res.PolicyTemplate)
	}
	return vres
}

// newPolicyTemplate converts projected type PolicyTemplate to service type
// PolicyTemplate.
func newPolicyTemplate(vres *policyaggregateviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		ProjectID:        vres.ProjectID,
		RsPtVer:          vres.RsPtVer,
		ShortDescription: vres.ShortDescription,
		DocLink:          vres.DocLink,
		DefaultFrequency: vres.DefaultFrequency,
		Category:         vres.Category,
		CreatedAt:        vres.CreatedAt,
		UpdatedAt:        vres.UpdatedAt,
		Severity:         vres.Severity,
		Tenancy:          vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPolicyaggregateviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	return res
}

// newPolicyTemplateExtended converts projected type PolicyTemplate to service
// type PolicyTemplate.
func newPolicyTemplateExtended(vres *policyaggregateviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		ProjectID:        vres.ProjectID,
		RsPtVer:          vres.RsPtVer,
		ShortDescription: vres.ShortDescription,
		LongDescription:  vres.LongDescription,
		DocLink:          vres.DocLink,
		DefaultFrequency: vres.DefaultFrequency,
		Category:         vres.Category,
		CreatedAt:        vres.CreatedAt,
		UpdatedAt:        vres.UpdatedAt,
		Severity:         vres.Severity,
		Tenancy:          vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPolicyaggregateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPolicyaggregateviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.Permissions != nil {
		res.Permissions = make(map[string]*Permission, len(vres.Permissions))
		for key, val := range vres.Permissions {
			tk := key
			res.Permissions[tk] = transformPolicyaggregateviewsPermissionViewToPermission(val)
		}
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if vres.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(vres.Parameters))
		for key, val := range vres.Parameters {
			tk := key
			res.Parameters[tk] = transformPolicyaggregateviewsParameterViewToParameter(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]*Credentials, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			res.Credentials[tk] = transformPolicyaggregateviewsCredentialsViewToCredentials(val)
		}
	}
	return res
}

// newPolicyTemplateSource converts projected type PolicyTemplate to service
// type PolicyTemplate.
func newPolicyTemplateSource(vres *policyaggregateviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		Filename: vres.Filename,
		Source:   vres.Source,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	return res
}

// newPolicyTemplateLink converts projected type PolicyTemplate to service type
// PolicyTemplate.
func newPolicyTemplateLink(vres *policyaggregateviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		UpdatedAt: vres.UpdatedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPolicyaggregateviewsUserViewToUser(vres.UpdatedBy)
	}
	return res
}

// newPolicyTemplateView projects result type PolicyTemplate to projected type
// PolicyTemplateView using the "default" view.
func newPolicyTemplateView(res *PolicyTemplate) *policyaggregateviews.PolicyTemplateView {
	vres := &policyaggregateviews.PolicyTemplateView{
		ID:               &res.ID,
		Name:             &res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             &res.Href,
		Fingerprint:      &res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPolicyaggregateviewsUserView(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	return vres
}

// newPolicyTemplateViewExtended projects result type PolicyTemplate to
// projected type PolicyTemplateView using the "extended" view.
func newPolicyTemplateViewExtended(res *PolicyTemplate) *policyaggregateviews.PolicyTemplateView {
	vres := &policyaggregateviews.PolicyTemplateView{
		ID:               &res.ID,
		Name:             &res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		LongDescription:  res.LongDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             &res.Href,
		Fingerprint:      &res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPolicyaggregateviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPolicyaggregateviewsUserView(res.UpdatedBy)
	}
	if res.Permissions != nil {
		vres.Permissions = make(map[string]*policyaggregateviews.PermissionView, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			vres.Permissions[tk] = transformPermissionToPolicyaggregateviewsPermissionView(val)
		}
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		vres.Parameters = make(map[string]*policyaggregateviews.ParameterView, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			vres.Parameters[tk] = transformParameterToPolicyaggregateviewsParameterView(val)
		}
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]*policyaggregateviews.CredentialsView, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			vres.Credentials[tk] = transformCredentialsToPolicyaggregateviewsCredentialsView(val)
		}
	}
	return vres
}

// newPolicyTemplateViewSource projects result type PolicyTemplate to projected
// type PolicyTemplateView using the "source" view.
func newPolicyTemplateViewSource(res *PolicyTemplate) *policyaggregateviews.PolicyTemplateView {
	vres := &policyaggregateviews.PolicyTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: &res.Fingerprint,
		Kind:        &res.Kind,
	}
	return vres
}

// newPolicyTemplateViewLink projects result type PolicyTemplate to projected
// type PolicyTemplateView using the "link" view.
func newPolicyTemplateViewLink(res *PolicyTemplate) *policyaggregateviews.PolicyTemplateView {
	vres := &policyaggregateviews.PolicyTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Fingerprint: &res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		Kind:        &res.Kind,
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPolicyaggregateviewsUserView(res.UpdatedBy)
	}
	return vres
}

// newPolicyAggregateList converts projected type PolicyAggregateList to
// service type PolicyAggregateList.
func newPolicyAggregateList(vres *policyaggregateviews.PolicyAggregateListView) *PolicyAggregateList {
	res := &PolicyAggregateList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateCollectionIndex(vres.Items)
	}
	return res
}

// newPolicyAggregateListLink converts projected type PolicyAggregateList to
// service type PolicyAggregateList.
func newPolicyAggregateListLink(vres *policyaggregateviews.PolicyAggregateListView) *PolicyAggregateList {
	res := &PolicyAggregateList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newPolicyAggregateCollectionLink(vres.Items)
	}
	return res
}

// newPolicyAggregateListView projects result type PolicyAggregateList to
// projected type PolicyAggregateListView using the "default" view.
func newPolicyAggregateListView(res *PolicyAggregateList) *policyaggregateviews.PolicyAggregateListView {
	vres := &policyaggregateviews.PolicyAggregateListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newPolicyAggregateCollectionViewIndex(res.Items)
	}
	return vres
}

// newPolicyAggregateListViewLink projects result type PolicyAggregateList to
// projected type PolicyAggregateListView using the "link" view.
func newPolicyAggregateListViewLink(res *PolicyAggregateList) *policyaggregateviews.PolicyAggregateListView {
	vres := &policyaggregateviews.PolicyAggregateListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newPolicyAggregateCollectionViewLink(res.Items)
	}
	return vres
}

// newPolicyAggregateCollection converts projected type
// PolicyAggregateCollection to service type PolicyAggregateCollection.
func newPolicyAggregateCollection(vres policyaggregateviews.PolicyAggregateCollectionView) PolicyAggregateCollection {
	res := make(PolicyAggregateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPolicyAggregate(n)
	}
	return res
}

// newPolicyAggregateCollectionIndex converts projected type
// PolicyAggregateCollection to service type PolicyAggregateCollection.
func newPolicyAggregateCollectionIndex(vres policyaggregateviews.PolicyAggregateCollectionView) PolicyAggregateCollection {
	res := make(PolicyAggregateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPolicyAggregateIndex(n)
	}
	return res
}

// newPolicyAggregateCollectionSource converts projected type
// PolicyAggregateCollection to service type PolicyAggregateCollection.
func newPolicyAggregateCollectionSource(vres policyaggregateviews.PolicyAggregateCollectionView) PolicyAggregateCollection {
	res := make(PolicyAggregateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPolicyAggregateSource(n)
	}
	return res
}

// newPolicyAggregateCollectionLink converts projected type
// PolicyAggregateCollection to service type PolicyAggregateCollection.
func newPolicyAggregateCollectionLink(vres policyaggregateviews.PolicyAggregateCollectionView) PolicyAggregateCollection {
	res := make(PolicyAggregateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPolicyAggregateLink(n)
	}
	return res
}

// newPolicyAggregateCollectionView projects result type
// PolicyAggregateCollection to projected type PolicyAggregateCollectionView
// using the "default" view.
func newPolicyAggregateCollectionView(res PolicyAggregateCollection) policyaggregateviews.PolicyAggregateCollectionView {
	vres := make(policyaggregateviews.PolicyAggregateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPolicyAggregateView(n)
	}
	return vres
}

// newPolicyAggregateCollectionViewIndex projects result type
// PolicyAggregateCollection to projected type PolicyAggregateCollectionView
// using the "index" view.
func newPolicyAggregateCollectionViewIndex(res PolicyAggregateCollection) policyaggregateviews.PolicyAggregateCollectionView {
	vres := make(policyaggregateviews.PolicyAggregateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPolicyAggregateViewIndex(n)
	}
	return vres
}

// newPolicyAggregateCollectionViewSource projects result type
// PolicyAggregateCollection to projected type PolicyAggregateCollectionView
// using the "source" view.
func newPolicyAggregateCollectionViewSource(res PolicyAggregateCollection) policyaggregateviews.PolicyAggregateCollectionView {
	vres := make(policyaggregateviews.PolicyAggregateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPolicyAggregateViewSource(n)
	}
	return vres
}

// newPolicyAggregateCollectionViewLink projects result type
// PolicyAggregateCollection to projected type PolicyAggregateCollectionView
// using the "link" view.
func newPolicyAggregateCollectionViewLink(res PolicyAggregateCollection) policyaggregateviews.PolicyAggregateCollectionView {
	vres := make(policyaggregateviews.PolicyAggregateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPolicyAggregateViewLink(n)
	}
	return vres
}

// transformPolicyaggregateviewsOrgViewToOrg builds a value of type *Org from a
// value of type *policyaggregateviews.OrgView.
func transformPolicyaggregateviewsOrgViewToOrg(v *policyaggregateviews.OrgView) *Org {
	if v == nil {
		return nil
	}
	res := &Org{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// transformPolicyaggregateviewsUserViewToUser builds a value of type *User
// from a value of type *policyaggregateviews.UserView.
func transformPolicyaggregateviewsUserViewToUser(v *policyaggregateviews.UserView) *User {
	if v == nil {
		return nil
	}
	res := &User{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// transformPolicyaggregateviewsConfigurationOptionViewToConfigurationOption
// builds a value of type *ConfigurationOption from a value of type
// *policyaggregateviews.ConfigurationOptionView.
func transformPolicyaggregateviewsConfigurationOptionViewToConfigurationOption(v *policyaggregateviews.ConfigurationOptionView) *ConfigurationOption {
	if v == nil {
		return nil
	}
	res := &ConfigurationOption{
		Name:  *v.Name,
		Label: *v.Label,
		Type:  *v.Type,
		Value: v.Value,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}

	return res
}

// transformOrgToPolicyaggregateviewsOrgView builds a value of type
// *policyaggregateviews.OrgView from a value of type *Org.
func transformOrgToPolicyaggregateviewsOrgView(v *Org) *policyaggregateviews.OrgView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.OrgView{
		ID:   &v.ID,
		Name: &v.Name,
	}

	return res
}

// transformUserToPolicyaggregateviewsUserView builds a value of type
// *policyaggregateviews.UserView from a value of type *User.
func transformUserToPolicyaggregateviewsUserView(v *User) *policyaggregateviews.UserView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.UserView{
		ID:    &v.ID,
		Email: &v.Email,
		Name:  &v.Name,
	}

	return res
}

// transformConfigurationOptionToPolicyaggregateviewsConfigurationOptionView
// builds a value of type *policyaggregateviews.ConfigurationOptionView from a
// value of type *ConfigurationOption.
func transformConfigurationOptionToPolicyaggregateviewsConfigurationOptionView(v *ConfigurationOption) *policyaggregateviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.ConfigurationOptionView{
		Name:   &v.Name,
		Label:  &v.Label,
		Type:   &v.Type,
		Value:  v.Value,
		NoEcho: &v.NoEcho,
	}

	return res
}

// transformPolicyaggregateviewsPermissionViewToPermission builds a value of
// type *Permission from a value of type *policyaggregateviews.PermissionView.
func transformPolicyaggregateviewsPermissionViewToPermission(v *policyaggregateviews.PermissionView) *Permission {
	if v == nil {
		return nil
	}
	res := &Permission{
		Name:  *v.Name,
		Label: v.Label,
	}
	if v.Resources != nil {
		res.Resources = make([]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = val
		}
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}

	return res
}

// transformPolicyaggregateviewsParameterViewToParameter builds a value of type
// *Parameter from a value of type *policyaggregateviews.ParameterView.
func transformPolicyaggregateviewsParameterViewToParameter(v *policyaggregateviews.ParameterView) *Parameter {
	if v == nil {
		return nil
	}
	res := &Parameter{
		Name:                  *v.Name,
		Type:                  *v.Type,
		Label:                 *v.Label,
		Index:                 *v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = transformPolicyaggregateviewsRegexpViewToRegexp(v.AllowedPattern)
	}

	return res
}

// transformPolicyaggregateviewsRegexpViewToRegexp builds a value of type
// *Regexp from a value of type *policyaggregateviews.RegexpView.
func transformPolicyaggregateviewsRegexpViewToRegexp(v *policyaggregateviews.RegexpView) *Regexp {
	if v == nil {
		return nil
	}
	res := &Regexp{
		Pattern: *v.Pattern,
		Options: v.Options,
	}

	return res
}

// transformPolicyaggregateviewsCredentialsViewToCredentials builds a value of
// type *Credentials from a value of type *policyaggregateviews.CredentialsView.
func transformPolicyaggregateviewsCredentialsViewToCredentials(v *policyaggregateviews.CredentialsView) *Credentials {
	if v == nil {
		return nil
	}
	res := &Credentials{
		Name:        *v.Name,
		Label:       *v.Label,
		Description: v.Description,
	}
	if v.Schemes != nil {
		res.Schemes = make([]string, len(v.Schemes))
		for i, val := range v.Schemes {
			res.Schemes[i] = val
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*CredentialsTag, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = transformPolicyaggregateviewsCredentialsTagViewToCredentialsTag(val)
		}
	}

	return res
}

// transformPolicyaggregateviewsCredentialsTagViewToCredentialsTag builds a
// value of type *CredentialsTag from a value of type
// *policyaggregateviews.CredentialsTagView.
func transformPolicyaggregateviewsCredentialsTagViewToCredentialsTag(v *policyaggregateviews.CredentialsTagView) *CredentialsTag {
	if v == nil {
		return nil
	}
	res := &CredentialsTag{
		Key:   *v.Key,
		Value: *v.Value,
	}

	return res
}

// transformPermissionToPolicyaggregateviewsPermissionView builds a value of
// type *policyaggregateviews.PermissionView from a value of type *Permission.
func transformPermissionToPolicyaggregateviewsPermissionView(v *Permission) *policyaggregateviews.PermissionView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.PermissionView{
		Name:  &v.Name,
		Label: v.Label,
	}
	if v.Resources != nil {
		res.Resources = make([]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = val
		}
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}

	return res
}

// transformParameterToPolicyaggregateviewsParameterView builds a value of type
// *policyaggregateviews.ParameterView from a value of type *Parameter.
func transformParameterToPolicyaggregateviewsParameterView(v *Parameter) *policyaggregateviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.ParameterView{
		Name:                  &v.Name,
		Type:                  &v.Type,
		Label:                 &v.Label,
		Index:                 &v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                &v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = transformRegexpToPolicyaggregateviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// transformRegexpToPolicyaggregateviewsRegexpView builds a value of type
// *policyaggregateviews.RegexpView from a value of type *Regexp.
func transformRegexpToPolicyaggregateviewsRegexpView(v *Regexp) *policyaggregateviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.RegexpView{
		Pattern: &v.Pattern,
		Options: v.Options,
	}

	return res
}

// transformCredentialsToPolicyaggregateviewsCredentialsView builds a value of
// type *policyaggregateviews.CredentialsView from a value of type *Credentials.
func transformCredentialsToPolicyaggregateviewsCredentialsView(v *Credentials) *policyaggregateviews.CredentialsView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.CredentialsView{
		Name:        &v.Name,
		Label:       &v.Label,
		Description: v.Description,
	}
	if v.Schemes != nil {
		res.Schemes = make([]string, len(v.Schemes))
		for i, val := range v.Schemes {
			res.Schemes[i] = val
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*policyaggregateviews.CredentialsTagView, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = transformCredentialsTagToPolicyaggregateviewsCredentialsTagView(val)
		}
	}

	return res
}

// transformCredentialsTagToPolicyaggregateviewsCredentialsTagView builds a
// value of type *policyaggregateviews.CredentialsTagView from a value of type
// *CredentialsTag.
func transformCredentialsTagToPolicyaggregateviewsCredentialsTagView(v *CredentialsTag) *policyaggregateviews.CredentialsTagView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.CredentialsTagView{
		Key:   &v.Key,
		Value: &v.Value,
	}

	return res
}

// transformPolicyaggregateviewsProjectViewToProject builds a value of type
// *Project from a value of type *policyaggregateviews.ProjectView.
func transformPolicyaggregateviewsProjectViewToProject(v *policyaggregateviews.ProjectView) *Project {
	if v == nil {
		return nil
	}
	res := &Project{
		ID:      *v.ID,
		Name:    *v.Name,
		OrgID:   *v.OrgID,
		OrgName: *v.OrgName,
	}

	return res
}

// transformProjectToPolicyaggregateviewsProjectView builds a value of type
// *policyaggregateviews.ProjectView from a value of type *Project.
func transformProjectToPolicyaggregateviewsProjectView(v *Project) *policyaggregateviews.ProjectView {
	if v == nil {
		return nil
	}
	res := &policyaggregateviews.ProjectView{
		ID:      &v.ID,
		Name:    &v.Name,
		OrgID:   &v.OrgID,
		OrgName: &v.OrgName,
	}

	return res
}
