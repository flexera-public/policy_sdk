// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PolicyAggregate views
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// PolicyAggregate is the viewed result type that is projected based on a view.
type PolicyAggregate struct {
	// Type to project
	Projected *PolicyAggregateView
	// View to render
	View string
}

// PolicyAggregateNonCatalog is the viewed result type that is projected based
// on a view.
type PolicyAggregateNonCatalog struct {
	// Type to project
	Projected *PolicyAggregateNonCatalogView
	// View to render
	View string
}

// PolicyAggregateList is the viewed result type that is projected based on a
// view.
type PolicyAggregateList struct {
	// Type to project
	Projected *PolicyAggregateListView
	// View to render
	View string
}

// PolicyAggregateView is a type that runs validations on a projected type.
type PolicyAggregateView struct {
	// id identifies an policy aggregate by ID.
	ID *string
	// name provides a name for this specific application of the policy.
	Name *string
	// Org represents a RightScale organization.
	Org *OrgView
	// href is the href of the policy aggregate.
	Href *string
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateView
	// project_ids is a the list of projects in this aggregate. If empty, applies
	// to all projects, minus excluded projects
	ProjectIds []uint
	// excluded_project_ids is a list of projects to exclude form this aggregate.
	ExcludedProjectIds []uint
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// created_by is the RightScale user that applied the policy.
	CreatedBy *UserView
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string
	// category is the type categorization of the policy aggregate.
	Category *string
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionView
	// credentials is the map of name to credential used to launch the policy.
	Credentials map[string]string
	// status is used to identify the current status of the policy aggregate.
	Status *string
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint
	// The number of applied policies running across all projects.
	Count *uint
	// The number of applied policies in an active state.
	ActiveCount *uint
	// The number of applied policies in an error state.
	ErrorCount *uint
	// errors captures the errors occurred while applying aggregate to individual
	// projects.
	Errors map[string]string
	// An array of the individual applied policies and their statuses.
	Items PolicyAggregateItemCollectionView
	// kind is "gov#policy_aggregate".
	Kind *string
}

// OrgView is a type that runs validations on a projected type.
type OrgView struct {
	// id is the Org ID
	ID *uint
	// name is the organization name
	Name *string
}

// PublishedTemplateView is a type that runs validations on a projected type.
type PublishedTemplateView struct {
	// id identifies a published template by ID.
	ID *string
	// name is the unique name of the published template in the organization.
	Name *string
	// org_id is the ID of the organization that the published template belongs to.
	OrgID *uint
	// project_id is the ID of the project that the published template is published
	// from.
	ProjectID *uint
	// policy_template_id is the ID of the policy template from which the published
	// template originated.
	PolicyTemplateID *string
	// policy_template_url is the full URL to the policy template from which the
	// published template originated.
	PolicyTemplateURL *string
	// policy_template_fingerprint is fingerprint of the policy template. It is
	// used to determine if the policy template that this was published from is
	// outdated.
	PolicyTemplateFingerprint *string
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the published template.
	ShortDescription *string
	// long_description is the long description of the published template. The
	// content can be markdown.
	LongDescription *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the self-referential href of the published template.
	Href *string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is published template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint *string
	// category is the type categorization of the published template.
	Category *string
	// created_by is the RightScale user that created the published template.
	CreatedBy *UserView
	// created_at is the published template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *UserView
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionView
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterView
	// severity defines the severity level of incidents raised from this published
	// template.
	Severity *string
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool
	// hidden is a flag to indicate whether the published template is hidden.
	Hidden *bool
	// hidden_by is the RightScale user that marked the published template as
	// hidden.
	HiddenBy *UserView
	// hidden_at is the hidden at timestamp in RFC3339 format.
	HiddenAt *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsView
	// kind is "gov#published_template".
	Kind *string
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID of user
	ID *uint
	// email of user
	Email *string
	// name of user, usually of the form 'First Last'
	Name *string
}

// PermissionView is a type that runs validations on a projected type.
type PermissionView struct {
	// Name of a permission
	Name *string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// ParameterView is a type that runs validations on a projected type.
type ParameterView struct {
	// Name of the parameter
	Name *string `json:"name"`
	// Type of the parameter
	Type *string `json:"type"`
	// Label to show in the UI
	Label *string `json:"label"`
	// The index of this parameter in the list
	Index *uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho *bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpView `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpView is a type that runs validations on a projected type.
type RegexpView struct {
	// Pattern is the regular expression pattern.
	Pattern *string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// CredentialsView is a type that runs validations on a projected type.
type CredentialsView struct {
	// Name in policy template source code
	Name *string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label *string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTagView `json:"tags"`
}

// CredentialsTagView is a type that runs validations on a projected type.
type CredentialsTagView struct {
	// Key is the tag key.
	Key *string `json:"key"`
	// Value is the tag value.
	Value *string `json:"value"`
}

// ConfigurationOptionView is a type that runs validations on a projected type.
type ConfigurationOptionView struct {
	// name of option
	Name *string
	// label of option
	Label *string
	// type of option
	Type *string
	// value of option
	Value interface{}
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho *bool
}

// PolicyAggregateItemCollectionView is a type that runs validations on a
// projected type.
type PolicyAggregateItemCollectionView []*PolicyAggregateItemView

// PolicyAggregateItemView is a type that runs validations on a projected type.
type PolicyAggregateItemView struct {
	// id identifies an applied policy by ID.
	ID *string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectView
	// url of the applied policy.
	URL *string
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string
	// status is used to identify the current status of the applied policy.
	Status *string
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string
	// kind is "gov#policy_aggregate_item".
	Kind *string
}

// ProjectView is a type that runs validations on a projected type.
type ProjectView struct {
	// id is the Project ID
	ID *uint
	// name is the Project Name
	Name *string
	// org_id is the RightScale Organization ID
	OrgID *uint
	// org_name is the RightScale Organization Name
	OrgName *string
}

// PolicyAggregateNonCatalogView is a type that runs validations on a projected
// type.
type PolicyAggregateNonCatalogView struct {
	// href is the href of the policy aggregate.
	Href *string
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint
	// The number of applied policies running across all projects.
	Count *uint
	// The number of applied policies in an active state.
	ActiveCount *uint
	// The number of applied policies in an error state.
	ErrorCount *uint
	// An array of the individual applied policies and their statuses.
	Items PolicyAggregateNonCatalogItemCollectionView
	// kind is "gov#policy_aggregate_non_catalog".
	Kind *string
}

// PolicyAggregateNonCatalogItemCollectionView is a type that runs validations
// on a projected type.
type PolicyAggregateNonCatalogItemCollectionView []*PolicyAggregateNonCatalogItemView

// PolicyAggregateNonCatalogItemView is a type that runs validations on a
// projected type.
type PolicyAggregateNonCatalogItemView struct {
	// id identifies an applied policy by ID.
	ID *string
	// name provides a name for this specific application of the policy.
	Name *string
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectView
	// url of the applied policy.
	URL *string
	// policy_template links to key attributes of the template from which the item
	// originated.
	PolicyTemplate *PolicyTemplateView
	// status is used to identify the current status of the applied policy.
	Status *string
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string
	// created_by is the RightScale user that applied the policy.
	CreatedBy *UserView
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string
	// category is the type categorization of the policy aggregate.
	Category *string
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool
	// kind is "gov#policy_aggregate_non_catalog_item".
	Kind *string
}

// PolicyTemplateView is a type that runs validations on a projected type.
type PolicyTemplateView struct {
	// id identifies a policy template by ID.
	ID *string
	// name is the unique name of the policy template in the project.
	Name *string
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the policy template.
	ShortDescription *string
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the href of the policy template.
	Href *string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is the policy template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint *string
	// category is the type categorization of the policy template.
	Category *string
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserView
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserView
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionView
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterView
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsView
	// kind is "gov#policy_template".
	Kind *string
}

// PolicyAggregateListView is a type that runs validations on a projected type.
type PolicyAggregateListView struct {
	// count is the number of policy aggregates in the list.
	Count *uint
	// etag is an HTTP ETag for the policy aggregate list.
	Etag *string
	// items is the array of policy aggregates.
	Items PolicyAggregateCollectionView
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#policy_aggregate_list".
	Kind *string
}

// PolicyAggregateCollectionView is a type that runs validations on a projected
// type.
type PolicyAggregateCollectionView []*PolicyAggregateView

var (
	// PolicyAggregateMap is a map of attribute names in result type
	// PolicyAggregate indexed by view name.
	PolicyAggregateMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"org",
			"href",
			"incident_aggregate_href",
			"published_template",
			"project_ids",
			"excluded_project_ids",
			"description",
			"doc_link",
			"info",
			"created_by",
			"created_at",
			"updated_at",
			"severity",
			"category",
			"frequency",
			"dry_run",
			"skip_approvals",
			"options",
			"credentials",
			"status",
			"running_project_ids",
			"count",
			"active_count",
			"error_count",
			"errors",
			"items",
			"kind",
		},
		"index": []string{
			"id",
			"name",
			"org",
			"href",
			"incident_aggregate_href",
			"published_template",
			"description",
			"doc_link",
			"info",
			"created_by",
			"created_at",
			"updated_at",
			"severity",
			"category",
			"frequency",
			"dry_run",
			"skip_approvals",
			"options",
			"credentials",
			"status",
			"running_project_ids",
			"count",
			"active_count",
			"error_count",
			"kind",
		},
		"source": []string{
			"id",
			"name",
			"org",
			"href",
			"published_template",
			"kind",
		},
		"link": []string{
			"id",
			"name",
			"href",
			"incident_aggregate_href",
			"published_template",
			"created_by",
			"created_at",
			"kind",
		},
	}
	// PolicyAggregateNonCatalogMap is a map of attribute names in result type
	// PolicyAggregateNonCatalog indexed by view name.
	PolicyAggregateNonCatalogMap = map[string][]string{
		"default": []string{
			"href",
			"incident_aggregate_href",
			"running_project_ids",
			"count",
			"active_count",
			"error_count",
			"items",
			"kind",
		},
		"index": []string{
			"href",
			"incident_aggregate_href",
			"running_project_ids",
			"count",
			"active_count",
			"error_count",
			"kind",
		},
		"link": []string{
			"href",
			"incident_aggregate_href",
			"kind",
		},
	}
	// PolicyAggregateListMap is a map of attribute names in result type
	// PolicyAggregateList indexed by view name.
	PolicyAggregateListMap = map[string][]string{
		"default": []string{
			"count",
			"items",
			"etag",
			"not_modified",
			"kind",
		},
		"link": []string{
			"count",
			"items",
			"etag",
			"not_modified",
			"kind",
		},
	}
	// PublishedTemplateMap is a map of attribute names in result type
	// PublishedTemplate indexed by view name.
	PublishedTemplateMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"org_id",
			"project_id",
			"policy_template_id",
			"policy_template_url",
			"policy_template_fingerprint",
			"rs_pt_ver",
			"short_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"hidden_by",
			"hidden_at",
			"required_roles",
			"severity",
			"built_in",
			"hidden",
			"tenancy",
			"kind",
		},
		"extended": []string{
			"id",
			"name",
			"org_id",
			"project_id",
			"policy_template_id",
			"policy_template_url",
			"policy_template_fingerprint",
			"rs_pt_ver",
			"short_description",
			"long_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"hidden_by",
			"hidden_at",
			"permissions",
			"required_roles",
			"parameters",
			"severity",
			"built_in",
			"hidden",
			"tenancy",
			"credentials",
			"kind",
		},
		"source": []string{
			"id",
			"name",
			"href",
			"filename",
			"source",
			"fingerprint",
			"kind",
		},
		"link": []string{
			"id",
			"name",
			"href",
			"fingerprint",
			"updated_at",
			"updated_by",
			"built_in",
			"kind",
		},
	}
	// PolicyAggregateItemCollectionMap is a map of attribute names in result type
	// PolicyAggregateItemCollection indexed by view name.
	PolicyAggregateItemCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"project",
			"url",
			"created_at",
			"updated_at",
			"status",
			"error",
			"errored_at",
			"kind",
		},
		"link": []string{
			"id",
			"url",
			"created_at",
			"kind",
		},
	}
	// PolicyAggregateItemMap is a map of attribute names in result type
	// PolicyAggregateItem indexed by view name.
	PolicyAggregateItemMap = map[string][]string{
		"default": []string{
			"id",
			"project",
			"url",
			"created_at",
			"updated_at",
			"status",
			"error",
			"errored_at",
			"kind",
		},
		"link": []string{
			"id",
			"url",
			"created_at",
			"kind",
		},
	}
	// PolicyAggregateNonCatalogItemCollectionMap is a map of attribute names in
	// result type PolicyAggregateNonCatalogItemCollection indexed by view name.
	PolicyAggregateNonCatalogItemCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"project",
			"url",
			"policy_template",
			"created_by",
			"created_at",
			"updated_at",
			"status",
			"error",
			"errored_at",
			"name",
			"description",
			"severity",
			"category",
			"frequency",
			"dry_run",
			"kind",
		},
	}
	// PolicyAggregateNonCatalogItemMap is a map of attribute names in result type
	// PolicyAggregateNonCatalogItem indexed by view name.
	PolicyAggregateNonCatalogItemMap = map[string][]string{
		"default": []string{
			"id",
			"project",
			"url",
			"policy_template",
			"created_by",
			"created_at",
			"updated_at",
			"status",
			"error",
			"errored_at",
			"name",
			"description",
			"severity",
			"category",
			"frequency",
			"dry_run",
			"kind",
		},
	}
	// PolicyTemplateMap is a map of attribute names in result type PolicyTemplate
	// indexed by view name.
	PolicyTemplateMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"project_id",
			"rs_pt_ver",
			"short_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"required_roles",
			"severity",
			"tenancy",
			"kind",
		},
		"extended": []string{
			"id",
			"name",
			"project_id",
			"rs_pt_ver",
			"short_description",
			"long_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"permissions",
			"required_roles",
			"parameters",
			"severity",
			"tenancy",
			"credentials",
			"kind",
		},
		"source": []string{
			"id",
			"name",
			"href",
			"filename",
			"source",
			"fingerprint",
			"kind",
		},
		"link": []string{
			"id",
			"name",
			"href",
			"fingerprint",
			"updated_at",
			"updated_by",
			"kind",
		},
	}
	// PolicyAggregateCollectionMap is a map of attribute names in result type
	// PolicyAggregateCollection indexed by view name.
	PolicyAggregateCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"org",
			"href",
			"incident_aggregate_href",
			"published_template",
			"project_ids",
			"excluded_project_ids",
			"description",
			"doc_link",
			"info",
			"created_by",
			"created_at",
			"updated_at",
			"severity",
			"category",
			"frequency",
			"dry_run",
			"skip_approvals",
			"options",
			"credentials",
			"status",
			"running_project_ids",
			"count",
			"active_count",
			"error_count",
			"errors",
			"items",
			"kind",
		},
		"index": []string{
			"id",
			"name",
			"org",
			"href",
			"incident_aggregate_href",
			"published_template",
			"description",
			"doc_link",
			"info",
			"created_by",
			"created_at",
			"updated_at",
			"severity",
			"category",
			"frequency",
			"dry_run",
			"skip_approvals",
			"options",
			"credentials",
			"status",
			"running_project_ids",
			"count",
			"active_count",
			"error_count",
			"kind",
		},
		"source": []string{
			"id",
			"name",
			"org",
			"href",
			"published_template",
			"kind",
		},
		"link": []string{
			"id",
			"name",
			"href",
			"incident_aggregate_href",
			"published_template",
			"created_by",
			"created_at",
			"kind",
		},
	}
)

// ValidatePolicyAggregate runs the validations defined on the viewed result
// type PolicyAggregate.
func ValidatePolicyAggregate(result *PolicyAggregate) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePolicyAggregateView(result.Projected)
	case "index":
		err = ValidatePolicyAggregateViewIndex(result.Projected)
	case "source":
		err = ValidatePolicyAggregateViewSource(result.Projected)
	case "link":
		err = ValidatePolicyAggregateViewLink(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "index", "source", "link"})
	}
	return
}

// ValidatePolicyAggregateNonCatalog runs the validations defined on the viewed
// result type PolicyAggregateNonCatalog.
func ValidatePolicyAggregateNonCatalog(result *PolicyAggregateNonCatalog) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePolicyAggregateNonCatalogView(result.Projected)
	case "index":
		err = ValidatePolicyAggregateNonCatalogViewIndex(result.Projected)
	case "link":
		err = ValidatePolicyAggregateNonCatalogViewLink(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "index", "link"})
	}
	return
}

// ValidatePolicyAggregateList runs the validations defined on the viewed
// result type PolicyAggregateList.
func ValidatePolicyAggregateList(result *PolicyAggregateList) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePolicyAggregateListView(result.Projected)
	case "link":
		err = ValidatePolicyAggregateListViewLink(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "link"})
	}
	return
}

// ValidatePolicyAggregateView runs the validations defined on
// PolicyAggregateView using the "default" view.
func ValidatePolicyAggregateView(result *PolicyAggregateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Org != nil {
		if err2 := ValidateOrgView(result.Org); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/policy_aggregates/[0-9a-f]+$"))
	}
	if result.IncidentAggregateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.incident_aggregate_href", *result.IncidentAggregateHref, "^/api/governance/orgs/[0-9]+/incident_aggregates/[0-9a-f]+$"))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Frequency != nil {
		if !(*result.Frequency == "15 minutes" || *result.Frequency == "hourly" || *result.Frequency == "daily" || *result.Frequency == "weekly" || *result.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.frequency", *result.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	for _, e := range result.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Status != nil {
		if !(*result.Status == "active" || *result.Status == "stopping") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"active", "stopping"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate"}))
		}
	}
	if result.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateViewLink(result.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Items != nil {
		if err2 := ValidatePolicyAggregateItemCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateViewIndex runs the validations defined on
// PolicyAggregateView using the "index" view.
func ValidatePolicyAggregateViewIndex(result *PolicyAggregateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Org != nil {
		if err2 := ValidateOrgView(result.Org); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/policy_aggregates/[0-9a-f]+$"))
	}
	if result.IncidentAggregateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.incident_aggregate_href", *result.IncidentAggregateHref, "^/api/governance/orgs/[0-9]+/incident_aggregates/[0-9a-f]+$"))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Frequency != nil {
		if !(*result.Frequency == "15 minutes" || *result.Frequency == "hourly" || *result.Frequency == "daily" || *result.Frequency == "weekly" || *result.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.frequency", *result.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	for _, e := range result.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Status != nil {
		if !(*result.Status == "active" || *result.Status == "stopping") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"active", "stopping"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate"}))
		}
	}
	if result.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateViewLink(result.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateViewSource runs the validations defined on
// PolicyAggregateView using the "source" view.
func ValidatePolicyAggregateViewSource(result *PolicyAggregateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Org != nil {
		if err2 := ValidateOrgView(result.Org); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/policy_aggregates/[0-9a-f]+$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate"}))
		}
	}
	if result.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateViewSource(result.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateViewLink runs the validations defined on
// PolicyAggregateView using the "link" view.
func ValidatePolicyAggregateViewLink(result *PolicyAggregateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/policy_aggregates/[0-9a-f]+$"))
	}
	if result.IncidentAggregateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.incident_aggregate_href", *result.IncidentAggregateHref, "^/api/governance/orgs/[0-9]+/incident_aggregates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate"}))
		}
	}
	if result.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateViewLink(result.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrgView runs the validations defined on OrgView.
func ValidateOrgView(result *OrgView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidatePublishedTemplateView runs the validations defined on
// PublishedTemplateView using the "default" view.
func ValidatePublishedTemplateView(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.PolicyTemplateURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.policy_template_url", *result.PolicyTemplateURL, goa.FormatURI))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.HiddenBy != nil {
		if err2 := ValidateUserView(result.HiddenBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.HiddenAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.hidden_at", *result.HiddenAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidatePublishedTemplateViewExtended runs the validations defined on
// PublishedTemplateView using the "extended" view.
func ValidatePublishedTemplateViewExtended(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.PolicyTemplateURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.policy_template_url", *result.PolicyTemplateURL, goa.FormatURI))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.HiddenBy != nil {
		if err2 := ValidateUserView(result.HiddenBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.HiddenAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.hidden_at", *result.HiddenAt, goa.FormatDateTime))
	}
	for _, v := range result.Permissions {
		if v != nil {
			if err2 := ValidatePermissionView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range result.Parameters {
		if v != nil {
			if err2 := ValidateParameterView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range result.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidatePublishedTemplateViewSource runs the validations defined on
// PublishedTemplateView using the "source" view.
func ValidatePublishedTemplateViewSource(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidatePublishedTemplateViewLink runs the validations defined on
// PublishedTemplateView using the "link" view.
func ValidatePublishedTemplateViewLink(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidateUserView runs the validations defined on UserView.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.email", *result.Email, goa.FormatEmail))
	}
	return
}

// ValidatePermissionView runs the validations defined on PermissionView.
func ValidatePermissionView(result *PermissionView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "result"))
	}
	if result.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "result"))
	}
	return
}

// ValidateParameterView runs the validations defined on ParameterView.
func ValidateParameterView(result *ParameterView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	if result.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "string" || *result.Type == "list" || *result.Type == "number") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"string", "list", "number"}))
		}
	}
	if result.AllowedPattern != nil {
		if err2 := ValidateRegexpView(result.AllowedPattern); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRegexpView runs the validations defined on RegexpView.
func ValidateRegexpView(result *RegexpView) (err error) {
	if result.Pattern == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pattern", "result"))
	}
	return
}

// ValidateCredentialsView runs the validations defined on CredentialsView.
func ValidateCredentialsView(result *CredentialsView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Schemes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schemes", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	for _, e := range result.Tags {
		if e != nil {
			if err2 := ValidateCredentialsTagView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCredentialsTagView runs the validations defined on
// CredentialsTagView.
func ValidateCredentialsTagView(result *CredentialsTagView) (err error) {
	if result.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "result"))
	}
	if result.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "result"))
	}
	return
}

// ValidateConfigurationOptionView runs the validations defined on
// ConfigurationOptionView.
func ValidateConfigurationOptionView(result *ConfigurationOptionView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "string" || *result.Type == "number" || *result.Type == "list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"string", "number", "list"}))
		}
	}
	return
}

// ValidatePolicyAggregateItemCollectionView runs the validations defined on
// PolicyAggregateItemCollectionView using the "default" view.
func ValidatePolicyAggregateItemCollectionView(result PolicyAggregateItemCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePolicyAggregateItemView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateItemCollectionViewLink runs the validations defined
// on PolicyAggregateItemCollectionView using the "link" view.
func ValidatePolicyAggregateItemCollectionViewLink(result PolicyAggregateItemCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePolicyAggregateItemViewLink(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateItemView runs the validations defined on
// PolicyAggregateItemView using the "default" view.
func ValidatePolicyAggregateItemView(result *PolicyAggregateItemView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.URL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.url", *result.URL, "http.*/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Status != nil {
		if !(*result.Status == "active" || *result.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"active", "error"}))
		}
	}
	if result.ErroredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.errored_at", *result.ErroredAt, goa.FormatDateTime))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_item") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_item"}))
		}
	}
	return
}

// ValidatePolicyAggregateItemViewLink runs the validations defined on
// PolicyAggregateItemView using the "link" view.
func ValidatePolicyAggregateItemViewLink(result *PolicyAggregateItemView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.URL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.url", *result.URL, "http.*/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_item") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_item"}))
		}
	}
	return
}

// ValidateProjectView runs the validations defined on ProjectView.
func ValidateProjectView(result *ProjectView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.OrgID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_id", "result"))
	}
	if result.OrgName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_name", "result"))
	}
	return
}

// ValidatePolicyAggregateNonCatalogView runs the validations defined on
// PolicyAggregateNonCatalogView using the "default" view.
func ValidatePolicyAggregateNonCatalogView(result *PolicyAggregateNonCatalogView) (err error) {
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/policy_aggregates/non_catalog$"))
	}
	if result.IncidentAggregateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.incident_aggregate_href", *result.IncidentAggregateHref, "^/api/governance/orgs/[0-9]+/incident_aggregates/non_catalog$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_non_catalog") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_non_catalog"}))
		}
	}
	if result.Items != nil {
		if err2 := ValidatePolicyAggregateNonCatalogItemCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateNonCatalogViewIndex runs the validations defined on
// PolicyAggregateNonCatalogView using the "index" view.
func ValidatePolicyAggregateNonCatalogViewIndex(result *PolicyAggregateNonCatalogView) (err error) {
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/policy_aggregates/non_catalog$"))
	}
	if result.IncidentAggregateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.incident_aggregate_href", *result.IncidentAggregateHref, "^/api/governance/orgs/[0-9]+/incident_aggregates/non_catalog$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_non_catalog") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_non_catalog"}))
		}
	}
	return
}

// ValidatePolicyAggregateNonCatalogViewLink runs the validations defined on
// PolicyAggregateNonCatalogView using the "link" view.
func ValidatePolicyAggregateNonCatalogViewLink(result *PolicyAggregateNonCatalogView) (err error) {
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/policy_aggregates/non_catalog$"))
	}
	if result.IncidentAggregateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.incident_aggregate_href", *result.IncidentAggregateHref, "^/api/governance/orgs/[0-9]+/incident_aggregates/non_catalog$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_non_catalog") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_non_catalog"}))
		}
	}
	return
}

// ValidatePolicyAggregateNonCatalogItemCollectionView runs the validations
// defined on PolicyAggregateNonCatalogItemCollectionView using the "default"
// view.
func ValidatePolicyAggregateNonCatalogItemCollectionView(result PolicyAggregateNonCatalogItemCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePolicyAggregateNonCatalogItemView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateNonCatalogItemView runs the validations defined on
// PolicyAggregateNonCatalogItemView using the "default" view.
func ValidatePolicyAggregateNonCatalogItemView(result *PolicyAggregateNonCatalogItemView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.URL != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.url", *result.URL, "http.*/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Status != nil {
		if !(*result.Status == "active" || *result.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"active", "error"}))
		}
	}
	if result.ErroredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.errored_at", *result.ErroredAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Frequency != nil {
		if !(*result.Frequency == "15 minutes" || *result.Frequency == "hourly" || *result.Frequency == "daily" || *result.Frequency == "weekly" || *result.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.frequency", *result.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_non_catalog_item") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_non_catalog_item"}))
		}
	}
	if result.PolicyTemplate != nil {
		if err2 := ValidatePolicyTemplateViewLink(result.PolicyTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyTemplateView runs the validations defined on
// PolicyTemplateView using the "default" view.
func ValidatePolicyTemplateView(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidatePolicyTemplateViewExtended runs the validations defined on
// PolicyTemplateView using the "extended" view.
func ValidatePolicyTemplateViewExtended(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range result.Permissions {
		if v != nil {
			if err2 := ValidatePermissionView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range result.Parameters {
		if v != nil {
			if err2 := ValidateParameterView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range result.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidatePolicyTemplateViewSource runs the validations defined on
// PolicyTemplateView using the "source" view.
func ValidatePolicyTemplateViewSource(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidatePolicyTemplateViewLink runs the validations defined on
// PolicyTemplateView using the "link" view.
func ValidatePolicyTemplateViewLink(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidatePolicyAggregateListView runs the validations defined on
// PolicyAggregateListView using the "default" view.
func ValidatePolicyAggregateListView(result *PolicyAggregateListView) (err error) {
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_list"}))
		}
	}
	if result.Items != nil {
		if err2 := ValidatePolicyAggregateCollectionViewIndex(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateListViewLink runs the validations defined on
// PolicyAggregateListView using the "link" view.
func ValidatePolicyAggregateListViewLink(result *PolicyAggregateListView) (err error) {
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_aggregate_list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_aggregate_list"}))
		}
	}
	if result.Items != nil {
		if err2 := ValidatePolicyAggregateCollectionViewLink(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateCollectionView runs the validations defined on
// PolicyAggregateCollectionView using the "default" view.
func ValidatePolicyAggregateCollectionView(result PolicyAggregateCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePolicyAggregateView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateCollectionViewIndex runs the validations defined on
// PolicyAggregateCollectionView using the "index" view.
func ValidatePolicyAggregateCollectionViewIndex(result PolicyAggregateCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePolicyAggregateViewIndex(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateCollectionViewSource runs the validations defined on
// PolicyAggregateCollectionView using the "source" view.
func ValidatePolicyAggregateCollectionViewSource(result PolicyAggregateCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePolicyAggregateViewSource(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyAggregateCollectionViewLink runs the validations defined on
// PolicyAggregateCollectionView using the "link" view.
func ValidatePolicyAggregateCollectionViewLink(result PolicyAggregateCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePolicyAggregateViewLink(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
