// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Approval views
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ApprovalRequest is the viewed result type that is projected based on a view.
type ApprovalRequest struct {
	// Type to project
	Projected *ApprovalRequestView
	// View to render
	View string
}

// ApprovalRequestList is the viewed result type that is projected based on a
// view.
type ApprovalRequestList struct {
	// Type to project
	Projected *ApprovalRequestListView
	// View to render
	View string
}

// ApprovalRequestView is a type that runs validations on a projected type.
type ApprovalRequestView struct {
	// id identifies an approval request by ID.
	ID *string
	// project_id is the ID of the project where this approval request is created.
	ProjectID *uint
	// href is the href of the approval request
	Href *string
	// label is a short title for this approval request
	Label *string
	// description describes the details for this approval request.
	Description *string
	// subject is the subject of the approval.
	Subject *ApprovalSubject
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterView
	// status is the status of this approval request.
	Status *string
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionView
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserView
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string
	// denied_by is the RightScale user that denied this approval request.
	DeniedBy *UserView
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string
	// kind is "gov#approval_request".
	Kind *string
}

// ApprovalSubject is a type that runs validations on a projected type.
type ApprovalSubject struct {
	// kind is the kind of subject
	Kind *string
	// href is the href of the subject.
	Href *string
}

// ParameterView is a type that runs validations on a projected type.
type ParameterView struct {
	// Name of the parameter
	Name *string `json:"name"`
	// Type of the parameter
	Type *string `json:"type"`
	// Label to show in the UI
	Label *string `json:"label"`
	// The index of this parameter in the list
	Index *uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho *bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpView `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpView is a type that runs validations on a projected type.
type RegexpView struct {
	// Pattern is the regular expression pattern.
	Pattern *string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// ConfigurationOptionView is a type that runs validations on a projected type.
type ConfigurationOptionView struct {
	// name of option
	Name *string
	// label of option
	Label *string
	// type of option
	Type *string
	// value of option
	Value interface{}
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho *bool
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID of user
	ID *uint
	// email of user
	Email *string
	// name of user, usually of the form 'First Last'
	Name *string
}

// ApprovalRequestListView is a type that runs validations on a projected type.
type ApprovalRequestListView struct {
	// count is the number of approval requests in the list
	Count *uint
	// etag is a HTTP ETag for the list.
	Etag *string
	// items is the array of approval requests.
	Items ApprovalRequestCollectionView
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#approval_request_list".
	Kind *string
}

// ApprovalRequestCollectionView is a type that runs validations on a projected
// type.
type ApprovalRequestCollectionView []*ApprovalRequestView

var (
	// ApprovalRequestMap is a map of attribute names in result type
	// ApprovalRequest indexed by view name.
	ApprovalRequestMap = map[string][]string{
		"default": []string{
			"id",
			"project_id",
			"href",
			"label",
			"description",
			"subject",
			"created_at",
			"updated_at",
			"status",
			"kind",
		},
		"extended": []string{
			"id",
			"project_id",
			"href",
			"label",
			"description",
			"subject",
			"created_at",
			"updated_at",
			"status",
			"parameters",
			"options",
			"approved_by",
			"approved_at",
			"denial_comment",
			"denied_by",
			"denied_at",
			"kind",
		},
	}
	// ApprovalRequestListMap is a map of attribute names in result type
	// ApprovalRequestList indexed by view name.
	ApprovalRequestListMap = map[string][]string{
		"default": []string{
			"count",
			"items",
			"etag",
			"not_modified",
			"kind",
		},
		"extended": []string{
			"count",
			"items",
			"etag",
			"not_modified",
			"kind",
		},
	}
	// ApprovalRequestCollectionMap is a map of attribute names in result type
	// ApprovalRequestCollection indexed by view name.
	ApprovalRequestCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"project_id",
			"href",
			"label",
			"description",
			"subject",
			"created_at",
			"updated_at",
			"status",
			"kind",
		},
		"extended": []string{
			"id",
			"project_id",
			"href",
			"label",
			"description",
			"subject",
			"created_at",
			"updated_at",
			"status",
			"parameters",
			"options",
			"approved_by",
			"approved_at",
			"denial_comment",
			"denied_by",
			"denied_at",
			"kind",
		},
	}
)

// ValidateApprovalRequest runs the validations defined on the viewed result
// type ApprovalRequest.
func ValidateApprovalRequest(result *ApprovalRequest) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateApprovalRequestView(result.Projected)
	case "extended":
		err = ValidateApprovalRequestViewExtended(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended"})
	}
	return
}

// ValidateApprovalRequestList runs the validations defined on the viewed
// result type ApprovalRequestList.
func ValidateApprovalRequestList(result *ApprovalRequestList) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateApprovalRequestListView(result.Projected)
	case "extended":
		err = ValidateApprovalRequestListViewExtended(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended"})
	}
	return
}

// ValidateApprovalRequestView runs the validations defined on
// ApprovalRequestView using the "default" view.
func ValidateApprovalRequestView(result *ApprovalRequestView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "result"))
	}
	if result.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	}
	if result.Subject != nil {
		if err2 := ValidateApprovalSubject(result.Subject); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Status != nil {
		if !(*result.Status == "pending" || *result.Status == "approved" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#approval_request") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#approval_request"}))
		}
	}
	return
}

// ValidateApprovalRequestViewExtended runs the validations defined on
// ApprovalRequestView using the "extended" view.
func ValidateApprovalRequestViewExtended(result *ApprovalRequestView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "result"))
	}
	if result.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	}
	if result.Subject != nil {
		if err2 := ValidateApprovalSubject(result.Subject); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Status != nil {
		if !(*result.Status == "pending" || *result.Status == "approved" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	for _, v := range result.Parameters {
		if v != nil {
			if err2 := ValidateParameterView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range result.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.ApprovedBy != nil {
		if err2 := ValidateUserView(result.ApprovedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.ApprovedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.approved_at", *result.ApprovedAt, goa.FormatDateTime))
	}
	if result.DeniedBy != nil {
		if err2 := ValidateUserView(result.DeniedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.DeniedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.denied_at", *result.DeniedAt, goa.FormatDateTime))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#approval_request") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#approval_request"}))
		}
	}
	return
}

// ValidateApprovalSubject runs the validations defined on ApprovalSubject.
func ValidateApprovalSubject(result *ApprovalSubject) (err error) {
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	return
}

// ValidateParameterView runs the validations defined on ParameterView.
func ValidateParameterView(result *ParameterView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	if result.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "string" || *result.Type == "list" || *result.Type == "number") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"string", "list", "number"}))
		}
	}
	if result.AllowedPattern != nil {
		if err2 := ValidateRegexpView(result.AllowedPattern); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRegexpView runs the validations defined on RegexpView.
func ValidateRegexpView(result *RegexpView) (err error) {
	if result.Pattern == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pattern", "result"))
	}
	return
}

// ValidateConfigurationOptionView runs the validations defined on
// ConfigurationOptionView.
func ValidateConfigurationOptionView(result *ConfigurationOptionView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "string" || *result.Type == "number" || *result.Type == "list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"string", "number", "list"}))
		}
	}
	return
}

// ValidateUserView runs the validations defined on UserView.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.email", *result.Email, goa.FormatEmail))
	}
	return
}

// ValidateApprovalRequestListView runs the validations defined on
// ApprovalRequestListView using the "default" view.
func ValidateApprovalRequestListView(result *ApprovalRequestListView) (err error) {
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#approval_request_list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#approval_request_list"}))
		}
	}
	if result.Items != nil {
		if err2 := ValidateApprovalRequestCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateApprovalRequestListViewExtended runs the validations defined on
// ApprovalRequestListView using the "extended" view.
func ValidateApprovalRequestListViewExtended(result *ApprovalRequestListView) (err error) {
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#approval_request_list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#approval_request_list"}))
		}
	}
	if result.Items != nil {
		if err2 := ValidateApprovalRequestCollectionViewExtended(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateApprovalRequestCollectionView runs the validations defined on
// ApprovalRequestCollectionView using the "default" view.
func ValidateApprovalRequestCollectionView(result ApprovalRequestCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateApprovalRequestView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateApprovalRequestCollectionViewExtended runs the validations defined
// on ApprovalRequestCollectionView using the "extended" view.
func ValidateApprovalRequestCollectionViewExtended(result ApprovalRequestCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateApprovalRequestViewExtended(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
