// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ActionStatus service
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package actionstatus

import (
	"context"

	actionstatusviews "github.com/rightscale/policy_sdk/sdk/action_status/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the ActionStatus service interface.
type Service interface {
	// Index returns a list of action statuses in a project.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	Index(context.Context, *IndexPayload) (res *ActionStatusList, view string, err error)
	// Show retrieves the details of an action status.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	Show(context.Context, *ShowPayload) (res *ActionStatus, view string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "ActionStatus"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"index", "show"}

// IndexPayload is the payload type of the ActionStatus service index method.
type IndexPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// incident_id is a filter to only show action statuses that relate to a
	// certain incident.
	IncidentID *string
	// applied_policy_id is a filter to only show action statuses that relate to a
	// certain applied policy.
	AppliedPolicyID *string
	// etag is an HTTP ETag. It is typically the previous ETag value retrieved by
	// client if any. Service returns an empty response with HTTP status code 304
	// Not Modified if value matches current value server side.
	Etag *string
	// View used to render incident status
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ActionStatusList is the result type of the ActionStatus service index method.
type ActionStatusList struct {
	// count is the number of action statuss in the list.
	Count *uint
	// etag is an HTTP ETag for the action list.
	Etag string
	// items is the array of action statuses.
	Items ActionStatusCollection
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#action_status_list".
	Kind string
}

// ShowPayload is the payload type of the ActionStatus service show method.
type ShowPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// id identifies an action status by ID.
	ID string
	// View used to render action status
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ActionStatus is the result type of the ActionStatus service show method.
type ActionStatus struct {
	// id is a unique identifier for this action status.
	ID string
	// status of the action.
	Status string
	// name is an identifier for the action.
	Name string
	// type is the type of action, which also indicates the situations in which it
	// is used.
	Type string
	// label is the human readable name for the action.
	Label *string
	// run_by is the Flexera user that ran the action. If the action was applied
	// automatically, this will be who applied the action.
	RunBy *User
	// whether or not this action is automatically run.
	Automatic *bool
	// options lists the configuration options used to parameterize the action.
	Options []*ConfigurationOption
	// started_at is the time when the action was started.
	StartedAt *string
	// finished_at is the time when the action was finished.
	FinishedAt *string
	// actions is the list of individual steps within this action and their success
	// or failure.
	ActionItems []*ActionItemStatus
	// kind is "gov#action_status".
	Kind string
}

type ActionStatusCollection []*ActionStatus

// User represents a registered RightScale user.
type User struct {
	// ID of user
	ID uint
	// email of user
	Email string
	// name of user, usually of the form 'First Last'
	Name string
}

// ConfigurationOption describes a single parameter value used to configure an
// applied policy.
type ConfigurationOption struct {
	// name of option
	Name string
	// label of option
	Label string
	// type of option
	Type string
	// value of option
	Value interface{}
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho bool
}

// ActionItemStatus holds the status of a single step in an action.
type ActionItemStatus struct {
	// type of the action item.
	Type string
	// status of the action item.
	Status string
	// started_at is the time when the action item was started.
	StartedAt *string
	// finished_at is the time when the action item was finished.
	FinishedAt *string
	// error is any error that occurred when handling the action item.
	Error *string
	// approval_request_href is an href of the approval request. Required if the
	// type is request_approval.
	ApprovalRequestHref *string
	// process_href is a url of a cloud workflow process. Required if the type is
	// cloud_workflow.
	ProcessHref *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadGateway builds a goa.ServiceError from an error.
func MakeBadGateway(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_gateway",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewActionStatusList initializes result type ActionStatusList from viewed
// result type ActionStatusList.
func NewActionStatusList(vres *actionstatusviews.ActionStatusList) *ActionStatusList {
	var res *ActionStatusList
	switch vres.View {
	case "default", "":
		res = newActionStatusList(vres.Projected)
	case "extended":
		res = newActionStatusListExtended(vres.Projected)
	}
	return res
}

// NewViewedActionStatusList initializes viewed result type ActionStatusList
// from result type ActionStatusList using the given view.
func NewViewedActionStatusList(res *ActionStatusList, view string) *actionstatusviews.ActionStatusList {
	var vres *actionstatusviews.ActionStatusList
	switch view {
	case "default", "":
		p := newActionStatusListView(res)
		vres = &actionstatusviews.ActionStatusList{Projected: p, View: "default"}
	case "extended":
		p := newActionStatusListViewExtended(res)
		vres = &actionstatusviews.ActionStatusList{Projected: p, View: "extended"}
	}
	return vres
}

// NewActionStatus initializes result type ActionStatus from viewed result type
// ActionStatus.
func NewActionStatus(vres *actionstatusviews.ActionStatus) *ActionStatus {
	var res *ActionStatus
	switch vres.View {
	case "default", "":
		res = newActionStatus(vres.Projected)
	case "extended":
		res = newActionStatusExtended(vres.Projected)
	}
	return res
}

// NewViewedActionStatus initializes viewed result type ActionStatus from
// result type ActionStatus using the given view.
func NewViewedActionStatus(res *ActionStatus, view string) *actionstatusviews.ActionStatus {
	var vres *actionstatusviews.ActionStatus
	switch view {
	case "default", "":
		p := newActionStatusView(res)
		vres = &actionstatusviews.ActionStatus{Projected: p, View: "default"}
	case "extended":
		p := newActionStatusViewExtended(res)
		vres = &actionstatusviews.ActionStatus{Projected: p, View: "extended"}
	}
	return vres
}

// newActionStatusList converts projected type ActionStatusList to service type
// ActionStatusList.
func newActionStatusList(vres *actionstatusviews.ActionStatusListView) *ActionStatusList {
	res := &ActionStatusList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newActionStatusCollection(vres.Items)
	}
	return res
}

// newActionStatusListExtended converts projected type ActionStatusList to
// service type ActionStatusList.
func newActionStatusListExtended(vres *actionstatusviews.ActionStatusListView) *ActionStatusList {
	res := &ActionStatusList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newActionStatusCollectionExtended(vres.Items)
	}
	return res
}

// newActionStatusListView projects result type ActionStatusList to projected
// type ActionStatusListView using the "default" view.
func newActionStatusListView(res *ActionStatusList) *actionstatusviews.ActionStatusListView {
	vres := &actionstatusviews.ActionStatusListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newActionStatusCollectionView(res.Items)
	}
	return vres
}

// newActionStatusListViewExtended projects result type ActionStatusList to
// projected type ActionStatusListView using the "extended" view.
func newActionStatusListViewExtended(res *ActionStatusList) *actionstatusviews.ActionStatusListView {
	vres := &actionstatusviews.ActionStatusListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newActionStatusCollectionViewExtended(res.Items)
	}
	return vres
}

// newActionStatusCollection converts projected type ActionStatusCollection to
// service type ActionStatusCollection.
func newActionStatusCollection(vres actionstatusviews.ActionStatusCollectionView) ActionStatusCollection {
	res := make(ActionStatusCollection, len(vres))
	for i, n := range vres {
		res[i] = newActionStatus(n)
	}
	return res
}

// newActionStatusCollectionExtended converts projected type
// ActionStatusCollection to service type ActionStatusCollection.
func newActionStatusCollectionExtended(vres actionstatusviews.ActionStatusCollectionView) ActionStatusCollection {
	res := make(ActionStatusCollection, len(vres))
	for i, n := range vres {
		res[i] = newActionStatusExtended(n)
	}
	return res
}

// newActionStatusCollectionView projects result type ActionStatusCollection to
// projected type ActionStatusCollectionView using the "default" view.
func newActionStatusCollectionView(res ActionStatusCollection) actionstatusviews.ActionStatusCollectionView {
	vres := make(actionstatusviews.ActionStatusCollectionView, len(res))
	for i, n := range res {
		vres[i] = newActionStatusView(n)
	}
	return vres
}

// newActionStatusCollectionViewExtended projects result type
// ActionStatusCollection to projected type ActionStatusCollectionView using
// the "extended" view.
func newActionStatusCollectionViewExtended(res ActionStatusCollection) actionstatusviews.ActionStatusCollectionView {
	vres := make(actionstatusviews.ActionStatusCollectionView, len(res))
	for i, n := range res {
		vres[i] = newActionStatusViewExtended(n)
	}
	return vres
}

// newActionStatus converts projected type ActionStatus to service type
// ActionStatus.
func newActionStatus(vres *actionstatusviews.ActionStatusView) *ActionStatus {
	res := &ActionStatus{
		Automatic:  vres.Automatic,
		Label:      vres.Label,
		StartedAt:  vres.StartedAt,
		FinishedAt: vres.FinishedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.RunBy != nil {
		res.RunBy = transformActionstatusviewsUserViewToUser(vres.RunBy)
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformActionstatusviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	return res
}

// newActionStatusExtended converts projected type ActionStatus to service type
// ActionStatus.
func newActionStatusExtended(vres *actionstatusviews.ActionStatusView) *ActionStatus {
	res := &ActionStatus{
		Automatic:  vres.Automatic,
		Label:      vres.Label,
		StartedAt:  vres.StartedAt,
		FinishedAt: vres.FinishedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.RunBy != nil {
		res.RunBy = transformActionstatusviewsUserViewToUser(vres.RunBy)
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformActionstatusviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if vres.ActionItems != nil {
		res.ActionItems = make([]*ActionItemStatus, len(vres.ActionItems))
		for i, val := range vres.ActionItems {
			res.ActionItems[i] = transformActionstatusviewsActionItemStatusViewToActionItemStatus(val)
		}
	}
	return res
}

// newActionStatusView projects result type ActionStatus to projected type
// ActionStatusView using the "default" view.
func newActionStatusView(res *ActionStatus) *actionstatusviews.ActionStatusView {
	vres := &actionstatusviews.ActionStatusView{
		ID:         &res.ID,
		Status:     &res.Status,
		Name:       &res.Name,
		Type:       &res.Type,
		Label:      res.Label,
		Automatic:  res.Automatic,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
		Kind:       &res.Kind,
	}
	if res.RunBy != nil {
		vres.RunBy = transformUserToActionstatusviewsUserView(res.RunBy)
	}
	if res.Options != nil {
		vres.Options = make([]*actionstatusviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToActionstatusviewsConfigurationOptionView(val)
		}
	}
	return vres
}

// newActionStatusViewExtended projects result type ActionStatus to projected
// type ActionStatusView using the "extended" view.
func newActionStatusViewExtended(res *ActionStatus) *actionstatusviews.ActionStatusView {
	vres := &actionstatusviews.ActionStatusView{
		ID:         &res.ID,
		Status:     &res.Status,
		Name:       &res.Name,
		Type:       &res.Type,
		Label:      res.Label,
		Automatic:  res.Automatic,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
		Kind:       &res.Kind,
	}
	if res.RunBy != nil {
		vres.RunBy = transformUserToActionstatusviewsUserView(res.RunBy)
	}
	if res.Options != nil {
		vres.Options = make([]*actionstatusviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToActionstatusviewsConfigurationOptionView(val)
		}
	}
	if res.ActionItems != nil {
		vres.ActionItems = make([]*actionstatusviews.ActionItemStatusView, len(res.ActionItems))
		for i, val := range res.ActionItems {
			vres.ActionItems[i] = transformActionItemStatusToActionstatusviewsActionItemStatusView(val)
		}
	}
	return vres
}

// newActionItemStatus converts projected type ActionItemStatus to service type
// ActionItemStatus.
func newActionItemStatus(vres *actionstatusviews.ActionItemStatusView) *ActionItemStatus {
	res := &ActionItemStatus{
		StartedAt:           vres.StartedAt,
		FinishedAt:          vres.FinishedAt,
		Error:               vres.Error,
		ApprovalRequestHref: vres.ApprovalRequestHref,
		ProcessHref:         vres.ProcessHref,
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	return res
}

// newActionItemStatusView projects result type ActionItemStatus to projected
// type ActionItemStatusView using the "default" view.
func newActionItemStatusView(res *ActionItemStatus) *actionstatusviews.ActionItemStatusView {
	vres := &actionstatusviews.ActionItemStatusView{
		Type:                &res.Type,
		Status:              &res.Status,
		StartedAt:           res.StartedAt,
		FinishedAt:          res.FinishedAt,
		Error:               res.Error,
		ApprovalRequestHref: res.ApprovalRequestHref,
		ProcessHref:         res.ProcessHref,
	}
	return vres
}

// transformActionstatusviewsUserViewToUser builds a value of type *User from a
// value of type *actionstatusviews.UserView.
func transformActionstatusviewsUserViewToUser(v *actionstatusviews.UserView) *User {
	if v == nil {
		return nil
	}
	res := &User{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// transformActionstatusviewsConfigurationOptionViewToConfigurationOption
// builds a value of type *ConfigurationOption from a value of type
// *actionstatusviews.ConfigurationOptionView.
func transformActionstatusviewsConfigurationOptionViewToConfigurationOption(v *actionstatusviews.ConfigurationOptionView) *ConfigurationOption {
	if v == nil {
		return nil
	}
	res := &ConfigurationOption{
		Name:  *v.Name,
		Label: *v.Label,
		Type:  *v.Type,
		Value: v.Value,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}

	return res
}

// transformActionstatusviewsActionItemStatusViewToActionItemStatus builds a
// value of type *ActionItemStatus from a value of type
// *actionstatusviews.ActionItemStatusView.
func transformActionstatusviewsActionItemStatusViewToActionItemStatus(v *actionstatusviews.ActionItemStatusView) *ActionItemStatus {
	if v == nil {
		return nil
	}
	res := &ActionItemStatus{
		Type:                *v.Type,
		Status:              *v.Status,
		StartedAt:           v.StartedAt,
		FinishedAt:          v.FinishedAt,
		Error:               v.Error,
		ApprovalRequestHref: v.ApprovalRequestHref,
		ProcessHref:         v.ProcessHref,
	}

	return res
}

// transformUserToActionstatusviewsUserView builds a value of type
// *actionstatusviews.UserView from a value of type *User.
func transformUserToActionstatusviewsUserView(v *User) *actionstatusviews.UserView {
	if v == nil {
		return nil
	}
	res := &actionstatusviews.UserView{
		ID:    &v.ID,
		Email: &v.Email,
		Name:  &v.Name,
	}

	return res
}

// transformConfigurationOptionToActionstatusviewsConfigurationOptionView
// builds a value of type *actionstatusviews.ConfigurationOptionView from a
// value of type *ConfigurationOption.
func transformConfigurationOptionToActionstatusviewsConfigurationOptionView(v *ConfigurationOption) *actionstatusviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &actionstatusviews.ConfigurationOptionView{
		Name:   &v.Name,
		Label:  &v.Label,
		Type:   &v.Type,
		Value:  v.Value,
		NoEcho: &v.NoEcho,
	}

	return res
}

// transformActionItemStatusToActionstatusviewsActionItemStatusView builds a
// value of type *actionstatusviews.ActionItemStatusView from a value of type
// *ActionItemStatus.
func transformActionItemStatusToActionstatusviewsActionItemStatusView(v *ActionItemStatus) *actionstatusviews.ActionItemStatusView {
	res := &actionstatusviews.ActionItemStatusView{
		Type:                &v.Type,
		Status:              &v.Status,
		StartedAt:           v.StartedAt,
		FinishedAt:          v.FinishedAt,
		Error:               v.Error,
		ApprovalRequestHref: v.ApprovalRequestHref,
		ProcessHref:         v.ProcessHref,
	}

	return res
}
