// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ArchivedIncident service
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package archivedincident

import (
	"context"

	archivedincidentviews "github.com/rightscale/policy_sdk/sdk/archived_incident/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the ArchivedIncident service interface.
type Service interface {
	// Show retrieves the details of an archived incident.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	//	- "source"
	Show(context.Context, *ShowPayload) (res *ArchivedIncident, view string, err error)
	// Index retrieves the list of archived_incidents in a project.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	Index(context.Context, *IndexPayload) (res *ArchivedIncidentList, view string, err error)
	// IndexEscalations retrieves the status details of all of the escalations for
	// an archived incident.
	IndexEscalations(context.Context, *IndexEscalationsPayload) (res *Escalations, err error)
	// IndexResolutions retrieves the status details of all of the resolutions for
	// an archived incident.
	IndexResolutions(context.Context, *IndexResolutionsPayload) (res *Resolutions, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "ArchivedIncident"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"show", "index", "index_escalations", "index_resolutions"}

// ShowPayload is the payload type of the ArchivedIncident service show method.
type ShowPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// incident_id identifies an archived incident by ID.
	IncidentID string
	// etag is an HTTP ETag. It is typically the previous ETag value retrieved by
	// client if any. Service returns an empty response with HTTP status code 304
	// Not Modified if value matches current value server side.
	Etag *string
	// View used to render archived incident
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ArchivedIncident is the result type of the ArchivedIncident service show
// method.
type ArchivedIncident struct {
	// id is the ID of the archived incident, must be unique in the project.
	ID string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *Project
	// href is the href of the archived incident.
	Href *string
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicy
	// summary is a summary of the incident.
	Summary *string
	// message is a description of the incident.
	Detail *string
	// data is the data about the resources that violate the policy.
	Data interface{}
	// The number of items in violation data.
	ViolationDataCount *uint
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string
	// resolved_by is the RightScale user that resolved the incident if it was
	// resolved manually.
	ResolvedBy *User
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string
	// state represents the current handling status of the incident.
	State *string
	// severity defines the severity level of the incident.
	Severity *string
	// category is the type categorization of the incident.
	Category *string
	// options lists the configuration options used to parameterize the policy that
	// created the incident.
	Options []*ConfigurationOption
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident should trigger escalation actions.
	DryRun *bool
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool
	// kind is "gov#archived_incident".
	Kind string
	// etag is an HTTP ETag for the incident.
	Etag string
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
}

// IndexPayload is the payload type of the ArchivedIncident service index
// method.
type IndexPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// etag is an HTTP ETag. It is typically the previous ETag value retrieved by
	// client if any. Service returns an empty response with HTTP status code 304
	// Not Modified if value matches current value server side.
	Etag *string
	// View used to render archived_incidents
	View *string
	// state is a filter to only show archived_incidents that are in this state.
	State []string
	// applied_policy_id is a filter to only show archived_incidents that were
	// created by a certain applied policy.
	AppliedPolicyID *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ArchivedIncidentList is the result type of the ArchivedIncident service
// index method.
type ArchivedIncidentList struct {
	// count is the number of incidents in the list.
	Count *uint
	// etag is an HTTP ETag for the incident list.
	Etag string
	// items is the array of archived incidents.
	Items ArchivedIncidentCollection
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#archived_incident_list".
	Kind string
}

// IndexEscalationsPayload is the payload type of the ArchivedIncident service
// index_escalations method.
type IndexEscalationsPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// incident_id identifies an archived incident by ID.
	IncidentID string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// Escalations is the result type of the ArchivedIncident service
// index_escalations method.
type Escalations struct {
	// status is the status of all of the escalations.
	Status string
	// escalations is the set of escalations.
	Escalations []*Escalation
	// started_at is the time when the incident handling is started.
	StartedAt *string
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string
}

// IndexResolutionsPayload is the payload type of the ArchivedIncident service
// index_resolutions method.
type IndexResolutionsPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// incident_id identifies an archived incident by ID.
	IncidentID string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// Resolutions is the result type of the ArchivedIncident service
// index_resolutions method.
type Resolutions struct {
	// status is the status of all of the resolutions.
	Status string
	// resolutions is the set of resolutions.
	Resolutions []*Resolution
	// started_at is the time when the incident handling is started.
	StartedAt *string
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string
}

// Project represents a RightScale project and provides some information about
// the project.
type Project struct {
	// id is the Project ID
	ID uint
	// name is the Project Name
	Name string
	// org_id is the RightScale Organization ID
	OrgID uint
	// org_name is the RightScale Organization Name
	OrgName string
}

// AppliedPolicy describes a policy that is currently applied.
type AppliedPolicy struct {
	// id identifies an applied policy by ID.
	ID string
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string
	// name provides a name for this specific application of the policy.
	Name string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *Project
	// href is the href of the applied policy.
	Href string
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplate
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplate
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// created_by is the RightScale user that applied the policy.
	CreatedBy *User
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string
	// category is the type categorization of the applied policy.
	Category *string
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOption
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string
	// status is used to identify the current status of the applied policy.
	Status *string
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string
	// kind is "gov#applied_policy".
	Kind string
}

// PolicyTemplate describes a previously uploaded policy template.
type PolicyTemplate struct {
	// id identifies a policy template by ID.
	ID string
	// name is the unique name of the policy template in the project.
	Name string
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the policy template.
	ShortDescription *string
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the href of the policy template.
	Href string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is the policy template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string
	// category is the type categorization of the policy template.
	Category *string
	// created_by is the RightScale user that created the policy template.
	CreatedBy *User
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *User
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*Permission
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*Parameter
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*Credentials
	// kind is "gov#policy_template".
	Kind string
}

// User represents a registered RightScale user.
type User struct {
	// ID of user
	ID uint
	// email of user
	Email string
	// name of user, usually of the form 'First Last'
	Name string
}

// Permission defines a role required in RightScale to perform actions on
// resources
type Permission struct {
	// Name of a permission
	Name string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// Parameter defines a parameter given as input to a Policy
type Parameter struct {
	// Name of the parameter
	Name string `json:"name"`
	// Type of the parameter
	Type string `json:"type"`
	// Label to show in the UI
	Label string `json:"label"`
	// The index of this parameter in the list
	Index uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *Regexp `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// Regular expression
type Regexp struct {
	// Pattern is the regular expression pattern.
	Pattern string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// Credentials describes a reference to an API signer in the credentials
// service in the policy language.
type Credentials struct {
	// Name in policy template source code
	Name string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTag `json:"tags"`
}

type CredentialsTag struct {
	// Key is the tag key.
	Key string `json:"key"`
	// Value is the tag value.
	Value string `json:"value"`
}

// PublishedTemplate describes a previously created published template.
type PublishedTemplate struct {
	// id identifies a published template by ID.
	ID string
	// name is the unique name of the published template in the organization.
	Name string
	// org_id is the ID of the organization that the published template belongs to.
	OrgID *uint
	// project_id is the ID of the project that the published template is published
	// from.
	ProjectID *uint
	// policy_template_id is the ID of the policy template from which the published
	// template originated.
	PolicyTemplateID *string
	// policy_template_url is the full URL to the policy template from which the
	// published template originated.
	PolicyTemplateURL *string
	// policy_template_fingerprint is fingerprint of the policy template. It is
	// used to determine if the policy template that this was published from is
	// outdated.
	PolicyTemplateFingerprint *string
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the published template.
	ShortDescription *string
	// long_description is the long description of the published template. The
	// content can be markdown.
	LongDescription *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the self-referential href of the published template.
	Href string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is published template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string
	// category is the type categorization of the published template.
	Category *string
	// created_by is the RightScale user that created the published template.
	CreatedBy *User
	// created_at is the published template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *User
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*Permission
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*Parameter
	// severity defines the severity level of incidents raised from this published
	// template.
	Severity *string
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool
	// hidden is a flag to indicate whether the published template is hidden.
	Hidden *bool
	// hidden_by is the RightScale user that marked the published template as
	// hidden.
	HiddenBy *User
	// hidden_at is the hidden at timestamp in RFC3339 format.
	HiddenAt *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*Credentials
	// kind is "gov#published_template".
	Kind string
}

// ConfigurationOption describes a single parameter value used to configure an
// applied policy.
type ConfigurationOption struct {
	// name of option
	Name string
	// label of option
	Label string
	// type of option
	Type string
	// value of option
	Value interface{}
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho bool
}

type ArchivedIncidentCollection []*ArchivedIncident

// Escalation holds the status of one or more actions of an escalation.
type Escalation struct {
	// status is the status of the set of escalation actions.
	Status string
	// name is the name of the escalation.
	Name string
	// actions is the list of individual actions.
	Actions []*EscalationAction
}

// EscalationAction holds the status of a single action in an escalation.
type EscalationAction struct {
	// type is the type of the action.
	Type string
	// status is the status of the action.
	Status string
	// started_at is the time when the action was started.
	StartedAt *string
	// finished_at is the time when the action was finished.
	FinishedAt *string
	// error is any error occurred when handling the action.
	Error *string
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequest
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string
}

// ApprovalRequest describes an approval request to perform one or more actions
type ApprovalRequest struct {
	// id identifies an approval request by ID.
	ID string
	// project_id is the ID of the project where this approval request is created.
	ProjectID uint
	// href is the href of the approval request
	Href string
	// label is a short title for this approval request
	Label *string
	// description describes the details for this approval request.
	Description *string
	// subject is the subject of the approval.
	Subject *ApprovalSubject
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*Parameter
	// status is the status of this approval request.
	Status *string
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOption
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *User
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string
	// denied_by is the RightScale user that denied this approval request.
	DeniedBy *User
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string
	// kind is "gov#approval_request".
	Kind string
}

// ApprovalSubject is the subject of an approval.
type ApprovalSubject struct {
	// kind is the kind of subject
	Kind string
	// href is the href of the subject.
	Href string
}

// Resolution holds the status of one or more actions of a resolution.
type Resolution struct {
	// status is the status of the set of resolution actions.
	Status string
	// name is the name of the resolution.
	Name string
	// actions is the list of individual actions.
	Actions []*ResolutionAction
}

// ResolutionAction holds the status of a single action in a resolution.
type ResolutionAction struct {
	// type is the type of the action.
	Type string
	// status is the status of the action.
	Status string
	// started_at is the time when the action was started.
	StartedAt *string
	// finished_at is the time when the action was finished.
	FinishedAt *string
	// error is any error occurred when handling the action.
	Error *string
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequest
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadGateway builds a goa.ServiceError from an error.
func MakeBadGateway(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_gateway",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnprocessableEntity builds a goa.ServiceError from an error.
func MakeUnprocessableEntity(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unprocessable_entity",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewArchivedIncident initializes result type ArchivedIncident from viewed
// result type ArchivedIncident.
func NewArchivedIncident(vres *archivedincidentviews.ArchivedIncident) *ArchivedIncident {
	var res *ArchivedIncident
	switch vres.View {
	case "default", "":
		res = newArchivedIncident(vres.Projected)
	case "extended":
		res = newArchivedIncidentExtended(vres.Projected)
	case "source":
		res = newArchivedIncidentSource(vres.Projected)
	}
	return res
}

// NewViewedArchivedIncident initializes viewed result type ArchivedIncident
// from result type ArchivedIncident using the given view.
func NewViewedArchivedIncident(res *ArchivedIncident, view string) *archivedincidentviews.ArchivedIncident {
	var vres *archivedincidentviews.ArchivedIncident
	switch view {
	case "default", "":
		p := newArchivedIncidentView(res)
		vres = &archivedincidentviews.ArchivedIncident{Projected: p, View: "default"}
	case "extended":
		p := newArchivedIncidentViewExtended(res)
		vres = &archivedincidentviews.ArchivedIncident{Projected: p, View: "extended"}
	case "source":
		p := newArchivedIncidentViewSource(res)
		vres = &archivedincidentviews.ArchivedIncident{Projected: p, View: "source"}
	}
	return vres
}

// NewArchivedIncidentList initializes result type ArchivedIncidentList from
// viewed result type ArchivedIncidentList.
func NewArchivedIncidentList(vres *archivedincidentviews.ArchivedIncidentList) *ArchivedIncidentList {
	var res *ArchivedIncidentList
	switch vres.View {
	case "default", "":
		res = newArchivedIncidentList(vres.Projected)
	case "extended":
		res = newArchivedIncidentListExtended(vres.Projected)
	}
	return res
}

// NewViewedArchivedIncidentList initializes viewed result type
// ArchivedIncidentList from result type ArchivedIncidentList using the given
// view.
func NewViewedArchivedIncidentList(res *ArchivedIncidentList, view string) *archivedincidentviews.ArchivedIncidentList {
	var vres *archivedincidentviews.ArchivedIncidentList
	switch view {
	case "default", "":
		p := newArchivedIncidentListView(res)
		vres = &archivedincidentviews.ArchivedIncidentList{Projected: p, View: "default"}
	case "extended":
		p := newArchivedIncidentListViewExtended(res)
		vres = &archivedincidentviews.ArchivedIncidentList{Projected: p, View: "extended"}
	}
	return vres
}

// NewEscalations initializes result type Escalations from viewed result type
// Escalations.
func NewEscalations(vres *archivedincidentviews.Escalations) *Escalations {
	return newEscalations(vres.Projected)
}

// NewViewedEscalations initializes viewed result type Escalations from result
// type Escalations using the given view.
func NewViewedEscalations(res *Escalations, view string) *archivedincidentviews.Escalations {
	p := newEscalationsView(res)
	return &archivedincidentviews.Escalations{Projected: p, View: "default"}
}

// NewResolutions initializes result type Resolutions from viewed result type
// Resolutions.
func NewResolutions(vres *archivedincidentviews.Resolutions) *Resolutions {
	return newResolutions(vres.Projected)
}

// NewViewedResolutions initializes viewed result type Resolutions from result
// type Resolutions using the given view.
func NewViewedResolutions(res *Resolutions, view string) *archivedincidentviews.Resolutions {
	p := newResolutionsView(res)
	return &archivedincidentviews.Resolutions{Projected: p, View: "default"}
}

// newArchivedIncident converts projected type ArchivedIncident to service type
// ArchivedIncident.
func newArchivedIncident(vres *archivedincidentviews.ArchivedIncidentView) *ArchivedIncident {
	res := &ArchivedIncident{
		Href:               vres.Href,
		Summary:            vres.Summary,
		CreatedAt:          vres.CreatedAt,
		UpdatedAt:          vres.UpdatedAt,
		ResolvedAt:         vres.ResolvedAt,
		ResolutionMessage:  vres.ResolutionMessage,
		State:              vres.State,
		ViolationDataCount: vres.ViolationDataCount,
		Severity:           vres.Severity,
		Category:           vres.Category,
		DryRun:             vres.DryRun,
		ActionFailed:       vres.ActionFailed,
		NotModified:        vres.NotModified,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Project != nil {
		res.Project = transformArchivedincidentviewsProjectViewToProject(vres.Project)
	}
	if vres.ResolvedBy != nil {
		res.ResolvedBy = transformArchivedincidentviewsUserViewToUser(vres.ResolvedBy)
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformArchivedincidentviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if vres.AppliedPolicy != nil {
		res.AppliedPolicy = newAppliedPolicyLink(vres.AppliedPolicy)
	}
	return res
}

// newArchivedIncidentExtended converts projected type ArchivedIncident to
// service type ArchivedIncident.
func newArchivedIncidentExtended(vres *archivedincidentviews.ArchivedIncidentView) *ArchivedIncident {
	res := &ArchivedIncident{
		Href:               vres.Href,
		Summary:            vres.Summary,
		Detail:             vres.Detail,
		CreatedAt:          vres.CreatedAt,
		UpdatedAt:          vres.UpdatedAt,
		ResolvedAt:         vres.ResolvedAt,
		ResolutionMessage:  vres.ResolutionMessage,
		State:              vres.State,
		ViolationDataCount: vres.ViolationDataCount,
		Severity:           vres.Severity,
		Category:           vres.Category,
		DryRun:             vres.DryRun,
		ActionFailed:       vres.ActionFailed,
		NotModified:        vres.NotModified,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Project != nil {
		res.Project = transformArchivedincidentviewsProjectViewToProject(vres.Project)
	}
	if vres.ResolvedBy != nil {
		res.ResolvedBy = transformArchivedincidentviewsUserViewToUser(vres.ResolvedBy)
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformArchivedincidentviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if vres.AppliedPolicy != nil {
		res.AppliedPolicy = newAppliedPolicyLink(vres.AppliedPolicy)
	}
	return res
}

// newArchivedIncidentSource converts projected type ArchivedIncident to
// service type ArchivedIncident.
func newArchivedIncidentSource(vres *archivedincidentviews.ArchivedIncidentView) *ArchivedIncident {
	res := &ArchivedIncident{
		Href:        vres.Href,
		NotModified: vres.NotModified,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Project != nil {
		res.Project = transformArchivedincidentviewsProjectViewToProject(vres.Project)
	}
	if vres.AppliedPolicy != nil {
		res.AppliedPolicy = newAppliedPolicySource(vres.AppliedPolicy)
	}
	return res
}

// newArchivedIncidentView projects result type ArchivedIncident to projected
// type ArchivedIncidentView using the "default" view.
func newArchivedIncidentView(res *ArchivedIncident) *archivedincidentviews.ArchivedIncidentView {
	vres := &archivedincidentviews.ArchivedIncidentView{
		ID:                 &res.ID,
		Href:               res.Href,
		Summary:            res.Summary,
		ViolationDataCount: res.ViolationDataCount,
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
		ResolvedAt:         res.ResolvedAt,
		ResolutionMessage:  res.ResolutionMessage,
		State:              res.State,
		Severity:           res.Severity,
		Category:           res.Category,
		DryRun:             res.DryRun,
		ActionFailed:       res.ActionFailed,
		Kind:               &res.Kind,
		Etag:               &res.Etag,
		NotModified:        res.NotModified,
	}
	if res.Project != nil {
		vres.Project = transformProjectToArchivedincidentviewsProjectView(res.Project)
	}
	if res.ResolvedBy != nil {
		vres.ResolvedBy = transformUserToArchivedincidentviewsUserView(res.ResolvedBy)
	}
	if res.Options != nil {
		vres.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	if res.AppliedPolicy != nil {
		vres.AppliedPolicy = newAppliedPolicyViewLink(res.AppliedPolicy)
	}
	return vres
}

// newArchivedIncidentViewExtended projects result type ArchivedIncident to
// projected type ArchivedIncidentView using the "extended" view.
func newArchivedIncidentViewExtended(res *ArchivedIncident) *archivedincidentviews.ArchivedIncidentView {
	vres := &archivedincidentviews.ArchivedIncidentView{
		ID:                 &res.ID,
		Href:               res.Href,
		Summary:            res.Summary,
		Detail:             res.Detail,
		ViolationDataCount: res.ViolationDataCount,
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
		ResolvedAt:         res.ResolvedAt,
		ResolutionMessage:  res.ResolutionMessage,
		State:              res.State,
		Severity:           res.Severity,
		Category:           res.Category,
		DryRun:             res.DryRun,
		ActionFailed:       res.ActionFailed,
		Kind:               &res.Kind,
		Etag:               &res.Etag,
		NotModified:        res.NotModified,
	}
	if res.Project != nil {
		vres.Project = transformProjectToArchivedincidentviewsProjectView(res.Project)
	}
	if res.ResolvedBy != nil {
		vres.ResolvedBy = transformUserToArchivedincidentviewsUserView(res.ResolvedBy)
	}
	if res.Options != nil {
		vres.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	if res.AppliedPolicy != nil {
		vres.AppliedPolicy = newAppliedPolicyViewLink(res.AppliedPolicy)
	}
	return vres
}

// newArchivedIncidentViewSource projects result type ArchivedIncident to
// projected type ArchivedIncidentView using the "source" view.
func newArchivedIncidentViewSource(res *ArchivedIncident) *archivedincidentviews.ArchivedIncidentView {
	vres := &archivedincidentviews.ArchivedIncidentView{
		ID:          &res.ID,
		Href:        res.Href,
		Kind:        &res.Kind,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
	}
	if res.Project != nil {
		vres.Project = transformProjectToArchivedincidentviewsProjectView(res.Project)
	}
	if res.AppliedPolicy != nil {
		vres.AppliedPolicy = newAppliedPolicyViewSource(res.AppliedPolicy)
	}
	return vres
}

// newAppliedPolicy converts projected type AppliedPolicy to service type
// AppliedPolicy.
func newAppliedPolicy(vres *archivedincidentviews.AppliedPolicyView) *AppliedPolicy {
	res := &AppliedPolicy{
		PolicyAggregateID:   vres.PolicyAggregateID,
		IncidentAggregateID: vres.IncidentAggregateID,
		Description:         vres.Description,
		DocLink:             vres.DocLink,
		CreatedAt:           vres.CreatedAt,
		UpdatedAt:           vres.UpdatedAt,
		Severity:            vres.Severity,
		Category:            vres.Category,
		Frequency:           vres.Frequency,
		DryRun:              vres.DryRun,
		SkipApprovals:       vres.SkipApprovals,
		Status:              vres.Status,
		Error:               vres.Error,
		ErroredAt:           vres.ErroredAt,
		Scope:               vres.Scope,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Project != nil {
		res.Project = transformArchivedincidentviewsProjectViewToProject(vres.Project)
	}
	if vres.PublishedTemplate != nil {
		res.PublishedTemplate = transformArchivedincidentviewsPublishedTemplateViewToPublishedTemplate(vres.PublishedTemplate)
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformArchivedincidentviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformArchivedincidentviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]string, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}
	if vres.PolicyTemplate != nil {
		res.PolicyTemplate = newPolicyTemplateLink(vres.PolicyTemplate)
	}
	return res
}

// newAppliedPolicySource converts projected type AppliedPolicy to service type
// AppliedPolicy.
func newAppliedPolicySource(vres *archivedincidentviews.AppliedPolicyView) *AppliedPolicy {
	res := &AppliedPolicy{
		PolicyAggregateID:   vres.PolicyAggregateID,
		IncidentAggregateID: vres.IncidentAggregateID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Project != nil {
		res.Project = transformArchivedincidentviewsProjectViewToProject(vres.Project)
	}
	if vres.PublishedTemplate != nil {
		res.PublishedTemplate = transformArchivedincidentviewsPublishedTemplateViewToPublishedTemplate(vres.PublishedTemplate)
	}
	if vres.PolicyTemplate != nil {
		res.PolicyTemplate = newPolicyTemplateSource(vres.PolicyTemplate)
	}
	return res
}

// newAppliedPolicyLink converts projected type AppliedPolicy to service type
// AppliedPolicy.
func newAppliedPolicyLink(vres *archivedincidentviews.AppliedPolicyView) *AppliedPolicy {
	res := &AppliedPolicy{
		PolicyAggregateID:   vres.PolicyAggregateID,
		IncidentAggregateID: vres.IncidentAggregateID,
		CreatedAt:           vres.CreatedAt,
		Frequency:           vres.Frequency,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.PublishedTemplate != nil {
		res.PublishedTemplate = transformArchivedincidentviewsPublishedTemplateViewToPublishedTemplate(vres.PublishedTemplate)
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformArchivedincidentviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.PolicyTemplate != nil {
		res.PolicyTemplate = newPolicyTemplateLink(vres.PolicyTemplate)
	}
	return res
}

// newAppliedPolicyView projects result type AppliedPolicy to projected type
// AppliedPolicyView using the "default" view.
func newAppliedPolicyView(res *AppliedPolicy) *archivedincidentviews.AppliedPolicyView {
	vres := &archivedincidentviews.AppliedPolicyView{
		ID:                  &res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                &res.Name,
		Href:                &res.Href,
		Description:         res.Description,
		DocLink:             res.DocLink,
		CreatedAt:           res.CreatedAt,
		UpdatedAt:           res.UpdatedAt,
		Severity:            res.Severity,
		Category:            res.Category,
		Frequency:           res.Frequency,
		DryRun:              res.DryRun,
		SkipApprovals:       res.SkipApprovals,
		Status:              res.Status,
		Error:               res.Error,
		ErroredAt:           res.ErroredAt,
		Scope:               res.Scope,
		Kind:                &res.Kind,
	}
	if res.Project != nil {
		vres.Project = transformProjectToArchivedincidentviewsProjectView(res.Project)
	}
	if res.PublishedTemplate != nil {
		vres.PublishedTemplate = transformPublishedTemplateToArchivedincidentviewsPublishedTemplateView(res.PublishedTemplate)
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToArchivedincidentviewsUserView(res.CreatedBy)
	}
	if res.Options != nil {
		vres.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]string, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			tv := val
			vres.Credentials[tk] = tv
		}
	}
	if res.PolicyTemplate != nil {
		vres.PolicyTemplate = newPolicyTemplateViewLink(res.PolicyTemplate)
	}
	return vres
}

// newAppliedPolicyViewSource projects result type AppliedPolicy to projected
// type AppliedPolicyView using the "source" view.
func newAppliedPolicyViewSource(res *AppliedPolicy) *archivedincidentviews.AppliedPolicyView {
	vres := &archivedincidentviews.AppliedPolicyView{
		ID:                  &res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                &res.Name,
		Href:                &res.Href,
		Kind:                &res.Kind,
	}
	if res.Project != nil {
		vres.Project = transformProjectToArchivedincidentviewsProjectView(res.Project)
	}
	if res.PublishedTemplate != nil {
		vres.PublishedTemplate = transformPublishedTemplateToArchivedincidentviewsPublishedTemplateView(res.PublishedTemplate)
	}
	if res.PolicyTemplate != nil {
		vres.PolicyTemplate = newPolicyTemplateViewSource(res.PolicyTemplate)
	}
	return vres
}

// newAppliedPolicyViewLink projects result type AppliedPolicy to projected
// type AppliedPolicyView using the "link" view.
func newAppliedPolicyViewLink(res *AppliedPolicy) *archivedincidentviews.AppliedPolicyView {
	vres := &archivedincidentviews.AppliedPolicyView{
		ID:                  &res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                &res.Name,
		Href:                &res.Href,
		CreatedAt:           res.CreatedAt,
		Frequency:           res.Frequency,
		Kind:                &res.Kind,
	}
	if res.PublishedTemplate != nil {
		vres.PublishedTemplate = transformPublishedTemplateToArchivedincidentviewsPublishedTemplateView(res.PublishedTemplate)
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToArchivedincidentviewsUserView(res.CreatedBy)
	}
	if res.PolicyTemplate != nil {
		vres.PolicyTemplate = newPolicyTemplateViewLink(res.PolicyTemplate)
	}
	return vres
}

// newPolicyTemplate converts projected type PolicyTemplate to service type
// PolicyTemplate.
func newPolicyTemplate(vres *archivedincidentviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		ProjectID:        vres.ProjectID,
		RsPtVer:          vres.RsPtVer,
		ShortDescription: vres.ShortDescription,
		DocLink:          vres.DocLink,
		DefaultFrequency: vres.DefaultFrequency,
		Category:         vres.Category,
		CreatedAt:        vres.CreatedAt,
		UpdatedAt:        vres.UpdatedAt,
		Severity:         vres.Severity,
		Tenancy:          vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformArchivedincidentviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformArchivedincidentviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	return res
}

// newPolicyTemplateExtended converts projected type PolicyTemplate to service
// type PolicyTemplate.
func newPolicyTemplateExtended(vres *archivedincidentviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		ProjectID:        vres.ProjectID,
		RsPtVer:          vres.RsPtVer,
		ShortDescription: vres.ShortDescription,
		LongDescription:  vres.LongDescription,
		DocLink:          vres.DocLink,
		DefaultFrequency: vres.DefaultFrequency,
		Category:         vres.Category,
		CreatedAt:        vres.CreatedAt,
		UpdatedAt:        vres.UpdatedAt,
		Severity:         vres.Severity,
		Tenancy:          vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformArchivedincidentviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformArchivedincidentviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.Permissions != nil {
		res.Permissions = make(map[string]*Permission, len(vres.Permissions))
		for key, val := range vres.Permissions {
			tk := key
			res.Permissions[tk] = transformArchivedincidentviewsPermissionViewToPermission(val)
		}
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if vres.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(vres.Parameters))
		for key, val := range vres.Parameters {
			tk := key
			res.Parameters[tk] = transformArchivedincidentviewsParameterViewToParameter(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]*Credentials, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			res.Credentials[tk] = transformArchivedincidentviewsCredentialsViewToCredentials(val)
		}
	}
	return res
}

// newPolicyTemplateSource converts projected type PolicyTemplate to service
// type PolicyTemplate.
func newPolicyTemplateSource(vres *archivedincidentviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		Filename: vres.Filename,
		Source:   vres.Source,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	return res
}

// newPolicyTemplateLink converts projected type PolicyTemplate to service type
// PolicyTemplate.
func newPolicyTemplateLink(vres *archivedincidentviews.PolicyTemplateView) *PolicyTemplate {
	res := &PolicyTemplate{
		UpdatedAt: vres.UpdatedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformArchivedincidentviewsUserViewToUser(vres.UpdatedBy)
	}
	return res
}

// newPolicyTemplateView projects result type PolicyTemplate to projected type
// PolicyTemplateView using the "default" view.
func newPolicyTemplateView(res *PolicyTemplate) *archivedincidentviews.PolicyTemplateView {
	vres := &archivedincidentviews.PolicyTemplateView{
		ID:               &res.ID,
		Name:             &res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             &res.Href,
		Fingerprint:      &res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToArchivedincidentviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToArchivedincidentviewsUserView(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	return vres
}

// newPolicyTemplateViewExtended projects result type PolicyTemplate to
// projected type PolicyTemplateView using the "extended" view.
func newPolicyTemplateViewExtended(res *PolicyTemplate) *archivedincidentviews.PolicyTemplateView {
	vres := &archivedincidentviews.PolicyTemplateView{
		ID:               &res.ID,
		Name:             &res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		LongDescription:  res.LongDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             &res.Href,
		Fingerprint:      &res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToArchivedincidentviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToArchivedincidentviewsUserView(res.UpdatedBy)
	}
	if res.Permissions != nil {
		vres.Permissions = make(map[string]*archivedincidentviews.PermissionView, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			vres.Permissions[tk] = transformPermissionToArchivedincidentviewsPermissionView(val)
		}
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		vres.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			vres.Parameters[tk] = transformParameterToArchivedincidentviewsParameterView(val)
		}
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]*archivedincidentviews.CredentialsView, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			vres.Credentials[tk] = transformCredentialsToArchivedincidentviewsCredentialsView(val)
		}
	}
	return vres
}

// newPolicyTemplateViewSource projects result type PolicyTemplate to projected
// type PolicyTemplateView using the "source" view.
func newPolicyTemplateViewSource(res *PolicyTemplate) *archivedincidentviews.PolicyTemplateView {
	vres := &archivedincidentviews.PolicyTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: &res.Fingerprint,
		Kind:        &res.Kind,
	}
	return vres
}

// newPolicyTemplateViewLink projects result type PolicyTemplate to projected
// type PolicyTemplateView using the "link" view.
func newPolicyTemplateViewLink(res *PolicyTemplate) *archivedincidentviews.PolicyTemplateView {
	vres := &archivedincidentviews.PolicyTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Fingerprint: &res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		Kind:        &res.Kind,
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToArchivedincidentviewsUserView(res.UpdatedBy)
	}
	return vres
}

// newPublishedTemplate converts projected type PublishedTemplate to service
// type PublishedTemplate.
func newPublishedTemplate(vres *archivedincidentviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		OrgID:                     vres.OrgID,
		ProjectID:                 vres.ProjectID,
		PolicyTemplateID:          vres.PolicyTemplateID,
		PolicyTemplateURL:         vres.PolicyTemplateURL,
		PolicyTemplateFingerprint: vres.PolicyTemplateFingerprint,
		RsPtVer:                   vres.RsPtVer,
		ShortDescription:          vres.ShortDescription,
		DocLink:                   vres.DocLink,
		DefaultFrequency:          vres.DefaultFrequency,
		Category:                  vres.Category,
		CreatedAt:                 vres.CreatedAt,
		UpdatedAt:                 vres.UpdatedAt,
		HiddenAt:                  vres.HiddenAt,
		Severity:                  vres.Severity,
		BuiltIn:                   vres.BuiltIn,
		Hidden:                    vres.Hidden,
		Tenancy:                   vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformArchivedincidentviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformArchivedincidentviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.HiddenBy != nil {
		res.HiddenBy = transformArchivedincidentviewsUserViewToUser(vres.HiddenBy)
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	return res
}

// newPublishedTemplateExtended converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateExtended(vres *archivedincidentviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		OrgID:                     vres.OrgID,
		ProjectID:                 vres.ProjectID,
		PolicyTemplateID:          vres.PolicyTemplateID,
		PolicyTemplateURL:         vres.PolicyTemplateURL,
		PolicyTemplateFingerprint: vres.PolicyTemplateFingerprint,
		RsPtVer:                   vres.RsPtVer,
		ShortDescription:          vres.ShortDescription,
		LongDescription:           vres.LongDescription,
		DocLink:                   vres.DocLink,
		DefaultFrequency:          vres.DefaultFrequency,
		Category:                  vres.Category,
		CreatedAt:                 vres.CreatedAt,
		UpdatedAt:                 vres.UpdatedAt,
		HiddenAt:                  vres.HiddenAt,
		Severity:                  vres.Severity,
		BuiltIn:                   vres.BuiltIn,
		Hidden:                    vres.Hidden,
		Tenancy:                   vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformArchivedincidentviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformArchivedincidentviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.HiddenBy != nil {
		res.HiddenBy = transformArchivedincidentviewsUserViewToUser(vres.HiddenBy)
	}
	if vres.Permissions != nil {
		res.Permissions = make(map[string]*Permission, len(vres.Permissions))
		for key, val := range vres.Permissions {
			tk := key
			res.Permissions[tk] = transformArchivedincidentviewsPermissionViewToPermission(val)
		}
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if vres.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(vres.Parameters))
		for key, val := range vres.Parameters {
			tk := key
			res.Parameters[tk] = transformArchivedincidentviewsParameterViewToParameter(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]*Credentials, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			res.Credentials[tk] = transformArchivedincidentviewsCredentialsViewToCredentials(val)
		}
	}
	return res
}

// newPublishedTemplateSource converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateSource(vres *archivedincidentviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		Filename: vres.Filename,
		Source:   vres.Source,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	return res
}

// newPublishedTemplateLink converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateLink(vres *archivedincidentviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		UpdatedAt: vres.UpdatedAt,
		BuiltIn:   vres.BuiltIn,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformArchivedincidentviewsUserViewToUser(vres.UpdatedBy)
	}
	return res
}

// newPublishedTemplateView projects result type PublishedTemplate to projected
// type PublishedTemplateView using the "default" view.
func newPublishedTemplateView(res *PublishedTemplate) *archivedincidentviews.PublishedTemplateView {
	vres := &archivedincidentviews.PublishedTemplateView{
		ID:                        &res.ID,
		Name:                      &res.Name,
		OrgID:                     res.OrgID,
		ProjectID:                 res.ProjectID,
		PolicyTemplateID:          res.PolicyTemplateID,
		PolicyTemplateURL:         res.PolicyTemplateURL,
		PolicyTemplateFingerprint: res.PolicyTemplateFingerprint,
		RsPtVer:                   res.RsPtVer,
		ShortDescription:          res.ShortDescription,
		DocLink:                   res.DocLink,
		DefaultFrequency:          res.DefaultFrequency,
		Href:                      &res.Href,
		Fingerprint:               &res.Fingerprint,
		Category:                  res.Category,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
		Severity:                  res.Severity,
		BuiltIn:                   res.BuiltIn,
		Hidden:                    res.Hidden,
		HiddenAt:                  res.HiddenAt,
		Tenancy:                   res.Tenancy,
		Kind:                      &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToArchivedincidentviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToArchivedincidentviewsUserView(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.HiddenBy != nil {
		vres.HiddenBy = transformUserToArchivedincidentviewsUserView(res.HiddenBy)
	}
	return vres
}

// newPublishedTemplateViewExtended projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "extended" view.
func newPublishedTemplateViewExtended(res *PublishedTemplate) *archivedincidentviews.PublishedTemplateView {
	vres := &archivedincidentviews.PublishedTemplateView{
		ID:                        &res.ID,
		Name:                      &res.Name,
		OrgID:                     res.OrgID,
		ProjectID:                 res.ProjectID,
		PolicyTemplateID:          res.PolicyTemplateID,
		PolicyTemplateURL:         res.PolicyTemplateURL,
		PolicyTemplateFingerprint: res.PolicyTemplateFingerprint,
		RsPtVer:                   res.RsPtVer,
		ShortDescription:          res.ShortDescription,
		LongDescription:           res.LongDescription,
		DocLink:                   res.DocLink,
		DefaultFrequency:          res.DefaultFrequency,
		Href:                      &res.Href,
		Fingerprint:               &res.Fingerprint,
		Category:                  res.Category,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
		Severity:                  res.Severity,
		BuiltIn:                   res.BuiltIn,
		Hidden:                    res.Hidden,
		HiddenAt:                  res.HiddenAt,
		Tenancy:                   res.Tenancy,
		Kind:                      &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToArchivedincidentviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToArchivedincidentviewsUserView(res.UpdatedBy)
	}
	if res.Permissions != nil {
		vres.Permissions = make(map[string]*archivedincidentviews.PermissionView, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			vres.Permissions[tk] = transformPermissionToArchivedincidentviewsPermissionView(val)
		}
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		vres.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			vres.Parameters[tk] = transformParameterToArchivedincidentviewsParameterView(val)
		}
	}
	if res.HiddenBy != nil {
		vres.HiddenBy = transformUserToArchivedincidentviewsUserView(res.HiddenBy)
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]*archivedincidentviews.CredentialsView, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			vres.Credentials[tk] = transformCredentialsToArchivedincidentviewsCredentialsView(val)
		}
	}
	return vres
}

// newPublishedTemplateViewSource projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "source" view.
func newPublishedTemplateViewSource(res *PublishedTemplate) *archivedincidentviews.PublishedTemplateView {
	vres := &archivedincidentviews.PublishedTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: &res.Fingerprint,
		Kind:        &res.Kind,
	}
	return vres
}

// newPublishedTemplateViewLink projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "link" view.
func newPublishedTemplateViewLink(res *PublishedTemplate) *archivedincidentviews.PublishedTemplateView {
	vres := &archivedincidentviews.PublishedTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Fingerprint: &res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		BuiltIn:     res.BuiltIn,
		Kind:        &res.Kind,
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToArchivedincidentviewsUserView(res.UpdatedBy)
	}
	return vres
}

// newArchivedIncidentList converts projected type ArchivedIncidentList to
// service type ArchivedIncidentList.
func newArchivedIncidentList(vres *archivedincidentviews.ArchivedIncidentListView) *ArchivedIncidentList {
	res := &ArchivedIncidentList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newArchivedIncidentCollection(vres.Items)
	}
	return res
}

// newArchivedIncidentListExtended converts projected type ArchivedIncidentList
// to service type ArchivedIncidentList.
func newArchivedIncidentListExtended(vres *archivedincidentviews.ArchivedIncidentListView) *ArchivedIncidentList {
	res := &ArchivedIncidentList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newArchivedIncidentCollectionExtended(vres.Items)
	}
	return res
}

// newArchivedIncidentListView projects result type ArchivedIncidentList to
// projected type ArchivedIncidentListView using the "default" view.
func newArchivedIncidentListView(res *ArchivedIncidentList) *archivedincidentviews.ArchivedIncidentListView {
	vres := &archivedincidentviews.ArchivedIncidentListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newArchivedIncidentCollectionView(res.Items)
	}
	return vres
}

// newArchivedIncidentListViewExtended projects result type
// ArchivedIncidentList to projected type ArchivedIncidentListView using the
// "extended" view.
func newArchivedIncidentListViewExtended(res *ArchivedIncidentList) *archivedincidentviews.ArchivedIncidentListView {
	vres := &archivedincidentviews.ArchivedIncidentListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newArchivedIncidentCollectionViewExtended(res.Items)
	}
	return vres
}

// newArchivedIncidentCollection converts projected type
// ArchivedIncidentCollection to service type ArchivedIncidentCollection.
func newArchivedIncidentCollection(vres archivedincidentviews.ArchivedIncidentCollectionView) ArchivedIncidentCollection {
	res := make(ArchivedIncidentCollection, len(vres))
	for i, n := range vres {
		res[i] = newArchivedIncident(n)
	}
	return res
}

// newArchivedIncidentCollectionExtended converts projected type
// ArchivedIncidentCollection to service type ArchivedIncidentCollection.
func newArchivedIncidentCollectionExtended(vres archivedincidentviews.ArchivedIncidentCollectionView) ArchivedIncidentCollection {
	res := make(ArchivedIncidentCollection, len(vres))
	for i, n := range vres {
		res[i] = newArchivedIncidentExtended(n)
	}
	return res
}

// newArchivedIncidentCollectionSource converts projected type
// ArchivedIncidentCollection to service type ArchivedIncidentCollection.
func newArchivedIncidentCollectionSource(vres archivedincidentviews.ArchivedIncidentCollectionView) ArchivedIncidentCollection {
	res := make(ArchivedIncidentCollection, len(vres))
	for i, n := range vres {
		res[i] = newArchivedIncidentSource(n)
	}
	return res
}

// newArchivedIncidentCollectionView projects result type
// ArchivedIncidentCollection to projected type ArchivedIncidentCollectionView
// using the "default" view.
func newArchivedIncidentCollectionView(res ArchivedIncidentCollection) archivedincidentviews.ArchivedIncidentCollectionView {
	vres := make(archivedincidentviews.ArchivedIncidentCollectionView, len(res))
	for i, n := range res {
		vres[i] = newArchivedIncidentView(n)
	}
	return vres
}

// newArchivedIncidentCollectionViewExtended projects result type
// ArchivedIncidentCollection to projected type ArchivedIncidentCollectionView
// using the "extended" view.
func newArchivedIncidentCollectionViewExtended(res ArchivedIncidentCollection) archivedincidentviews.ArchivedIncidentCollectionView {
	vres := make(archivedincidentviews.ArchivedIncidentCollectionView, len(res))
	for i, n := range res {
		vres[i] = newArchivedIncidentViewExtended(n)
	}
	return vres
}

// newArchivedIncidentCollectionViewSource projects result type
// ArchivedIncidentCollection to projected type ArchivedIncidentCollectionView
// using the "source" view.
func newArchivedIncidentCollectionViewSource(res ArchivedIncidentCollection) archivedincidentviews.ArchivedIncidentCollectionView {
	vres := make(archivedincidentviews.ArchivedIncidentCollectionView, len(res))
	for i, n := range res {
		vres[i] = newArchivedIncidentViewSource(n)
	}
	return vres
}

// newEscalations converts projected type Escalations to service type
// Escalations.
func newEscalations(vres *archivedincidentviews.EscalationsView) *Escalations {
	res := &Escalations{
		StartedAt:  vres.StartedAt,
		FinishedAt: vres.FinishedAt,
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Escalations != nil {
		res.Escalations = make([]*Escalation, len(vres.Escalations))
		for i, val := range vres.Escalations {
			res.Escalations[i] = transformArchivedincidentviewsEscalationViewToEscalation(val)
		}
	}
	return res
}

// newEscalationsView projects result type Escalations to projected type
// EscalationsView using the "default" view.
func newEscalationsView(res *Escalations) *archivedincidentviews.EscalationsView {
	vres := &archivedincidentviews.EscalationsView{
		Status:     &res.Status,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
	}
	if res.Escalations != nil {
		vres.Escalations = make([]*archivedincidentviews.EscalationView, len(res.Escalations))
		for i, val := range res.Escalations {
			vres.Escalations[i] = transformEscalationToArchivedincidentviewsEscalationView(val)
		}
	}
	return vres
}

// newEscalation converts projected type Escalation to service type Escalation.
func newEscalation(vres *archivedincidentviews.EscalationView) *Escalation {
	res := &Escalation{}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Actions != nil {
		res.Actions = make([]*EscalationAction, len(vres.Actions))
		for i, val := range vres.Actions {
			res.Actions[i] = transformArchivedincidentviewsEscalationActionViewToEscalationAction(val)
		}
	}
	return res
}

// newEscalationView projects result type Escalation to projected type
// EscalationView using the "default" view.
func newEscalationView(res *Escalation) *archivedincidentviews.EscalationView {
	vres := &archivedincidentviews.EscalationView{
		Status: &res.Status,
		Name:   &res.Name,
	}
	if res.Actions != nil {
		vres.Actions = make([]*archivedincidentviews.EscalationActionView, len(res.Actions))
		for i, val := range res.Actions {
			vres.Actions[i] = transformEscalationActionToArchivedincidentviewsEscalationActionView(val)
		}
	}
	return vres
}

// newEscalationAction converts projected type EscalationAction to service type
// EscalationAction.
func newEscalationAction(vres *archivedincidentviews.EscalationActionView) *EscalationAction {
	res := &EscalationAction{
		StartedAt:   vres.StartedAt,
		FinishedAt:  vres.FinishedAt,
		Error:       vres.Error,
		ProcessHref: vres.ProcessHref,
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.ApprovalRequest != nil {
		res.ApprovalRequest = newApprovalRequestExtended(vres.ApprovalRequest)
	}
	return res
}

// newEscalationActionView projects result type EscalationAction to projected
// type EscalationActionView using the "default" view.
func newEscalationActionView(res *EscalationAction) *archivedincidentviews.EscalationActionView {
	vres := &archivedincidentviews.EscalationActionView{
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   res.StartedAt,
		FinishedAt:  res.FinishedAt,
		Error:       res.Error,
		ProcessHref: res.ProcessHref,
	}
	if res.ApprovalRequest != nil {
		vres.ApprovalRequest = newApprovalRequestViewExtended(res.ApprovalRequest)
	}
	return vres
}

// newApprovalRequest converts projected type ApprovalRequest to service type
// ApprovalRequest.
func newApprovalRequest(vres *archivedincidentviews.ApprovalRequestView) *ApprovalRequest {
	res := &ApprovalRequest{
		Label:       vres.Label,
		Description: vres.Description,
		CreatedAt:   vres.CreatedAt,
		UpdatedAt:   vres.UpdatedAt,
		Status:      vres.Status,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.ProjectID != nil {
		res.ProjectID = *vres.ProjectID
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Subject != nil {
		res.Subject = transformArchivedincidentviewsApprovalSubjectToApprovalSubject(vres.Subject)
	}
	return res
}

// newApprovalRequestExtended converts projected type ApprovalRequest to
// service type ApprovalRequest.
func newApprovalRequestExtended(vres *archivedincidentviews.ApprovalRequestView) *ApprovalRequest {
	res := &ApprovalRequest{
		Label:         vres.Label,
		Description:   vres.Description,
		CreatedAt:     vres.CreatedAt,
		UpdatedAt:     vres.UpdatedAt,
		Status:        vres.Status,
		ApprovedAt:    vres.ApprovedAt,
		DenialComment: vres.DenialComment,
		DeniedAt:      vres.DeniedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.ProjectID != nil {
		res.ProjectID = *vres.ProjectID
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Subject != nil {
		res.Subject = transformArchivedincidentviewsApprovalSubjectToApprovalSubject(vres.Subject)
	}
	if vres.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(vres.Parameters))
		for key, val := range vres.Parameters {
			tk := key
			res.Parameters[tk] = transformArchivedincidentviewsParameterViewToParameter(val)
		}
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = transformArchivedincidentviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if vres.ApprovedBy != nil {
		res.ApprovedBy = transformArchivedincidentviewsUserViewToUser(vres.ApprovedBy)
	}
	if vres.DeniedBy != nil {
		res.DeniedBy = transformArchivedincidentviewsUserViewToUser(vres.DeniedBy)
	}
	return res
}

// newApprovalRequestView projects result type ApprovalRequest to projected
// type ApprovalRequestView using the "default" view.
func newApprovalRequestView(res *ApprovalRequest) *archivedincidentviews.ApprovalRequestView {
	vres := &archivedincidentviews.ApprovalRequestView{
		ID:          &res.ID,
		ProjectID:   &res.ProjectID,
		Href:        &res.Href,
		Label:       res.Label,
		Description: res.Description,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		Status:      res.Status,
		Kind:        &res.Kind,
	}
	if res.Subject != nil {
		vres.Subject = transformApprovalSubjectToArchivedincidentviewsApprovalSubject(res.Subject)
	}
	return vres
}

// newApprovalRequestViewExtended projects result type ApprovalRequest to
// projected type ApprovalRequestView using the "extended" view.
func newApprovalRequestViewExtended(res *ApprovalRequest) *archivedincidentviews.ApprovalRequestView {
	vres := &archivedincidentviews.ApprovalRequestView{
		ID:            &res.ID,
		ProjectID:     &res.ProjectID,
		Href:          &res.Href,
		Label:         res.Label,
		Description:   res.Description,
		CreatedAt:     res.CreatedAt,
		UpdatedAt:     res.UpdatedAt,
		Status:        res.Status,
		ApprovedAt:    res.ApprovedAt,
		DenialComment: res.DenialComment,
		DeniedAt:      res.DeniedAt,
		Kind:          &res.Kind,
	}
	if res.Subject != nil {
		vres.Subject = transformApprovalSubjectToArchivedincidentviewsApprovalSubject(res.Subject)
	}
	if res.Parameters != nil {
		vres.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			vres.Parameters[tk] = transformParameterToArchivedincidentviewsParameterView(val)
		}
	}
	if res.Options != nil {
		vres.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = transformConfigurationOptionToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	if res.ApprovedBy != nil {
		vres.ApprovedBy = transformUserToArchivedincidentviewsUserView(res.ApprovedBy)
	}
	if res.DeniedBy != nil {
		vres.DeniedBy = transformUserToArchivedincidentviewsUserView(res.DeniedBy)
	}
	return vres
}

// newResolutions converts projected type Resolutions to service type
// Resolutions.
func newResolutions(vres *archivedincidentviews.ResolutionsView) *Resolutions {
	res := &Resolutions{
		StartedAt:  vres.StartedAt,
		FinishedAt: vres.FinishedAt,
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Resolutions != nil {
		res.Resolutions = make([]*Resolution, len(vres.Resolutions))
		for i, val := range vres.Resolutions {
			res.Resolutions[i] = transformArchivedincidentviewsResolutionViewToResolution(val)
		}
	}
	return res
}

// newResolutionsView projects result type Resolutions to projected type
// ResolutionsView using the "default" view.
func newResolutionsView(res *Resolutions) *archivedincidentviews.ResolutionsView {
	vres := &archivedincidentviews.ResolutionsView{
		Status:     &res.Status,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
	}
	if res.Resolutions != nil {
		vres.Resolutions = make([]*archivedincidentviews.ResolutionView, len(res.Resolutions))
		for i, val := range res.Resolutions {
			vres.Resolutions[i] = transformResolutionToArchivedincidentviewsResolutionView(val)
		}
	}
	return vres
}

// newResolution converts projected type Resolution to service type Resolution.
func newResolution(vres *archivedincidentviews.ResolutionView) *Resolution {
	res := &Resolution{}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Actions != nil {
		res.Actions = make([]*ResolutionAction, len(vres.Actions))
		for i, val := range vres.Actions {
			res.Actions[i] = transformArchivedincidentviewsResolutionActionViewToResolutionAction(val)
		}
	}
	return res
}

// newResolutionView projects result type Resolution to projected type
// ResolutionView using the "default" view.
func newResolutionView(res *Resolution) *archivedincidentviews.ResolutionView {
	vres := &archivedincidentviews.ResolutionView{
		Status: &res.Status,
		Name:   &res.Name,
	}
	if res.Actions != nil {
		vres.Actions = make([]*archivedincidentviews.ResolutionActionView, len(res.Actions))
		for i, val := range res.Actions {
			vres.Actions[i] = transformResolutionActionToArchivedincidentviewsResolutionActionView(val)
		}
	}
	return vres
}

// newResolutionAction converts projected type ResolutionAction to service type
// ResolutionAction.
func newResolutionAction(vres *archivedincidentviews.ResolutionActionView) *ResolutionAction {
	res := &ResolutionAction{
		StartedAt:   vres.StartedAt,
		FinishedAt:  vres.FinishedAt,
		Error:       vres.Error,
		ProcessHref: vres.ProcessHref,
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.ApprovalRequest != nil {
		res.ApprovalRequest = newApprovalRequestExtended(vres.ApprovalRequest)
	}
	return res
}

// newResolutionActionView projects result type ResolutionAction to projected
// type ResolutionActionView using the "default" view.
func newResolutionActionView(res *ResolutionAction) *archivedincidentviews.ResolutionActionView {
	vres := &archivedincidentviews.ResolutionActionView{
		Type:        &res.Type,
		Status:      &res.Status,
		StartedAt:   res.StartedAt,
		FinishedAt:  res.FinishedAt,
		Error:       res.Error,
		ProcessHref: res.ProcessHref,
	}
	if res.ApprovalRequest != nil {
		vres.ApprovalRequest = newApprovalRequestViewExtended(res.ApprovalRequest)
	}
	return vres
}

// transformArchivedincidentviewsProjectViewToProject builds a value of type
// *Project from a value of type *archivedincidentviews.ProjectView.
func transformArchivedincidentviewsProjectViewToProject(v *archivedincidentviews.ProjectView) *Project {
	if v == nil {
		return nil
	}
	res := &Project{
		ID:      *v.ID,
		Name:    *v.Name,
		OrgID:   *v.OrgID,
		OrgName: *v.OrgName,
	}

	return res
}

// transformArchivedincidentviewsUserViewToUser builds a value of type *User
// from a value of type *archivedincidentviews.UserView.
func transformArchivedincidentviewsUserViewToUser(v *archivedincidentviews.UserView) *User {
	if v == nil {
		return nil
	}
	res := &User{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// transformArchivedincidentviewsConfigurationOptionViewToConfigurationOption
// builds a value of type *ConfigurationOption from a value of type
// *archivedincidentviews.ConfigurationOptionView.
func transformArchivedincidentviewsConfigurationOptionViewToConfigurationOption(v *archivedincidentviews.ConfigurationOptionView) *ConfigurationOption {
	if v == nil {
		return nil
	}
	res := &ConfigurationOption{
		Name:  *v.Name,
		Label: *v.Label,
		Type:  *v.Type,
		Value: v.Value,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}

	return res
}

// transformProjectToArchivedincidentviewsProjectView builds a value of type
// *archivedincidentviews.ProjectView from a value of type *Project.
func transformProjectToArchivedincidentviewsProjectView(v *Project) *archivedincidentviews.ProjectView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ProjectView{
		ID:      &v.ID,
		Name:    &v.Name,
		OrgID:   &v.OrgID,
		OrgName: &v.OrgName,
	}

	return res
}

// transformUserToArchivedincidentviewsUserView builds a value of type
// *archivedincidentviews.UserView from a value of type *User.
func transformUserToArchivedincidentviewsUserView(v *User) *archivedincidentviews.UserView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.UserView{
		ID:    &v.ID,
		Email: &v.Email,
		Name:  &v.Name,
	}

	return res
}

// transformConfigurationOptionToArchivedincidentviewsConfigurationOptionView
// builds a value of type *archivedincidentviews.ConfigurationOptionView from a
// value of type *ConfigurationOption.
func transformConfigurationOptionToArchivedincidentviewsConfigurationOptionView(v *ConfigurationOption) *archivedincidentviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ConfigurationOptionView{
		Name:   &v.Name,
		Label:  &v.Label,
		Type:   &v.Type,
		Value:  v.Value,
		NoEcho: &v.NoEcho,
	}

	return res
}

// transformArchivedincidentviewsPublishedTemplateViewToPublishedTemplate
// builds a value of type *PublishedTemplate from a value of type
// *archivedincidentviews.PublishedTemplateView.
func transformArchivedincidentviewsPublishedTemplateViewToPublishedTemplate(v *archivedincidentviews.PublishedTemplateView) *PublishedTemplate {
	if v == nil {
		return nil
	}
	res := &PublishedTemplate{
		ID:                        *v.ID,
		Name:                      *v.Name,
		OrgID:                     v.OrgID,
		ProjectID:                 v.ProjectID,
		PolicyTemplateID:          v.PolicyTemplateID,
		PolicyTemplateURL:         v.PolicyTemplateURL,
		PolicyTemplateFingerprint: v.PolicyTemplateFingerprint,
		RsPtVer:                   v.RsPtVer,
		ShortDescription:          v.ShortDescription,
		LongDescription:           v.LongDescription,
		DocLink:                   v.DocLink,
		DefaultFrequency:          v.DefaultFrequency,
		Href:                      *v.Href,
		Filename:                  v.Filename,
		Source:                    v.Source,
		Fingerprint:               *v.Fingerprint,
		Category:                  v.Category,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
		Severity:                  v.Severity,
		BuiltIn:                   v.BuiltIn,
		Hidden:                    v.Hidden,
		HiddenAt:                  v.HiddenAt,
		Tenancy:                   v.Tenancy,
		Kind:                      *v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = transformArchivedincidentviewsUserViewToUser(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = transformArchivedincidentviewsUserViewToUser(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*Permission, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = transformArchivedincidentviewsPermissionViewToPermission(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = transformArchivedincidentviewsParameterViewToParameter(val)
		}
	}
	if v.HiddenBy != nil {
		res.HiddenBy = transformArchivedincidentviewsUserViewToUser(v.HiddenBy)
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*Credentials, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = transformArchivedincidentviewsCredentialsViewToCredentials(val)
		}
	}

	return res
}

// transformArchivedincidentviewsPermissionViewToPermission builds a value of
// type *Permission from a value of type *archivedincidentviews.PermissionView.
func transformArchivedincidentviewsPermissionViewToPermission(v *archivedincidentviews.PermissionView) *Permission {
	if v == nil {
		return nil
	}
	res := &Permission{
		Name:  *v.Name,
		Label: v.Label,
	}
	if v.Resources != nil {
		res.Resources = make([]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = val
		}
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}

	return res
}

// transformArchivedincidentviewsParameterViewToParameter builds a value of
// type *Parameter from a value of type *archivedincidentviews.ParameterView.
func transformArchivedincidentviewsParameterViewToParameter(v *archivedincidentviews.ParameterView) *Parameter {
	if v == nil {
		return nil
	}
	res := &Parameter{
		Name:                  *v.Name,
		Type:                  *v.Type,
		Label:                 *v.Label,
		Index:                 *v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = transformArchivedincidentviewsRegexpViewToRegexp(v.AllowedPattern)
	}

	return res
}

// transformArchivedincidentviewsRegexpViewToRegexp builds a value of type
// *Regexp from a value of type *archivedincidentviews.RegexpView.
func transformArchivedincidentviewsRegexpViewToRegexp(v *archivedincidentviews.RegexpView) *Regexp {
	if v == nil {
		return nil
	}
	res := &Regexp{
		Pattern: *v.Pattern,
		Options: v.Options,
	}

	return res
}

// transformArchivedincidentviewsCredentialsViewToCredentials builds a value of
// type *Credentials from a value of type
// *archivedincidentviews.CredentialsView.
func transformArchivedincidentviewsCredentialsViewToCredentials(v *archivedincidentviews.CredentialsView) *Credentials {
	if v == nil {
		return nil
	}
	res := &Credentials{
		Name:        *v.Name,
		Label:       *v.Label,
		Description: v.Description,
	}
	if v.Schemes != nil {
		res.Schemes = make([]string, len(v.Schemes))
		for i, val := range v.Schemes {
			res.Schemes[i] = val
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*CredentialsTag, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = transformArchivedincidentviewsCredentialsTagViewToCredentialsTag(val)
		}
	}

	return res
}

// transformArchivedincidentviewsCredentialsTagViewToCredentialsTag builds a
// value of type *CredentialsTag from a value of type
// *archivedincidentviews.CredentialsTagView.
func transformArchivedincidentviewsCredentialsTagViewToCredentialsTag(v *archivedincidentviews.CredentialsTagView) *CredentialsTag {
	if v == nil {
		return nil
	}
	res := &CredentialsTag{
		Key:   *v.Key,
		Value: *v.Value,
	}

	return res
}

// transformPublishedTemplateToArchivedincidentviewsPublishedTemplateView
// builds a value of type *archivedincidentviews.PublishedTemplateView from a
// value of type *PublishedTemplate.
func transformPublishedTemplateToArchivedincidentviewsPublishedTemplateView(v *PublishedTemplate) *archivedincidentviews.PublishedTemplateView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.PublishedTemplateView{
		ID:                        &v.ID,
		Name:                      &v.Name,
		OrgID:                     v.OrgID,
		ProjectID:                 v.ProjectID,
		PolicyTemplateID:          v.PolicyTemplateID,
		PolicyTemplateURL:         v.PolicyTemplateURL,
		PolicyTemplateFingerprint: v.PolicyTemplateFingerprint,
		RsPtVer:                   v.RsPtVer,
		ShortDescription:          v.ShortDescription,
		LongDescription:           v.LongDescription,
		DocLink:                   v.DocLink,
		DefaultFrequency:          v.DefaultFrequency,
		Href:                      &v.Href,
		Filename:                  v.Filename,
		Source:                    v.Source,
		Fingerprint:               &v.Fingerprint,
		Category:                  v.Category,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
		Severity:                  v.Severity,
		BuiltIn:                   v.BuiltIn,
		Hidden:                    v.Hidden,
		HiddenAt:                  v.HiddenAt,
		Tenancy:                   v.Tenancy,
		Kind:                      &v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = transformUserToArchivedincidentviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = transformUserToArchivedincidentviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*archivedincidentviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = transformPermissionToArchivedincidentviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = transformParameterToArchivedincidentviewsParameterView(val)
		}
	}
	if v.HiddenBy != nil {
		res.HiddenBy = transformUserToArchivedincidentviewsUserView(v.HiddenBy)
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*archivedincidentviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = transformCredentialsToArchivedincidentviewsCredentialsView(val)
		}
	}

	return res
}

// transformPermissionToArchivedincidentviewsPermissionView builds a value of
// type *archivedincidentviews.PermissionView from a value of type *Permission.
func transformPermissionToArchivedincidentviewsPermissionView(v *Permission) *archivedincidentviews.PermissionView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.PermissionView{
		Name:  &v.Name,
		Label: v.Label,
	}
	if v.Resources != nil {
		res.Resources = make([]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = val
		}
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}

	return res
}

// transformParameterToArchivedincidentviewsParameterView builds a value of
// type *archivedincidentviews.ParameterView from a value of type *Parameter.
func transformParameterToArchivedincidentviewsParameterView(v *Parameter) *archivedincidentviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ParameterView{
		Name:                  &v.Name,
		Type:                  &v.Type,
		Label:                 &v.Label,
		Index:                 &v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                &v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = transformRegexpToArchivedincidentviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// transformRegexpToArchivedincidentviewsRegexpView builds a value of type
// *archivedincidentviews.RegexpView from a value of type *Regexp.
func transformRegexpToArchivedincidentviewsRegexpView(v *Regexp) *archivedincidentviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.RegexpView{
		Pattern: &v.Pattern,
		Options: v.Options,
	}

	return res
}

// transformCredentialsToArchivedincidentviewsCredentialsView builds a value of
// type *archivedincidentviews.CredentialsView from a value of type
// *Credentials.
func transformCredentialsToArchivedincidentviewsCredentialsView(v *Credentials) *archivedincidentviews.CredentialsView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.CredentialsView{
		Name:        &v.Name,
		Label:       &v.Label,
		Description: v.Description,
	}
	if v.Schemes != nil {
		res.Schemes = make([]string, len(v.Schemes))
		for i, val := range v.Schemes {
			res.Schemes[i] = val
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*archivedincidentviews.CredentialsTagView, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = transformCredentialsTagToArchivedincidentviewsCredentialsTagView(val)
		}
	}

	return res
}

// transformCredentialsTagToArchivedincidentviewsCredentialsTagView builds a
// value of type *archivedincidentviews.CredentialsTagView from a value of type
// *CredentialsTag.
func transformCredentialsTagToArchivedincidentviewsCredentialsTagView(v *CredentialsTag) *archivedincidentviews.CredentialsTagView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.CredentialsTagView{
		Key:   &v.Key,
		Value: &v.Value,
	}

	return res
}

// transformArchivedincidentviewsEscalationViewToEscalation builds a value of
// type *Escalation from a value of type *archivedincidentviews.EscalationView.
func transformArchivedincidentviewsEscalationViewToEscalation(v *archivedincidentviews.EscalationView) *Escalation {
	if v == nil {
		return nil
	}
	res := &Escalation{
		Status: *v.Status,
		Name:   *v.Name,
	}
	if v.Actions != nil {
		res.Actions = make([]*EscalationAction, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = transformArchivedincidentviewsEscalationActionViewToEscalationAction(val)
		}
	}

	return res
}

// transformArchivedincidentviewsEscalationActionViewToEscalationAction builds
// a value of type *EscalationAction from a value of type
// *archivedincidentviews.EscalationActionView.
func transformArchivedincidentviewsEscalationActionViewToEscalationAction(v *archivedincidentviews.EscalationActionView) *EscalationAction {
	res := &EscalationAction{
		Type:        *v.Type,
		Status:      *v.Status,
		StartedAt:   v.StartedAt,
		FinishedAt:  v.FinishedAt,
		Error:       v.Error,
		ProcessHref: v.ProcessHref,
	}
	if v.ApprovalRequest != nil {
		res.ApprovalRequest = transformArchivedincidentviewsApprovalRequestViewToApprovalRequest(v.ApprovalRequest)
	}

	return res
}

// transformArchivedincidentviewsApprovalRequestViewToApprovalRequest builds a
// value of type *ApprovalRequest from a value of type
// *archivedincidentviews.ApprovalRequestView.
func transformArchivedincidentviewsApprovalRequestViewToApprovalRequest(v *archivedincidentviews.ApprovalRequestView) *ApprovalRequest {
	if v == nil {
		return nil
	}
	res := &ApprovalRequest{
		ID:            *v.ID,
		ProjectID:     *v.ProjectID,
		Href:          *v.Href,
		Label:         v.Label,
		Description:   v.Description,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
		Status:        v.Status,
		ApprovedAt:    v.ApprovedAt,
		DenialComment: v.DenialComment,
		DeniedAt:      v.DeniedAt,
		Kind:          *v.Kind,
	}
	if v.Subject != nil {
		res.Subject = transformArchivedincidentviewsApprovalSubjectToApprovalSubject(v.Subject)
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = transformArchivedincidentviewsParameterViewToParameter(val)
		}
	}
	if v.Options != nil {
		res.Options = make([]*ConfigurationOption, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = transformArchivedincidentviewsConfigurationOptionViewToConfigurationOption(val)
		}
	}
	if v.ApprovedBy != nil {
		res.ApprovedBy = transformArchivedincidentviewsUserViewToUser(v.ApprovedBy)
	}
	if v.DeniedBy != nil {
		res.DeniedBy = transformArchivedincidentviewsUserViewToUser(v.DeniedBy)
	}

	return res
}

// transformArchivedincidentviewsApprovalSubjectToApprovalSubject builds a
// value of type *ApprovalSubject from a value of type
// *archivedincidentviews.ApprovalSubject.
func transformArchivedincidentviewsApprovalSubjectToApprovalSubject(v *archivedincidentviews.ApprovalSubject) *ApprovalSubject {
	res := &ApprovalSubject{
		Kind: *v.Kind,
		Href: *v.Href,
	}

	return res
}

// transformEscalationToArchivedincidentviewsEscalationView builds a value of
// type *archivedincidentviews.EscalationView from a value of type *Escalation.
func transformEscalationToArchivedincidentviewsEscalationView(v *Escalation) *archivedincidentviews.EscalationView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.EscalationView{
		Status: &v.Status,
		Name:   &v.Name,
	}
	if v.Actions != nil {
		res.Actions = make([]*archivedincidentviews.EscalationActionView, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = transformEscalationActionToArchivedincidentviewsEscalationActionView(val)
		}
	}

	return res
}

// transformEscalationActionToArchivedincidentviewsEscalationActionView builds
// a value of type *archivedincidentviews.EscalationActionView from a value of
// type *EscalationAction.
func transformEscalationActionToArchivedincidentviewsEscalationActionView(v *EscalationAction) *archivedincidentviews.EscalationActionView {
	res := &archivedincidentviews.EscalationActionView{
		Type:        &v.Type,
		Status:      &v.Status,
		StartedAt:   v.StartedAt,
		FinishedAt:  v.FinishedAt,
		Error:       v.Error,
		ProcessHref: v.ProcessHref,
	}
	if v.ApprovalRequest != nil {
		res.ApprovalRequest = transformApprovalRequestToArchivedincidentviewsApprovalRequestView(v.ApprovalRequest)
	}

	return res
}

// transformApprovalRequestToArchivedincidentviewsApprovalRequestView builds a
// value of type *archivedincidentviews.ApprovalRequestView from a value of
// type *ApprovalRequest.
func transformApprovalRequestToArchivedincidentviewsApprovalRequestView(v *ApprovalRequest) *archivedincidentviews.ApprovalRequestView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ApprovalRequestView{
		ID:            &v.ID,
		ProjectID:     &v.ProjectID,
		Href:          &v.Href,
		Label:         v.Label,
		Description:   v.Description,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
		Status:        v.Status,
		ApprovedAt:    v.ApprovedAt,
		DenialComment: v.DenialComment,
		DeniedAt:      v.DeniedAt,
		Kind:          &v.Kind,
	}
	if v.Subject != nil {
		res.Subject = transformApprovalSubjectToArchivedincidentviewsApprovalSubject(v.Subject)
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = transformParameterToArchivedincidentviewsParameterView(val)
		}
	}
	if v.Options != nil {
		res.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = transformConfigurationOptionToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	if v.ApprovedBy != nil {
		res.ApprovedBy = transformUserToArchivedincidentviewsUserView(v.ApprovedBy)
	}
	if v.DeniedBy != nil {
		res.DeniedBy = transformUserToArchivedincidentviewsUserView(v.DeniedBy)
	}

	return res
}

// transformApprovalSubjectToArchivedincidentviewsApprovalSubject builds a
// value of type *archivedincidentviews.ApprovalSubject from a value of type
// *ApprovalSubject.
func transformApprovalSubjectToArchivedincidentviewsApprovalSubject(v *ApprovalSubject) *archivedincidentviews.ApprovalSubject {
	res := &archivedincidentviews.ApprovalSubject{
		Kind: &v.Kind,
		Href: &v.Href,
	}

	return res
}

// transformArchivedincidentviewsResolutionViewToResolution builds a value of
// type *Resolution from a value of type *archivedincidentviews.ResolutionView.
func transformArchivedincidentviewsResolutionViewToResolution(v *archivedincidentviews.ResolutionView) *Resolution {
	if v == nil {
		return nil
	}
	res := &Resolution{
		Status: *v.Status,
		Name:   *v.Name,
	}
	if v.Actions != nil {
		res.Actions = make([]*ResolutionAction, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = transformArchivedincidentviewsResolutionActionViewToResolutionAction(val)
		}
	}

	return res
}

// transformArchivedincidentviewsResolutionActionViewToResolutionAction builds
// a value of type *ResolutionAction from a value of type
// *archivedincidentviews.ResolutionActionView.
func transformArchivedincidentviewsResolutionActionViewToResolutionAction(v *archivedincidentviews.ResolutionActionView) *ResolutionAction {
	res := &ResolutionAction{
		Type:        *v.Type,
		Status:      *v.Status,
		StartedAt:   v.StartedAt,
		FinishedAt:  v.FinishedAt,
		Error:       v.Error,
		ProcessHref: v.ProcessHref,
	}
	if v.ApprovalRequest != nil {
		res.ApprovalRequest = transformArchivedincidentviewsApprovalRequestViewToApprovalRequest(v.ApprovalRequest)
	}

	return res
}

// transformResolutionToArchivedincidentviewsResolutionView builds a value of
// type *archivedincidentviews.ResolutionView from a value of type *Resolution.
func transformResolutionToArchivedincidentviewsResolutionView(v *Resolution) *archivedincidentviews.ResolutionView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ResolutionView{
		Status: &v.Status,
		Name:   &v.Name,
	}
	if v.Actions != nil {
		res.Actions = make([]*archivedincidentviews.ResolutionActionView, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = transformResolutionActionToArchivedincidentviewsResolutionActionView(val)
		}
	}

	return res
}

// transformResolutionActionToArchivedincidentviewsResolutionActionView builds
// a value of type *archivedincidentviews.ResolutionActionView from a value of
// type *ResolutionAction.
func transformResolutionActionToArchivedincidentviewsResolutionActionView(v *ResolutionAction) *archivedincidentviews.ResolutionActionView {
	res := &archivedincidentviews.ResolutionActionView{
		Type:        &v.Type,
		Status:      &v.Status,
		StartedAt:   v.StartedAt,
		FinishedAt:  v.FinishedAt,
		Error:       v.Error,
		ProcessHref: v.ProcessHref,
	}
	if v.ApprovalRequest != nil {
		res.ApprovalRequest = transformApprovalRequestToArchivedincidentviewsApprovalRequestView(v.ApprovalRequest)
	}

	return res
}
