// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ArchivedIncident views
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ArchivedIncident is the viewed result type that is projected based on a view.
type ArchivedIncident struct {
	// Type to project
	Projected *ArchivedIncidentView
	// View to render
	View string
}

// ArchivedIncidentList is the viewed result type that is projected based on a
// view.
type ArchivedIncidentList struct {
	// Type to project
	Projected *ArchivedIncidentListView
	// View to render
	View string
}

// Escalations is the viewed result type that is projected based on a view.
type Escalations struct {
	// Type to project
	Projected *EscalationsView
	// View to render
	View string
}

// Resolutions is the viewed result type that is projected based on a view.
type Resolutions struct {
	// Type to project
	Projected *ResolutionsView
	// View to render
	View string
}

// ArchivedIncidentView is a type that runs validations on a projected type.
type ArchivedIncidentView struct {
	// id is the ID of the archived incident, must be unique in the project.
	ID *string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectView
	// href is the href of the archived incident.
	Href *string
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyView
	// summary is a summary of the incident.
	Summary *string
	// message is a description of the incident.
	Detail *string
	// data is the data about the resources that violate the policy.
	Data interface{}
	// The number of items in violation data.
	ViolationDataCount *uint
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string
	// resolved_by is the RightScale user that resolved the incident if it was
	// resolved manually.
	ResolvedBy *UserView
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string
	// state represents the current handling status of the incident.
	State *string
	// severity defines the severity level of the incident.
	Severity *string
	// category is the type categorization of the incident.
	Category *string
	// options lists the configuration options used to parameterize the policy that
	// created the incident.
	Options []*ConfigurationOptionView
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident should trigger escalation actions.
	DryRun *bool
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool
	// kind is "gov#archived_incident".
	Kind *string
	// etag is an HTTP ETag for the incident.
	Etag *string
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
}

// ProjectView is a type that runs validations on a projected type.
type ProjectView struct {
	// id is the Project ID
	ID *uint
	// name is the Project Name
	Name *string
	// org_id is the RightScale Organization ID
	OrgID *uint
	// org_name is the RightScale Organization Name
	OrgName *string
}

// AppliedPolicyView is a type that runs validations on a projected type.
type AppliedPolicyView struct {
	// id identifies an applied policy by ID.
	ID *string
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string
	// name provides a name for this specific application of the policy.
	Name *string
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectView
	// href is the href of the applied policy.
	Href *string
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateView
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateView
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// created_by is the RightScale user that applied the policy.
	CreatedBy *UserView
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string
	// category is the type categorization of the applied policy.
	Category *string
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionView
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string
	// status is used to identify the current status of the applied policy.
	Status *string
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string
	// kind is "gov#applied_policy".
	Kind *string
}

// PolicyTemplateView is a type that runs validations on a projected type.
type PolicyTemplateView struct {
	// id identifies a policy template by ID.
	ID *string
	// name is the unique name of the policy template in the project.
	Name *string
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the policy template.
	ShortDescription *string
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the href of the policy template.
	Href *string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is the policy template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint *string
	// category is the type categorization of the policy template.
	Category *string
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserView
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserView
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionView
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterView
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsView
	// kind is "gov#policy_template".
	Kind *string
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID of user
	ID *uint
	// email of user
	Email *string
	// name of user, usually of the form 'First Last'
	Name *string
}

// PermissionView is a type that runs validations on a projected type.
type PermissionView struct {
	// Name of a permission
	Name *string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// ParameterView is a type that runs validations on a projected type.
type ParameterView struct {
	// Name of the parameter
	Name *string `json:"name"`
	// Type of the parameter
	Type *string `json:"type"`
	// Label to show in the UI
	Label *string `json:"label"`
	// The index of this parameter in the list
	Index *uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho *bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpView `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpView is a type that runs validations on a projected type.
type RegexpView struct {
	// Pattern is the regular expression pattern.
	Pattern *string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// CredentialsView is a type that runs validations on a projected type.
type CredentialsView struct {
	// Name in policy template source code
	Name *string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label *string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTagView `json:"tags"`
}

// CredentialsTagView is a type that runs validations on a projected type.
type CredentialsTagView struct {
	// Key is the tag key.
	Key *string `json:"key"`
	// Value is the tag value.
	Value *string `json:"value"`
}

// PublishedTemplateView is a type that runs validations on a projected type.
type PublishedTemplateView struct {
	// id identifies a published template by ID.
	ID *string
	// name is the unique name of the published template in the organization.
	Name *string
	// org_id is the ID of the organization that the published template belongs to.
	OrgID *uint
	// project_id is the ID of the project that the published template is published
	// from.
	ProjectID *uint
	// policy_template_id is the ID of the policy template from which the published
	// template originated.
	PolicyTemplateID *string
	// policy_template_url is the full URL to the policy template from which the
	// published template originated.
	PolicyTemplateURL *string
	// policy_template_fingerprint is fingerprint of the policy template. It is
	// used to determine if the policy template that this was published from is
	// outdated.
	PolicyTemplateFingerprint *string
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the published template.
	ShortDescription *string
	// long_description is the long description of the published template. The
	// content can be markdown.
	LongDescription *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the self-referential href of the published template.
	Href *string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is published template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint *string
	// category is the type categorization of the published template.
	Category *string
	// created_by is the RightScale user that created the published template.
	CreatedBy *UserView
	// created_at is the published template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *UserView
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionView
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterView
	// severity defines the severity level of incidents raised from this published
	// template.
	Severity *string
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool
	// hidden is a flag to indicate whether the published template is hidden.
	Hidden *bool
	// hidden_by is the RightScale user that marked the published template as
	// hidden.
	HiddenBy *UserView
	// hidden_at is the hidden at timestamp in RFC3339 format.
	HiddenAt *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsView
	// kind is "gov#published_template".
	Kind *string
}

// ConfigurationOptionView is a type that runs validations on a projected type.
type ConfigurationOptionView struct {
	// name of option
	Name *string
	// label of option
	Label *string
	// type of option
	Type *string
	// value of option
	Value interface{}
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho *bool
}

// ArchivedIncidentListView is a type that runs validations on a projected type.
type ArchivedIncidentListView struct {
	// count is the number of incidents in the list.
	Count *uint
	// etag is an HTTP ETag for the incident list.
	Etag *string
	// items is the array of archived incidents.
	Items ArchivedIncidentCollectionView
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#archived_incident_list".
	Kind *string
}

// ArchivedIncidentCollectionView is a type that runs validations on a
// projected type.
type ArchivedIncidentCollectionView []*ArchivedIncidentView

// EscalationsView is a type that runs validations on a projected type.
type EscalationsView struct {
	// status is the status of all of the escalations.
	Status *string
	// escalations is the set of escalations.
	Escalations []*EscalationView
	// started_at is the time when the incident handling is started.
	StartedAt *string
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string
}

// EscalationView is a type that runs validations on a projected type.
type EscalationView struct {
	// status is the status of the set of escalation actions.
	Status *string
	// name is the name of the escalation.
	Name *string
	// actions is the list of individual actions.
	Actions []*EscalationActionView
}

// EscalationActionView is a type that runs validations on a projected type.
type EscalationActionView struct {
	// type is the type of the action.
	Type *string
	// status is the status of the action.
	Status *string
	// started_at is the time when the action was started.
	StartedAt *string
	// finished_at is the time when the action was finished.
	FinishedAt *string
	// error is any error occurred when handling the action.
	Error *string
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequestView
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string
}

// ApprovalRequestView is a type that runs validations on a projected type.
type ApprovalRequestView struct {
	// id identifies an approval request by ID.
	ID *string
	// project_id is the ID of the project where this approval request is created.
	ProjectID *uint
	// href is the href of the approval request
	Href *string
	// label is a short title for this approval request
	Label *string
	// description describes the details for this approval request.
	Description *string
	// subject is the subject of the approval.
	Subject *ApprovalSubject
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterView
	// status is the status of this approval request.
	Status *string
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionView
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserView
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string
	// denied_by is the RightScale user that denied this approval request.
	DeniedBy *UserView
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string
	// kind is "gov#approval_request".
	Kind *string
}

// ApprovalSubject is a type that runs validations on a projected type.
type ApprovalSubject struct {
	// kind is the kind of subject
	Kind *string
	// href is the href of the subject.
	Href *string
}

// ResolutionsView is a type that runs validations on a projected type.
type ResolutionsView struct {
	// status is the status of all of the resolutions.
	Status *string
	// resolutions is the set of resolutions.
	Resolutions []*ResolutionView
	// started_at is the time when the incident handling is started.
	StartedAt *string
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string
}

// ResolutionView is a type that runs validations on a projected type.
type ResolutionView struct {
	// status is the status of the set of resolution actions.
	Status *string
	// name is the name of the resolution.
	Name *string
	// actions is the list of individual actions.
	Actions []*ResolutionActionView
}

// ResolutionActionView is a type that runs validations on a projected type.
type ResolutionActionView struct {
	// type is the type of the action.
	Type *string
	// status is the status of the action.
	Status *string
	// started_at is the time when the action was started.
	StartedAt *string
	// finished_at is the time when the action was finished.
	FinishedAt *string
	// error is any error occurred when handling the action.
	Error *string
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequestView
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string
}

var (
	// ArchivedIncidentMap is a map of attribute names in result type
	// ArchivedIncident indexed by view name.
	ArchivedIncidentMap = map[string][]string{
		"default": []string{
			"id",
			"project",
			"href",
			"applied_policy",
			"summary",
			"created_at",
			"updated_at",
			"resolved_at",
			"resolved_by",
			"resolution_message",
			"state",
			"violation_data_count",
			"severity",
			"category",
			"options",
			"dry_run",
			"action_failed",
			"kind",
			"etag",
			"not_modified",
		},
		"extended": []string{
			"id",
			"project",
			"href",
			"applied_policy",
			"summary",
			"detail",
			"created_at",
			"updated_at",
			"resolved_at",
			"resolved_by",
			"resolution_message",
			"state",
			"violation_data_count",
			"severity",
			"category",
			"options",
			"dry_run",
			"action_failed",
			"kind",
			"etag",
			"not_modified",
		},
		"source": []string{
			"id",
			"project",
			"href",
			"applied_policy",
			"kind",
			"etag",
			"not_modified",
		},
	}
	// ArchivedIncidentListMap is a map of attribute names in result type
	// ArchivedIncidentList indexed by view name.
	ArchivedIncidentListMap = map[string][]string{
		"default": []string{
			"count",
			"items",
			"etag",
			"not_modified",
			"kind",
		},
		"extended": []string{
			"count",
			"items",
			"etag",
			"not_modified",
			"kind",
		},
	}
	// EscalationsMap is a map of attribute names in result type Escalations
	// indexed by view name.
	EscalationsMap = map[string][]string{
		"default": []string{
			"status",
			"escalations",
			"started_at",
			"finished_at",
		},
	}
	// ResolutionsMap is a map of attribute names in result type Resolutions
	// indexed by view name.
	ResolutionsMap = map[string][]string{
		"default": []string{
			"status",
			"resolutions",
			"started_at",
			"finished_at",
		},
	}
	// AppliedPolicyMap is a map of attribute names in result type AppliedPolicy
	// indexed by view name.
	AppliedPolicyMap = map[string][]string{
		"default": []string{
			"id",
			"policy_aggregate_id",
			"incident_aggregate_id",
			"name",
			"project",
			"href",
			"policy_template",
			"published_template",
			"description",
			"doc_link",
			"info",
			"created_by",
			"created_at",
			"updated_at",
			"severity",
			"category",
			"frequency",
			"dry_run",
			"skip_approvals",
			"options",
			"credentials",
			"status",
			"error",
			"errored_at",
			"scope",
			"kind",
		},
		"source": []string{
			"id",
			"policy_aggregate_id",
			"incident_aggregate_id",
			"name",
			"project",
			"href",
			"policy_template",
			"published_template",
			"kind",
		},
		"link": []string{
			"id",
			"policy_aggregate_id",
			"incident_aggregate_id",
			"name",
			"href",
			"policy_template",
			"published_template",
			"created_by",
			"created_at",
			"frequency",
			"kind",
		},
	}
	// PolicyTemplateMap is a map of attribute names in result type PolicyTemplate
	// indexed by view name.
	PolicyTemplateMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"project_id",
			"rs_pt_ver",
			"short_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"required_roles",
			"severity",
			"tenancy",
			"kind",
		},
		"extended": []string{
			"id",
			"name",
			"project_id",
			"rs_pt_ver",
			"short_description",
			"long_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"permissions",
			"required_roles",
			"parameters",
			"severity",
			"tenancy",
			"credentials",
			"kind",
		},
		"source": []string{
			"id",
			"name",
			"href",
			"filename",
			"source",
			"fingerprint",
			"kind",
		},
		"link": []string{
			"id",
			"name",
			"href",
			"fingerprint",
			"updated_at",
			"updated_by",
			"kind",
		},
	}
	// PublishedTemplateMap is a map of attribute names in result type
	// PublishedTemplate indexed by view name.
	PublishedTemplateMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"org_id",
			"project_id",
			"policy_template_id",
			"policy_template_url",
			"policy_template_fingerprint",
			"rs_pt_ver",
			"short_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"hidden_by",
			"hidden_at",
			"required_roles",
			"severity",
			"built_in",
			"hidden",
			"tenancy",
			"kind",
		},
		"extended": []string{
			"id",
			"name",
			"org_id",
			"project_id",
			"policy_template_id",
			"policy_template_url",
			"policy_template_fingerprint",
			"rs_pt_ver",
			"short_description",
			"long_description",
			"doc_link",
			"info",
			"default_frequency",
			"href",
			"fingerprint",
			"category",
			"created_by",
			"created_at",
			"updated_by",
			"updated_at",
			"hidden_by",
			"hidden_at",
			"permissions",
			"required_roles",
			"parameters",
			"severity",
			"built_in",
			"hidden",
			"tenancy",
			"credentials",
			"kind",
		},
		"source": []string{
			"id",
			"name",
			"href",
			"filename",
			"source",
			"fingerprint",
			"kind",
		},
		"link": []string{
			"id",
			"name",
			"href",
			"fingerprint",
			"updated_at",
			"updated_by",
			"built_in",
			"kind",
		},
	}
	// ArchivedIncidentCollectionMap is a map of attribute names in result type
	// ArchivedIncidentCollection indexed by view name.
	ArchivedIncidentCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"project",
			"href",
			"applied_policy",
			"summary",
			"created_at",
			"updated_at",
			"resolved_at",
			"resolved_by",
			"resolution_message",
			"state",
			"violation_data_count",
			"severity",
			"category",
			"options",
			"dry_run",
			"action_failed",
			"kind",
			"etag",
			"not_modified",
		},
		"extended": []string{
			"id",
			"project",
			"href",
			"applied_policy",
			"summary",
			"detail",
			"created_at",
			"updated_at",
			"resolved_at",
			"resolved_by",
			"resolution_message",
			"state",
			"violation_data_count",
			"severity",
			"category",
			"options",
			"dry_run",
			"action_failed",
			"kind",
			"etag",
			"not_modified",
		},
		"source": []string{
			"id",
			"project",
			"href",
			"applied_policy",
			"kind",
			"etag",
			"not_modified",
		},
	}
	// EscalationMap is a map of attribute names in result type Escalation indexed
	// by view name.
	EscalationMap = map[string][]string{
		"default": []string{
			"status",
			"name",
			"actions",
		},
	}
	// EscalationActionMap is a map of attribute names in result type
	// EscalationAction indexed by view name.
	EscalationActionMap = map[string][]string{
		"default": []string{
			"type",
			"status",
			"started_at",
			"finished_at",
			"error",
			"approval_request",
			"process_href",
		},
	}
	// ApprovalRequestMap is a map of attribute names in result type
	// ApprovalRequest indexed by view name.
	ApprovalRequestMap = map[string][]string{
		"default": []string{
			"id",
			"project_id",
			"href",
			"label",
			"description",
			"subject",
			"created_at",
			"updated_at",
			"status",
			"kind",
		},
		"extended": []string{
			"id",
			"project_id",
			"href",
			"label",
			"description",
			"subject",
			"created_at",
			"updated_at",
			"status",
			"parameters",
			"options",
			"approved_by",
			"approved_at",
			"denial_comment",
			"denied_by",
			"denied_at",
			"kind",
		},
	}
	// ResolutionMap is a map of attribute names in result type Resolution indexed
	// by view name.
	ResolutionMap = map[string][]string{
		"default": []string{
			"status",
			"name",
			"actions",
		},
	}
	// ResolutionActionMap is a map of attribute names in result type
	// ResolutionAction indexed by view name.
	ResolutionActionMap = map[string][]string{
		"default": []string{
			"type",
			"status",
			"started_at",
			"finished_at",
			"error",
			"approval_request",
			"process_href",
		},
	}
)

// ValidateArchivedIncident runs the validations defined on the viewed result
// type ArchivedIncident.
func ValidateArchivedIncident(result *ArchivedIncident) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateArchivedIncidentView(result.Projected)
	case "extended":
		err = ValidateArchivedIncidentViewExtended(result.Projected)
	case "source":
		err = ValidateArchivedIncidentViewSource(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended", "source"})
	}
	return
}

// ValidateArchivedIncidentList runs the validations defined on the viewed
// result type ArchivedIncidentList.
func ValidateArchivedIncidentList(result *ArchivedIncidentList) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateArchivedIncidentListView(result.Projected)
	case "extended":
		err = ValidateArchivedIncidentListViewExtended(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended"})
	}
	return
}

// ValidateEscalations runs the validations defined on the viewed result type
// Escalations.
func ValidateEscalations(result *Escalations) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateEscalationsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateResolutions runs the validations defined on the viewed result type
// Resolutions.
func ValidateResolutions(result *Resolutions) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResolutionsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateArchivedIncidentView runs the validations defined on
// ArchivedIncidentView using the "default" view.
func ValidateArchivedIncidentView(result *ArchivedIncidentView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/archived_incidents/[0-9a-f]+$"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.ResolvedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.resolved_at", *result.ResolvedAt, goa.FormatDateTime))
	}
	if result.ResolvedBy != nil {
		if err2 := ValidateUserView(result.ResolvedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.State != nil {
		if !(*result.State == "resolved" || *result.State == "terminated") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.state", *result.State, []interface{}{"resolved", "terminated"}))
		}
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	for _, e := range result.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#archived_incident") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#archived_incident"}))
		}
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.AppliedPolicy != nil {
		if err2 := ValidateAppliedPolicyViewLink(result.AppliedPolicy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateArchivedIncidentViewExtended runs the validations defined on
// ArchivedIncidentView using the "extended" view.
func ValidateArchivedIncidentViewExtended(result *ArchivedIncidentView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/archived_incidents/[0-9a-f]+$"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.ResolvedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.resolved_at", *result.ResolvedAt, goa.FormatDateTime))
	}
	if result.ResolvedBy != nil {
		if err2 := ValidateUserView(result.ResolvedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.State != nil {
		if !(*result.State == "resolved" || *result.State == "terminated") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.state", *result.State, []interface{}{"resolved", "terminated"}))
		}
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	for _, e := range result.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#archived_incident") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#archived_incident"}))
		}
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.AppliedPolicy != nil {
		if err2 := ValidateAppliedPolicyViewLink(result.AppliedPolicy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateArchivedIncidentViewSource runs the validations defined on
// ArchivedIncidentView using the "source" view.
func ValidateArchivedIncidentViewSource(result *ArchivedIncidentView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/archived_incidents/[0-9a-f]+$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#archived_incident") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#archived_incident"}))
		}
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.AppliedPolicy != nil {
		if err2 := ValidateAppliedPolicyViewSource(result.AppliedPolicy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProjectView runs the validations defined on ProjectView.
func ValidateProjectView(result *ProjectView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.OrgID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_id", "result"))
	}
	if result.OrgName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_name", "result"))
	}
	return
}

// ValidateAppliedPolicyView runs the validations defined on AppliedPolicyView
// using the "default" view.
func ValidateAppliedPolicyView(result *AppliedPolicyView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Frequency != nil {
		if !(*result.Frequency == "15 minutes" || *result.Frequency == "hourly" || *result.Frequency == "daily" || *result.Frequency == "weekly" || *result.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.frequency", *result.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	for _, e := range result.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Status != nil {
		if !(*result.Status == "active" || *result.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"active", "error"}))
		}
	}
	if result.ErroredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.errored_at", *result.ErroredAt, goa.FormatDateTime))
	}
	if result.Scope != nil {
		if !(*result.Scope == "project" || *result.Scope == "org") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.scope", *result.Scope, []interface{}{"project", "org"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#applied_policy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#applied_policy"}))
		}
	}
	if result.PolicyTemplate != nil {
		if err2 := ValidatePolicyTemplateViewLink(result.PolicyTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateViewLink(result.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAppliedPolicyViewSource runs the validations defined on
// AppliedPolicyView using the "source" view.
func ValidateAppliedPolicyViewSource(result *AppliedPolicyView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Project != nil {
		if err2 := ValidateProjectView(result.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#applied_policy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#applied_policy"}))
		}
	}
	if result.PolicyTemplate != nil {
		if err2 := ValidatePolicyTemplateViewSource(result.PolicyTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateViewSource(result.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAppliedPolicyViewLink runs the validations defined on
// AppliedPolicyView using the "link" view.
func ValidateAppliedPolicyViewLink(result *AppliedPolicyView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.Frequency != nil {
		if !(*result.Frequency == "15 minutes" || *result.Frequency == "hourly" || *result.Frequency == "daily" || *result.Frequency == "weekly" || *result.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.frequency", *result.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#applied_policy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#applied_policy"}))
		}
	}
	if result.PolicyTemplate != nil {
		if err2 := ValidatePolicyTemplateViewLink(result.PolicyTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateViewLink(result.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePolicyTemplateView runs the validations defined on
// PolicyTemplateView using the "default" view.
func ValidatePolicyTemplateView(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidatePolicyTemplateViewExtended runs the validations defined on
// PolicyTemplateView using the "extended" view.
func ValidatePolicyTemplateViewExtended(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range result.Permissions {
		if v != nil {
			if err2 := ValidatePermissionView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range result.Parameters {
		if v != nil {
			if err2 := ValidateParameterView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range result.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidatePolicyTemplateViewSource runs the validations defined on
// PolicyTemplateView using the "source" view.
func ValidatePolicyTemplateViewSource(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidatePolicyTemplateViewLink runs the validations defined on
// PolicyTemplateView using the "link" view.
func ValidatePolicyTemplateViewLink(result *PolicyTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidateUserView runs the validations defined on UserView.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.email", *result.Email, goa.FormatEmail))
	}
	return
}

// ValidatePermissionView runs the validations defined on PermissionView.
func ValidatePermissionView(result *PermissionView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "result"))
	}
	if result.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "result"))
	}
	return
}

// ValidateParameterView runs the validations defined on ParameterView.
func ValidateParameterView(result *ParameterView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	if result.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "string" || *result.Type == "list" || *result.Type == "number") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"string", "list", "number"}))
		}
	}
	if result.AllowedPattern != nil {
		if err2 := ValidateRegexpView(result.AllowedPattern); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRegexpView runs the validations defined on RegexpView.
func ValidateRegexpView(result *RegexpView) (err error) {
	if result.Pattern == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pattern", "result"))
	}
	return
}

// ValidateCredentialsView runs the validations defined on CredentialsView.
func ValidateCredentialsView(result *CredentialsView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Schemes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schemes", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	for _, e := range result.Tags {
		if e != nil {
			if err2 := ValidateCredentialsTagView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCredentialsTagView runs the validations defined on
// CredentialsTagView.
func ValidateCredentialsTagView(result *CredentialsTagView) (err error) {
	if result.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "result"))
	}
	if result.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "result"))
	}
	return
}

// ValidatePublishedTemplateView runs the validations defined on
// PublishedTemplateView using the "default" view.
func ValidatePublishedTemplateView(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.PolicyTemplateURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.policy_template_url", *result.PolicyTemplateURL, goa.FormatURI))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.HiddenBy != nil {
		if err2 := ValidateUserView(result.HiddenBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.HiddenAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.hidden_at", *result.HiddenAt, goa.FormatDateTime))
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidatePublishedTemplateViewExtended runs the validations defined on
// PublishedTemplateView using the "extended" view.
func ValidatePublishedTemplateViewExtended(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.PolicyTemplateURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.policy_template_url", *result.PolicyTemplateURL, goa.FormatURI))
	}
	if result.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.doc_link", *result.DocLink, goa.FormatURI))
	}
	if result.DefaultFrequency != nil {
		if !(*result.DefaultFrequency == "15 minutes" || *result.DefaultFrequency == "hourly" || *result.DefaultFrequency == "daily" || *result.DefaultFrequency == "weekly" || *result.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.default_frequency", *result.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.CreatedBy != nil {
		if err2 := ValidateUserView(result.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.HiddenBy != nil {
		if err2 := ValidateUserView(result.HiddenBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.HiddenAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.hidden_at", *result.HiddenAt, goa.FormatDateTime))
	}
	for _, v := range result.Permissions {
		if v != nil {
			if err2 := ValidatePermissionView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range result.Parameters {
		if v != nil {
			if err2 := ValidateParameterView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Severity != nil {
		if !(*result.Severity == "low" || *result.Severity == "medium" || *result.Severity == "high" || *result.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.severity", *result.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if result.Tenancy != nil {
		if !(*result.Tenancy == "multi" || *result.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.tenancy", *result.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range result.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidatePublishedTemplateViewSource runs the validations defined on
// PublishedTemplateView using the "source" view.
func ValidatePublishedTemplateViewSource(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidatePublishedTemplateViewLink runs the validations defined on
// PublishedTemplateView using the "link" view.
func ValidatePublishedTemplateViewLink(result *PublishedTemplateView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.UpdatedBy != nil {
		if err2 := ValidateUserView(result.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidateConfigurationOptionView runs the validations defined on
// ConfigurationOptionView.
func ValidateConfigurationOptionView(result *ConfigurationOptionView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "string" || *result.Type == "number" || *result.Type == "list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"string", "number", "list"}))
		}
	}
	return
}

// ValidateArchivedIncidentListView runs the validations defined on
// ArchivedIncidentListView using the "default" view.
func ValidateArchivedIncidentListView(result *ArchivedIncidentListView) (err error) {
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#archived_incident_list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#archived_incident_list"}))
		}
	}
	if result.Items != nil {
		if err2 := ValidateArchivedIncidentCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateArchivedIncidentListViewExtended runs the validations defined on
// ArchivedIncidentListView using the "extended" view.
func ValidateArchivedIncidentListViewExtended(result *ArchivedIncidentListView) (err error) {
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.NotModified != nil {
		if !(*result.NotModified == "true" || *result.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.not_modified", *result.NotModified, []interface{}{"true", "false"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#archived_incident_list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#archived_incident_list"}))
		}
	}
	if result.Items != nil {
		if err2 := ValidateArchivedIncidentCollectionViewExtended(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateArchivedIncidentCollectionView runs the validations defined on
// ArchivedIncidentCollectionView using the "default" view.
func ValidateArchivedIncidentCollectionView(result ArchivedIncidentCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateArchivedIncidentView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateArchivedIncidentCollectionViewExtended runs the validations defined
// on ArchivedIncidentCollectionView using the "extended" view.
func ValidateArchivedIncidentCollectionViewExtended(result ArchivedIncidentCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateArchivedIncidentViewExtended(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateArchivedIncidentCollectionViewSource runs the validations defined on
// ArchivedIncidentCollectionView using the "source" view.
func ValidateArchivedIncidentCollectionViewSource(result ArchivedIncidentCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateArchivedIncidentViewSource(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEscalationsView runs the validations defined on EscalationsView
// using the "default" view.
func ValidateEscalationsView(result *EscalationsView) (err error) {
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "queued" || *result.Status == "aborted" || *result.Status == "pending" || *result.Status == "running" || *result.Status == "completed" || *result.Status == "failed" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "failed", "denied"}))
		}
	}
	for _, e := range result.Escalations {
		if e != nil {
			if err2 := ValidateEscalationView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.finished_at", *result.FinishedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEscalationView runs the validations defined on EscalationView using
// the "default" view.
func ValidateEscalationView(result *EscalationView) (err error) {
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "queued" || *result.Status == "aborted" || *result.Status == "pending" || *result.Status == "running" || *result.Status == "completed" || *result.Status == "failed" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "failed", "denied"}))
		}
	}
	for _, e := range result.Actions {
		if e != nil {
			if err2 := ValidateEscalationActionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEscalationActionView runs the validations defined on
// EscalationActionView using the "default" view.
func ValidateEscalationActionView(result *EscalationActionView) (err error) {
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "email" || *result.Type == "cloud_workflow" || *result.Type == "resolve_incident" || *result.Type == "request_approval") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"email", "cloud_workflow", "resolve_incident", "request_approval"}))
		}
	}
	if result.Status != nil {
		if !(*result.Status == "queued" || *result.Status == "aborted" || *result.Status == "pending" || *result.Status == "running" || *result.Status == "completed" || *result.Status == "skipped" || *result.Status == "failed" || *result.Status == "approved" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "skipped", "failed", "approved", "denied"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.finished_at", *result.FinishedAt, goa.FormatDateTime))
	}
	if result.ApprovalRequest != nil {
		if err2 := ValidateApprovalRequestViewExtended(result.ApprovalRequest); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateApprovalRequestView runs the validations defined on
// ApprovalRequestView using the "default" view.
func ValidateApprovalRequestView(result *ApprovalRequestView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "result"))
	}
	if result.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	}
	if result.Subject != nil {
		if err2 := ValidateApprovalSubject(result.Subject); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Status != nil {
		if !(*result.Status == "pending" || *result.Status == "approved" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#approval_request") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#approval_request"}))
		}
	}
	return
}

// ValidateApprovalRequestViewExtended runs the validations defined on
// ApprovalRequestView using the "extended" view.
func ValidateApprovalRequestViewExtended(result *ApprovalRequestView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "result"))
	}
	if result.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "result"))
	}
	if result.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.href", *result.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	}
	if result.Subject != nil {
		if err2 := ValidateApprovalSubject(result.Subject); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	if result.Status != nil {
		if !(*result.Status == "pending" || *result.Status == "approved" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	for _, v := range result.Parameters {
		if v != nil {
			if err2 := ValidateParameterView(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range result.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.ApprovedBy != nil {
		if err2 := ValidateUserView(result.ApprovedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.ApprovedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.approved_at", *result.ApprovedAt, goa.FormatDateTime))
	}
	if result.DeniedBy != nil {
		if err2 := ValidateUserView(result.DeniedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.DeniedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.denied_at", *result.DeniedAt, goa.FormatDateTime))
	}
	if result.Kind != nil {
		if !(*result.Kind == "gov#approval_request") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.kind", *result.Kind, []interface{}{"gov#approval_request"}))
		}
	}
	return
}

// ValidateApprovalSubject runs the validations defined on ApprovalSubject.
func ValidateApprovalSubject(result *ApprovalSubject) (err error) {
	if result.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "result"))
	}
	if result.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "result"))
	}
	return
}

// ValidateResolutionsView runs the validations defined on ResolutionsView
// using the "default" view.
func ValidateResolutionsView(result *ResolutionsView) (err error) {
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "queued" || *result.Status == "aborted" || *result.Status == "pending" || *result.Status == "running" || *result.Status == "completed" || *result.Status == "failed" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "failed", "denied"}))
		}
	}
	for _, e := range result.Resolutions {
		if e != nil {
			if err2 := ValidateResolutionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.finished_at", *result.FinishedAt, goa.FormatDateTime))
	}
	return
}

// ValidateResolutionView runs the validations defined on ResolutionView using
// the "default" view.
func ValidateResolutionView(result *ResolutionView) (err error) {
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "queued" || *result.Status == "aborted" || *result.Status == "pending" || *result.Status == "running" || *result.Status == "completed" || *result.Status == "failed" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "failed", "denied"}))
		}
	}
	for _, e := range result.Actions {
		if e != nil {
			if err2 := ValidateResolutionActionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResolutionActionView runs the validations defined on
// ResolutionActionView using the "default" view.
func ValidateResolutionActionView(result *ResolutionActionView) (err error) {
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Type != nil {
		if !(*result.Type == "email" || *result.Type == "cloud_workflow" || *result.Type == "request_approval") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{"email", "cloud_workflow", "request_approval"}))
		}
	}
	if result.Status != nil {
		if !(*result.Status == "queued" || *result.Status == "aborted" || *result.Status == "pending" || *result.Status == "running" || *result.Status == "completed" || *result.Status == "skipped" || *result.Status == "failed" || *result.Status == "approved" || *result.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "skipped", "failed", "approved", "denied"}))
		}
	}
	if result.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.started_at", *result.StartedAt, goa.FormatDateTime))
	}
	if result.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.finished_at", *result.FinishedAt, goa.FormatDateTime))
	}
	if result.ApprovalRequest != nil {
		if err2 := ValidateApprovalRequestViewExtended(result.ApprovalRequest); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
