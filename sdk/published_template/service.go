// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PublishedTemplate service
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package publishedtemplate

import (
	"context"

	publishedtemplateviews "github.com/rightscale/policy_sdk/sdk/published_template/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the PublishedTemplate service interface.
type Service interface {
	// Create creates an organization-scoped published template from a
	// project-scoped policy template.
	Create(context.Context, *CreatePayload) (res *CreateResult, err error)
	// Update updates a published template in place for an organization, by
	// replacing it. Any existing applied policies using the template will not be
	// updated; they must be deleted and recreated again.
	Update(context.Context, *UpdatePayload) (err error)
	// Hide hides a RightScale built-in template from an organization.
	Hide(context.Context, *HidePayload) (err error)
	// Unhide unhides a RightScale built-in template from an organization.
	Unhide(context.Context, *UnhidePayload) (err error)
	// Delete deletes a published template from an organization. Deleting a
	// published template will not delete any applied policies created from the
	// template, they must be stopped explicitly.
	Delete(context.Context, *DeletePayload) (err error)
	// Show retrieves the details of a published template.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	//	- "source"
	//	- "link"
	Show(context.Context, *ShowPayload) (res *PublishedTemplate, view string, err error)
	// Index retrieves the list of published templates in an organization.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	Index(context.Context, *IndexPayload) (res *PublishedTemplateList, view string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "PublishedTemplate"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"create", "update", "hide", "unhide", "delete", "show", "index"}

// CreatePayload is the payload type of the PublishedTemplate service create
// method.
type CreatePayload struct {
	// org_id identifies an organization by ID.
	OrgID uint
	// template_href is the href of the policy template to publish to the
	// organization.
	TemplateHref string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// CreateResult is the result type of the PublishedTemplate service create
// method.
type CreateResult struct {
	Location string
}

// UpdatePayload is the payload type of the PublishedTemplate service update
// method.
type UpdatePayload struct {
	// org_id identifies an organization by ID.
	OrgID uint
	// template_id identifies a published template by ID.
	TemplateID string
	// template_href is the href of the policy template to publish to the
	// organization.
	TemplateHref string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// HidePayload is the payload type of the PublishedTemplate service hide method.
type HidePayload struct {
	// org_id identifies an organization by ID.
	OrgID uint
	// template_id identifies a published template by ID.
	TemplateID string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// UnhidePayload is the payload type of the PublishedTemplate service unhide
// method.
type UnhidePayload struct {
	// org_id identifies an organization by ID.
	OrgID uint
	// template_id identifies a published template by ID.
	TemplateID string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// DeletePayload is the payload type of the PublishedTemplate service delete
// method.
type DeletePayload struct {
	// org_id identifies an organization by ID.
	OrgID uint
	// template_id identifies a published template by ID.
	TemplateID string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ShowPayload is the payload type of the PublishedTemplate service show method.
type ShowPayload struct {
	// org_id identifies an organization by ID.
	OrgID uint
	// template_id identifies a published template by ID.
	TemplateID string
	// View used to render published template
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// PublishedTemplate is the result type of the PublishedTemplate service show
// method.
type PublishedTemplate struct {
	// id identifies a published template by ID.
	ID string
	// name is the unique name of the published template in the organization.
	Name string
	// org_id is the ID of the organization that the published template belongs to.
	OrgID *uint
	// project_id is the ID of the project that the published template is published
	// from.
	ProjectID *uint
	// policy_template_id is the ID of the policy template from which the published
	// template originated.
	PolicyTemplateID *string
	// policy_template_url is the full URL to the policy template from which the
	// published template originated.
	PolicyTemplateURL *string
	// policy_template_fingerprint is fingerprint of the policy template. It is
	// used to determine if the policy template that this was published from is
	// outdated.
	PolicyTemplateFingerprint *string
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint
	// short_description is the short description of the published template.
	ShortDescription *string
	// long_description is the long description of the published template. The
	// content can be markdown.
	LongDescription *string
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string
	// href is the self-referential href of the published template.
	Href string
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string
	// source is published template source code.
	Source *string
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string
	// category is the type categorization of the published template.
	Category *string
	// created_by is the RightScale user that created the published template.
	CreatedBy *User
	// created_at is the published template creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *User
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*Permission
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*Parameter
	// severity defines the severity level of incidents raised from this published
	// template.
	Severity *string
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool
	// hidden is a flag to indicate whether the published template is hidden.
	Hidden *bool
	// hidden_by is the RightScale user that marked the published template as
	// hidden.
	HiddenBy *User
	// hidden_at is the hidden at timestamp in RFC3339 format.
	HiddenAt *string
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*Credentials
	// kind is "gov#published_template".
	Kind string
}

// IndexPayload is the payload type of the PublishedTemplate service index
// method.
type IndexPayload struct {
	// org_id identifies an organization by ID.
	OrgID uint
	// etag is an HTTP ETag. It is typically the previous ETag value retrieved by
	// client if any. Service returns an empty response with HTTP status code 304
	// Not Modified if value matches current value server side.
	Etag *string
	// View used to render published templates
	View *string
	// show_hidden will show templates that have been hidden if set to true.
	ShowHidden *bool
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// PublishedTemplateList is the result type of the PublishedTemplate service
// index method.
type PublishedTemplateList struct {
	// count is the number of published templates in the list.
	Count *uint
	// etag is an HTTP ETag for the published template list.
	Etag string
	// items is the array of published templates.
	Items PublishedTemplateCollection
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#published_template_list".
	Kind string
}

// User represents a registered RightScale user.
type User struct {
	// ID of user
	ID uint
	// email of user
	Email string
	// name of user, usually of the form 'First Last'
	Name string
}

// Permission defines a role required in RightScale to perform actions on
// resources
type Permission struct {
	// Name of a permission
	Name string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// Parameter defines a parameter given as input to a Policy
type Parameter struct {
	// Name of the parameter
	Name string `json:"name"`
	// Type of the parameter
	Type string `json:"type"`
	// Label to show in the UI
	Label string `json:"label"`
	// The index of this parameter in the list
	Index uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *Regexp `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// Regular expression
type Regexp struct {
	// Pattern is the regular expression pattern.
	Pattern string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// Credentials describes a reference to an API signer in the credentials
// service in the policy language.
type Credentials struct {
	// Name in policy template source code
	Name string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTag `json:"tags"`
}

type CredentialsTag struct {
	// Key is the tag key.
	Key string `json:"key"`
	// Value is the tag value.
	Value string `json:"value"`
}

type PublishedTemplateCollection []*PublishedTemplate

// A template with this name already exists.
type ConflictError struct {
	// a unique identifier for this particular occurrence of the problem.
	ID string
	// name of error.
	Name     string
	Location string
	// updatable indicates whether a 'create' request error can be resolved by
	// making an 'update' request instead. It is used to indicate whether a
	// resource is built-in and whether the user has permission to modify it.
	Updatable bool
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return "A template with this name already exists."
}

// ErrorName returns "ConflictError".
func (e *ConflictError) ErrorName() string {
	return e.Name
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadGateway builds a goa.ServiceError from an error.
func MakeBadGateway(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_gateway",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewPublishedTemplate initializes result type PublishedTemplate from viewed
// result type PublishedTemplate.
func NewPublishedTemplate(vres *publishedtemplateviews.PublishedTemplate) *PublishedTemplate {
	var res *PublishedTemplate
	switch vres.View {
	case "default", "":
		res = newPublishedTemplate(vres.Projected)
	case "extended":
		res = newPublishedTemplateExtended(vres.Projected)
	case "source":
		res = newPublishedTemplateSource(vres.Projected)
	case "link":
		res = newPublishedTemplateLink(vres.Projected)
	}
	return res
}

// NewViewedPublishedTemplate initializes viewed result type PublishedTemplate
// from result type PublishedTemplate using the given view.
func NewViewedPublishedTemplate(res *PublishedTemplate, view string) *publishedtemplateviews.PublishedTemplate {
	var vres *publishedtemplateviews.PublishedTemplate
	switch view {
	case "default", "":
		p := newPublishedTemplateView(res)
		vres = &publishedtemplateviews.PublishedTemplate{Projected: p, View: "default"}
	case "extended":
		p := newPublishedTemplateViewExtended(res)
		vres = &publishedtemplateviews.PublishedTemplate{Projected: p, View: "extended"}
	case "source":
		p := newPublishedTemplateViewSource(res)
		vres = &publishedtemplateviews.PublishedTemplate{Projected: p, View: "source"}
	case "link":
		p := newPublishedTemplateViewLink(res)
		vres = &publishedtemplateviews.PublishedTemplate{Projected: p, View: "link"}
	}
	return vres
}

// NewPublishedTemplateList initializes result type PublishedTemplateList from
// viewed result type PublishedTemplateList.
func NewPublishedTemplateList(vres *publishedtemplateviews.PublishedTemplateList) *PublishedTemplateList {
	var res *PublishedTemplateList
	switch vres.View {
	case "default", "":
		res = newPublishedTemplateList(vres.Projected)
	case "extended":
		res = newPublishedTemplateListExtended(vres.Projected)
	}
	return res
}

// NewViewedPublishedTemplateList initializes viewed result type
// PublishedTemplateList from result type PublishedTemplateList using the given
// view.
func NewViewedPublishedTemplateList(res *PublishedTemplateList, view string) *publishedtemplateviews.PublishedTemplateList {
	var vres *publishedtemplateviews.PublishedTemplateList
	switch view {
	case "default", "":
		p := newPublishedTemplateListView(res)
		vres = &publishedtemplateviews.PublishedTemplateList{Projected: p, View: "default"}
	case "extended":
		p := newPublishedTemplateListViewExtended(res)
		vres = &publishedtemplateviews.PublishedTemplateList{Projected: p, View: "extended"}
	}
	return vres
}

// newPublishedTemplate converts projected type PublishedTemplate to service
// type PublishedTemplate.
func newPublishedTemplate(vres *publishedtemplateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		OrgID:                     vres.OrgID,
		ProjectID:                 vres.ProjectID,
		PolicyTemplateID:          vres.PolicyTemplateID,
		PolicyTemplateURL:         vres.PolicyTemplateURL,
		PolicyTemplateFingerprint: vres.PolicyTemplateFingerprint,
		RsPtVer:                   vres.RsPtVer,
		ShortDescription:          vres.ShortDescription,
		DocLink:                   vres.DocLink,
		DefaultFrequency:          vres.DefaultFrequency,
		Category:                  vres.Category,
		CreatedAt:                 vres.CreatedAt,
		UpdatedAt:                 vres.UpdatedAt,
		HiddenAt:                  vres.HiddenAt,
		Severity:                  vres.Severity,
		BuiltIn:                   vres.BuiltIn,
		Hidden:                    vres.Hidden,
		Tenancy:                   vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPublishedtemplateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPublishedtemplateviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.HiddenBy != nil {
		res.HiddenBy = transformPublishedtemplateviewsUserViewToUser(vres.HiddenBy)
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	return res
}

// newPublishedTemplateExtended converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateExtended(vres *publishedtemplateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		OrgID:                     vres.OrgID,
		ProjectID:                 vres.ProjectID,
		PolicyTemplateID:          vres.PolicyTemplateID,
		PolicyTemplateURL:         vres.PolicyTemplateURL,
		PolicyTemplateFingerprint: vres.PolicyTemplateFingerprint,
		RsPtVer:                   vres.RsPtVer,
		ShortDescription:          vres.ShortDescription,
		LongDescription:           vres.LongDescription,
		DocLink:                   vres.DocLink,
		DefaultFrequency:          vres.DefaultFrequency,
		Category:                  vres.Category,
		CreatedAt:                 vres.CreatedAt,
		UpdatedAt:                 vres.UpdatedAt,
		HiddenAt:                  vres.HiddenAt,
		Severity:                  vres.Severity,
		BuiltIn:                   vres.BuiltIn,
		Hidden:                    vres.Hidden,
		Tenancy:                   vres.Tenancy,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Info != nil {
		res.Info = make(map[string]string, len(vres.Info))
		for key, val := range vres.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if vres.CreatedBy != nil {
		res.CreatedBy = transformPublishedtemplateviewsUserViewToUser(vres.CreatedBy)
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPublishedtemplateviewsUserViewToUser(vres.UpdatedBy)
	}
	if vres.HiddenBy != nil {
		res.HiddenBy = transformPublishedtemplateviewsUserViewToUser(vres.HiddenBy)
	}
	if vres.Permissions != nil {
		res.Permissions = make(map[string]*Permission, len(vres.Permissions))
		for key, val := range vres.Permissions {
			tk := key
			res.Permissions[tk] = transformPublishedtemplateviewsPermissionViewToPermission(val)
		}
	}
	if vres.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(vres.RequiredRoles))
		for i, val := range vres.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if vres.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(vres.Parameters))
		for key, val := range vres.Parameters {
			tk := key
			res.Parameters[tk] = transformPublishedtemplateviewsParameterViewToParameter(val)
		}
	}
	if vres.Credentials != nil {
		res.Credentials = make(map[string]*Credentials, len(vres.Credentials))
		for key, val := range vres.Credentials {
			tk := key
			res.Credentials[tk] = transformPublishedtemplateviewsCredentialsViewToCredentials(val)
		}
	}
	return res
}

// newPublishedTemplateSource converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateSource(vres *publishedtemplateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		Filename: vres.Filename,
		Source:   vres.Source,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	return res
}

// newPublishedTemplateLink converts projected type PublishedTemplate to
// service type PublishedTemplate.
func newPublishedTemplateLink(vres *publishedtemplateviews.PublishedTemplateView) *PublishedTemplate {
	res := &PublishedTemplate{
		UpdatedAt: vres.UpdatedAt,
		BuiltIn:   vres.BuiltIn,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Fingerprint != nil {
		res.Fingerprint = *vres.Fingerprint
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.UpdatedBy != nil {
		res.UpdatedBy = transformPublishedtemplateviewsUserViewToUser(vres.UpdatedBy)
	}
	return res
}

// newPublishedTemplateView projects result type PublishedTemplate to projected
// type PublishedTemplateView using the "default" view.
func newPublishedTemplateView(res *PublishedTemplate) *publishedtemplateviews.PublishedTemplateView {
	vres := &publishedtemplateviews.PublishedTemplateView{
		ID:                        &res.ID,
		Name:                      &res.Name,
		OrgID:                     res.OrgID,
		ProjectID:                 res.ProjectID,
		PolicyTemplateID:          res.PolicyTemplateID,
		PolicyTemplateURL:         res.PolicyTemplateURL,
		PolicyTemplateFingerprint: res.PolicyTemplateFingerprint,
		RsPtVer:                   res.RsPtVer,
		ShortDescription:          res.ShortDescription,
		DocLink:                   res.DocLink,
		DefaultFrequency:          res.DefaultFrequency,
		Href:                      &res.Href,
		Fingerprint:               &res.Fingerprint,
		Category:                  res.Category,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
		Severity:                  res.Severity,
		BuiltIn:                   res.BuiltIn,
		Hidden:                    res.Hidden,
		HiddenAt:                  res.HiddenAt,
		Tenancy:                   res.Tenancy,
		Kind:                      &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPublishedtemplateviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPublishedtemplateviewsUserView(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.HiddenBy != nil {
		vres.HiddenBy = transformUserToPublishedtemplateviewsUserView(res.HiddenBy)
	}
	return vres
}

// newPublishedTemplateViewExtended projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "extended" view.
func newPublishedTemplateViewExtended(res *PublishedTemplate) *publishedtemplateviews.PublishedTemplateView {
	vres := &publishedtemplateviews.PublishedTemplateView{
		ID:                        &res.ID,
		Name:                      &res.Name,
		OrgID:                     res.OrgID,
		ProjectID:                 res.ProjectID,
		PolicyTemplateID:          res.PolicyTemplateID,
		PolicyTemplateURL:         res.PolicyTemplateURL,
		PolicyTemplateFingerprint: res.PolicyTemplateFingerprint,
		RsPtVer:                   res.RsPtVer,
		ShortDescription:          res.ShortDescription,
		LongDescription:           res.LongDescription,
		DocLink:                   res.DocLink,
		DefaultFrequency:          res.DefaultFrequency,
		Href:                      &res.Href,
		Fingerprint:               &res.Fingerprint,
		Category:                  res.Category,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
		Severity:                  res.Severity,
		BuiltIn:                   res.BuiltIn,
		Hidden:                    res.Hidden,
		HiddenAt:                  res.HiddenAt,
		Tenancy:                   res.Tenancy,
		Kind:                      &res.Kind,
	}
	if res.Info != nil {
		vres.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			vres.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		vres.CreatedBy = transformUserToPublishedtemplateviewsUserView(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPublishedtemplateviewsUserView(res.UpdatedBy)
	}
	if res.Permissions != nil {
		vres.Permissions = make(map[string]*publishedtemplateviews.PermissionView, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			vres.Permissions[tk] = transformPermissionToPublishedtemplateviewsPermissionView(val)
		}
	}
	if res.RequiredRoles != nil {
		vres.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			vres.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		vres.Parameters = make(map[string]*publishedtemplateviews.ParameterView, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			vres.Parameters[tk] = transformParameterToPublishedtemplateviewsParameterView(val)
		}
	}
	if res.HiddenBy != nil {
		vres.HiddenBy = transformUserToPublishedtemplateviewsUserView(res.HiddenBy)
	}
	if res.Credentials != nil {
		vres.Credentials = make(map[string]*publishedtemplateviews.CredentialsView, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			vres.Credentials[tk] = transformCredentialsToPublishedtemplateviewsCredentialsView(val)
		}
	}
	return vres
}

// newPublishedTemplateViewSource projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "source" view.
func newPublishedTemplateViewSource(res *PublishedTemplate) *publishedtemplateviews.PublishedTemplateView {
	vres := &publishedtemplateviews.PublishedTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: &res.Fingerprint,
		Kind:        &res.Kind,
	}
	return vres
}

// newPublishedTemplateViewLink projects result type PublishedTemplate to
// projected type PublishedTemplateView using the "link" view.
func newPublishedTemplateViewLink(res *PublishedTemplate) *publishedtemplateviews.PublishedTemplateView {
	vres := &publishedtemplateviews.PublishedTemplateView{
		ID:          &res.ID,
		Name:        &res.Name,
		Href:        &res.Href,
		Fingerprint: &res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		BuiltIn:     res.BuiltIn,
		Kind:        &res.Kind,
	}
	if res.UpdatedBy != nil {
		vres.UpdatedBy = transformUserToPublishedtemplateviewsUserView(res.UpdatedBy)
	}
	return vres
}

// newPublishedTemplateList converts projected type PublishedTemplateList to
// service type PublishedTemplateList.
func newPublishedTemplateList(vres *publishedtemplateviews.PublishedTemplateListView) *PublishedTemplateList {
	res := &PublishedTemplateList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newPublishedTemplateCollection(vres.Items)
	}
	return res
}

// newPublishedTemplateListExtended converts projected type
// PublishedTemplateList to service type PublishedTemplateList.
func newPublishedTemplateListExtended(vres *publishedtemplateviews.PublishedTemplateListView) *PublishedTemplateList {
	res := &PublishedTemplateList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newPublishedTemplateCollectionExtended(vres.Items)
	}
	return res
}

// newPublishedTemplateListView projects result type PublishedTemplateList to
// projected type PublishedTemplateListView using the "default" view.
func newPublishedTemplateListView(res *PublishedTemplateList) *publishedtemplateviews.PublishedTemplateListView {
	vres := &publishedtemplateviews.PublishedTemplateListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newPublishedTemplateCollectionView(res.Items)
	}
	return vres
}

// newPublishedTemplateListViewExtended projects result type
// PublishedTemplateList to projected type PublishedTemplateListView using the
// "extended" view.
func newPublishedTemplateListViewExtended(res *PublishedTemplateList) *publishedtemplateviews.PublishedTemplateListView {
	vres := &publishedtemplateviews.PublishedTemplateListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newPublishedTemplateCollectionViewExtended(res.Items)
	}
	return vres
}

// newPublishedTemplateCollection converts projected type
// PublishedTemplateCollection to service type PublishedTemplateCollection.
func newPublishedTemplateCollection(vres publishedtemplateviews.PublishedTemplateCollectionView) PublishedTemplateCollection {
	res := make(PublishedTemplateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPublishedTemplate(n)
	}
	return res
}

// newPublishedTemplateCollectionExtended converts projected type
// PublishedTemplateCollection to service type PublishedTemplateCollection.
func newPublishedTemplateCollectionExtended(vres publishedtemplateviews.PublishedTemplateCollectionView) PublishedTemplateCollection {
	res := make(PublishedTemplateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPublishedTemplateExtended(n)
	}
	return res
}

// newPublishedTemplateCollectionSource converts projected type
// PublishedTemplateCollection to service type PublishedTemplateCollection.
func newPublishedTemplateCollectionSource(vres publishedtemplateviews.PublishedTemplateCollectionView) PublishedTemplateCollection {
	res := make(PublishedTemplateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPublishedTemplateSource(n)
	}
	return res
}

// newPublishedTemplateCollectionLink converts projected type
// PublishedTemplateCollection to service type PublishedTemplateCollection.
func newPublishedTemplateCollectionLink(vres publishedtemplateviews.PublishedTemplateCollectionView) PublishedTemplateCollection {
	res := make(PublishedTemplateCollection, len(vres))
	for i, n := range vres {
		res[i] = newPublishedTemplateLink(n)
	}
	return res
}

// newPublishedTemplateCollectionView projects result type
// PublishedTemplateCollection to projected type
// PublishedTemplateCollectionView using the "default" view.
func newPublishedTemplateCollectionView(res PublishedTemplateCollection) publishedtemplateviews.PublishedTemplateCollectionView {
	vres := make(publishedtemplateviews.PublishedTemplateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPublishedTemplateView(n)
	}
	return vres
}

// newPublishedTemplateCollectionViewExtended projects result type
// PublishedTemplateCollection to projected type
// PublishedTemplateCollectionView using the "extended" view.
func newPublishedTemplateCollectionViewExtended(res PublishedTemplateCollection) publishedtemplateviews.PublishedTemplateCollectionView {
	vres := make(publishedtemplateviews.PublishedTemplateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPublishedTemplateViewExtended(n)
	}
	return vres
}

// newPublishedTemplateCollectionViewSource projects result type
// PublishedTemplateCollection to projected type
// PublishedTemplateCollectionView using the "source" view.
func newPublishedTemplateCollectionViewSource(res PublishedTemplateCollection) publishedtemplateviews.PublishedTemplateCollectionView {
	vres := make(publishedtemplateviews.PublishedTemplateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPublishedTemplateViewSource(n)
	}
	return vres
}

// newPublishedTemplateCollectionViewLink projects result type
// PublishedTemplateCollection to projected type
// PublishedTemplateCollectionView using the "link" view.
func newPublishedTemplateCollectionViewLink(res PublishedTemplateCollection) publishedtemplateviews.PublishedTemplateCollectionView {
	vres := make(publishedtemplateviews.PublishedTemplateCollectionView, len(res))
	for i, n := range res {
		vres[i] = newPublishedTemplateViewLink(n)
	}
	return vres
}

// transformPublishedtemplateviewsUserViewToUser builds a value of type *User
// from a value of type *publishedtemplateviews.UserView.
func transformPublishedtemplateviewsUserViewToUser(v *publishedtemplateviews.UserView) *User {
	if v == nil {
		return nil
	}
	res := &User{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// transformPublishedtemplateviewsPermissionViewToPermission builds a value of
// type *Permission from a value of type *publishedtemplateviews.PermissionView.
func transformPublishedtemplateviewsPermissionViewToPermission(v *publishedtemplateviews.PermissionView) *Permission {
	if v == nil {
		return nil
	}
	res := &Permission{
		Name:  *v.Name,
		Label: v.Label,
	}
	if v.Resources != nil {
		res.Resources = make([]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = val
		}
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}

	return res
}

// transformPublishedtemplateviewsParameterViewToParameter builds a value of
// type *Parameter from a value of type *publishedtemplateviews.ParameterView.
func transformPublishedtemplateviewsParameterViewToParameter(v *publishedtemplateviews.ParameterView) *Parameter {
	if v == nil {
		return nil
	}
	res := &Parameter{
		Name:                  *v.Name,
		Type:                  *v.Type,
		Label:                 *v.Label,
		Index:                 *v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = transformPublishedtemplateviewsRegexpViewToRegexp(v.AllowedPattern)
	}

	return res
}

// transformPublishedtemplateviewsRegexpViewToRegexp builds a value of type
// *Regexp from a value of type *publishedtemplateviews.RegexpView.
func transformPublishedtemplateviewsRegexpViewToRegexp(v *publishedtemplateviews.RegexpView) *Regexp {
	if v == nil {
		return nil
	}
	res := &Regexp{
		Pattern: *v.Pattern,
		Options: v.Options,
	}

	return res
}

// transformPublishedtemplateviewsCredentialsViewToCredentials builds a value
// of type *Credentials from a value of type
// *publishedtemplateviews.CredentialsView.
func transformPublishedtemplateviewsCredentialsViewToCredentials(v *publishedtemplateviews.CredentialsView) *Credentials {
	if v == nil {
		return nil
	}
	res := &Credentials{
		Name:        *v.Name,
		Label:       *v.Label,
		Description: v.Description,
	}
	if v.Schemes != nil {
		res.Schemes = make([]string, len(v.Schemes))
		for i, val := range v.Schemes {
			res.Schemes[i] = val
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*CredentialsTag, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = transformPublishedtemplateviewsCredentialsTagViewToCredentialsTag(val)
		}
	}

	return res
}

// transformPublishedtemplateviewsCredentialsTagViewToCredentialsTag builds a
// value of type *CredentialsTag from a value of type
// *publishedtemplateviews.CredentialsTagView.
func transformPublishedtemplateviewsCredentialsTagViewToCredentialsTag(v *publishedtemplateviews.CredentialsTagView) *CredentialsTag {
	if v == nil {
		return nil
	}
	res := &CredentialsTag{
		Key:   *v.Key,
		Value: *v.Value,
	}

	return res
}

// transformUserToPublishedtemplateviewsUserView builds a value of type
// *publishedtemplateviews.UserView from a value of type *User.
func transformUserToPublishedtemplateviewsUserView(v *User) *publishedtemplateviews.UserView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.UserView{
		ID:    &v.ID,
		Email: &v.Email,
		Name:  &v.Name,
	}

	return res
}

// transformPermissionToPublishedtemplateviewsPermissionView builds a value of
// type *publishedtemplateviews.PermissionView from a value of type *Permission.
func transformPermissionToPublishedtemplateviewsPermissionView(v *Permission) *publishedtemplateviews.PermissionView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.PermissionView{
		Name:  &v.Name,
		Label: v.Label,
	}
	if v.Resources != nil {
		res.Resources = make([]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = val
		}
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}

	return res
}

// transformParameterToPublishedtemplateviewsParameterView builds a value of
// type *publishedtemplateviews.ParameterView from a value of type *Parameter.
func transformParameterToPublishedtemplateviewsParameterView(v *Parameter) *publishedtemplateviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.ParameterView{
		Name:                  &v.Name,
		Type:                  &v.Type,
		Label:                 &v.Label,
		Index:                 &v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                &v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = transformRegexpToPublishedtemplateviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// transformRegexpToPublishedtemplateviewsRegexpView builds a value of type
// *publishedtemplateviews.RegexpView from a value of type *Regexp.
func transformRegexpToPublishedtemplateviewsRegexpView(v *Regexp) *publishedtemplateviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.RegexpView{
		Pattern: &v.Pattern,
		Options: v.Options,
	}

	return res
}

// transformCredentialsToPublishedtemplateviewsCredentialsView builds a value
// of type *publishedtemplateviews.CredentialsView from a value of type
// *Credentials.
func transformCredentialsToPublishedtemplateviewsCredentialsView(v *Credentials) *publishedtemplateviews.CredentialsView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.CredentialsView{
		Name:        &v.Name,
		Label:       &v.Label,
		Description: v.Description,
	}
	if v.Schemes != nil {
		res.Schemes = make([]string, len(v.Schemes))
		for i, val := range v.Schemes {
			res.Schemes[i] = val
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*publishedtemplateviews.CredentialsTagView, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = transformCredentialsTagToPublishedtemplateviewsCredentialsTagView(val)
		}
	}

	return res
}

// transformCredentialsTagToPublishedtemplateviewsCredentialsTagView builds a
// value of type *publishedtemplateviews.CredentialsTagView from a value of
// type *CredentialsTag.
func transformCredentialsTagToPublishedtemplateviewsCredentialsTagView(v *CredentialsTag) *publishedtemplateviews.CredentialsTagView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.CredentialsTagView{
		Key:   &v.Key,
		Value: &v.Value,
	}

	return res
}
