// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Governance HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	actionstatusc "github.com/rightscale/policy_sdk/sdk/http/action_status/client"
	appliedpolicyc "github.com/rightscale/policy_sdk/sdk/http/applied_policy/client"
	approvalc "github.com/rightscale/policy_sdk/sdk/http/approval/client"
	archivedincidentc "github.com/rightscale/policy_sdk/sdk/http/archived_incident/client"
	incidentc "github.com/rightscale/policy_sdk/sdk/http/incident/client"
	incidentaggregatec "github.com/rightscale/policy_sdk/sdk/http/incident_aggregate/client"
	policyaggregatec "github.com/rightscale/policy_sdk/sdk/http/policy_aggregate/client"
	policytemplatec "github.com/rightscale/policy_sdk/sdk/http/policy_template/client"
	publishedtemplatec "github.com/rightscale/policy_sdk/sdk/http/published_template/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `action-status (index|show)
applied-policy (create|delete|show|show-status|show-log|index|evaluate|update)
approval (show|index|approve|deny)
archived-incident (show|index|index-escalations|index-resolutions)
incident (show|index|resolve|index-escalations|index-resolutions|run-action)
incident-aggregate (show|show-non-catalog|index)
policy-aggregate (create|update|delete|show|show-non-catalog|index)
policy-template (compile|upload|update|retrieve-data|show|index|delete)
published-template (create|update|hide|unhide|delete|show|index)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` action-status index --project-id 60073 --view "default" --incident-id "5b06ead5e0dacc007058c784" --applied-policy-id "5b06ead5e0dacc007058c123" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` applied-policy create --body '{
      "credentials": {
         "cred_aws": "aws_default"
      },
      "description": "Delete unattached volumes after 24 hours in US-East.",
      "dry_run": false,
      "frequency": "daily",
      "name": "us_east_unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "severity": "low",
      "skip_approvals": false,
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --project-id 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` approval show --project-id 60073 --approval-request-id "5b36ad26d4c1990070df726a" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` archived-incident show --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` incident show --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		actionStatusFlags = flag.NewFlagSet("action-status", flag.ContinueOnError)

		actionStatusIndexFlags               = flag.NewFlagSet("index", flag.ExitOnError)
		actionStatusIndexProjectIDFlag       = actionStatusIndexFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		actionStatusIndexViewFlag            = actionStatusIndexFlags.String("view", "", "")
		actionStatusIndexIncidentIDFlag      = actionStatusIndexFlags.String("incident-id", "", "")
		actionStatusIndexAppliedPolicyIDFlag = actionStatusIndexFlags.String("applied-policy-id", "", "")
		actionStatusIndexAPIVersionFlag      = actionStatusIndexFlags.String("api-version", "REQUIRED", "")
		actionStatusIndexEtagFlag            = actionStatusIndexFlags.String("etag", "", "")
		actionStatusIndexTokenFlag           = actionStatusIndexFlags.String("token", "", "")

		actionStatusShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		actionStatusShowProjectIDFlag  = actionStatusShowFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		actionStatusShowIDFlag         = actionStatusShowFlags.String("id", "REQUIRED", "id identifies an action status by ID.")
		actionStatusShowViewFlag       = actionStatusShowFlags.String("view", "", "")
		actionStatusShowAPIVersionFlag = actionStatusShowFlags.String("api-version", "REQUIRED", "")
		actionStatusShowTokenFlag      = actionStatusShowFlags.String("token", "", "")

		appliedPolicyFlags = flag.NewFlagSet("applied-policy", flag.ContinueOnError)

		appliedPolicyCreateFlags          = flag.NewFlagSet("create", flag.ExitOnError)
		appliedPolicyCreateBodyFlag       = appliedPolicyCreateFlags.String("body", "REQUIRED", "")
		appliedPolicyCreateProjectIDFlag  = appliedPolicyCreateFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyCreateAPIVersionFlag = appliedPolicyCreateFlags.String("api-version", "REQUIRED", "")
		appliedPolicyCreateTokenFlag      = appliedPolicyCreateFlags.String("token", "", "")

		appliedPolicyDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		appliedPolicyDeleteProjectIDFlag  = appliedPolicyDeleteFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyDeletePolicyIDFlag   = appliedPolicyDeleteFlags.String("policy-id", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyDeleteAPIVersionFlag = appliedPolicyDeleteFlags.String("api-version", "REQUIRED", "")
		appliedPolicyDeleteTokenFlag      = appliedPolicyDeleteFlags.String("token", "", "")

		appliedPolicyShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		appliedPolicyShowProjectIDFlag  = appliedPolicyShowFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyShowPolicyIDFlag   = appliedPolicyShowFlags.String("policy-id", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyShowViewFlag       = appliedPolicyShowFlags.String("view", "", "")
		appliedPolicyShowAPIVersionFlag = appliedPolicyShowFlags.String("api-version", "REQUIRED", "")
		appliedPolicyShowTokenFlag      = appliedPolicyShowFlags.String("token", "", "")

		appliedPolicyShowStatusFlags          = flag.NewFlagSet("show-status", flag.ExitOnError)
		appliedPolicyShowStatusProjectIDFlag  = appliedPolicyShowStatusFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyShowStatusPolicyIDFlag   = appliedPolicyShowStatusFlags.String("policy-id", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyShowStatusAPIVersionFlag = appliedPolicyShowStatusFlags.String("api-version", "REQUIRED", "")
		appliedPolicyShowStatusTokenFlag      = appliedPolicyShowStatusFlags.String("token", "", "")

		appliedPolicyShowLogFlags          = flag.NewFlagSet("show-log", flag.ExitOnError)
		appliedPolicyShowLogProjectIDFlag  = appliedPolicyShowLogFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyShowLogPolicyIDFlag   = appliedPolicyShowLogFlags.String("policy-id", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyShowLogAPIVersionFlag = appliedPolicyShowLogFlags.String("api-version", "REQUIRED", "")
		appliedPolicyShowLogEtagFlag       = appliedPolicyShowLogFlags.String("etag", "", "")
		appliedPolicyShowLogTokenFlag      = appliedPolicyShowLogFlags.String("token", "", "")

		appliedPolicyIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		appliedPolicyIndexProjectIDFlag  = appliedPolicyIndexFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyIndexViewFlag       = appliedPolicyIndexFlags.String("view", "", "")
		appliedPolicyIndexNameFlag       = appliedPolicyIndexFlags.String("name", "", "")
		appliedPolicyIndexAPIVersionFlag = appliedPolicyIndexFlags.String("api-version", "REQUIRED", "")
		appliedPolicyIndexEtagFlag       = appliedPolicyIndexFlags.String("etag", "", "")
		appliedPolicyIndexTokenFlag      = appliedPolicyIndexFlags.String("token", "", "")

		appliedPolicyEvaluateFlags          = flag.NewFlagSet("evaluate", flag.ExitOnError)
		appliedPolicyEvaluateProjectIDFlag  = appliedPolicyEvaluateFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyEvaluatePolicyIDFlag   = appliedPolicyEvaluateFlags.String("policy-id", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyEvaluateAPIVersionFlag = appliedPolicyEvaluateFlags.String("api-version", "REQUIRED", "")
		appliedPolicyEvaluateTokenFlag      = appliedPolicyEvaluateFlags.String("token", "", "")

		appliedPolicyUpdateFlags          = flag.NewFlagSet("update", flag.ExitOnError)
		appliedPolicyUpdateBodyFlag       = appliedPolicyUpdateFlags.String("body", "REQUIRED", "")
		appliedPolicyUpdateProjectIDFlag  = appliedPolicyUpdateFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyUpdatePolicyIDFlag   = appliedPolicyUpdateFlags.String("policy-id", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyUpdateAPIVersionFlag = appliedPolicyUpdateFlags.String("api-version", "REQUIRED", "")
		appliedPolicyUpdateTokenFlag      = appliedPolicyUpdateFlags.String("token", "", "")

		approvalFlags = flag.NewFlagSet("approval", flag.ContinueOnError)

		approvalShowFlags                 = flag.NewFlagSet("show", flag.ExitOnError)
		approvalShowProjectIDFlag         = approvalShowFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		approvalShowApprovalRequestIDFlag = approvalShowFlags.String("approval-request-id", "REQUIRED", "approval_request_id identifes an approval by its ID.")
		approvalShowViewFlag              = approvalShowFlags.String("view", "", "")
		approvalShowAPIVersionFlag        = approvalShowFlags.String("api-version", "REQUIRED", "")
		approvalShowTokenFlag             = approvalShowFlags.String("token", "", "")

		approvalIndexFlags           = flag.NewFlagSet("index", flag.ExitOnError)
		approvalIndexProjectIDFlag   = approvalIndexFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		approvalIndexViewFlag        = approvalIndexFlags.String("view", "", "")
		approvalIndexIDFlag          = approvalIndexFlags.String("id", "", "")
		approvalIndexSubjectKindFlag = approvalIndexFlags.String("subject-kind", "", "")
		approvalIndexSubjectHrefFlag = approvalIndexFlags.String("subject-href", "", "")
		approvalIndexStatusFlag      = approvalIndexFlags.String("status", "", "")
		approvalIndexAPIVersionFlag  = approvalIndexFlags.String("api-version", "REQUIRED", "")
		approvalIndexEtagFlag        = approvalIndexFlags.String("etag", "", "")
		approvalIndexTokenFlag       = approvalIndexFlags.String("token", "", "")

		approvalApproveFlags                 = flag.NewFlagSet("approve", flag.ExitOnError)
		approvalApproveBodyFlag              = approvalApproveFlags.String("body", "REQUIRED", "")
		approvalApproveProjectIDFlag         = approvalApproveFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		approvalApproveApprovalRequestIDFlag = approvalApproveFlags.String("approval-request-id", "REQUIRED", "approval_request_id identifes an approval request by its ID.")
		approvalApproveAPIVersionFlag        = approvalApproveFlags.String("api-version", "REQUIRED", "")
		approvalApproveTokenFlag             = approvalApproveFlags.String("token", "", "")

		approvalDenyFlags                 = flag.NewFlagSet("deny", flag.ExitOnError)
		approvalDenyBodyFlag              = approvalDenyFlags.String("body", "REQUIRED", "")
		approvalDenyProjectIDFlag         = approvalDenyFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		approvalDenyApprovalRequestIDFlag = approvalDenyFlags.String("approval-request-id", "REQUIRED", "approval_request_id identifes an approval request by its ID.")
		approvalDenyAPIVersionFlag        = approvalDenyFlags.String("api-version", "REQUIRED", "")
		approvalDenyTokenFlag             = approvalDenyFlags.String("token", "", "")

		archivedIncidentFlags = flag.NewFlagSet("archived-incident", flag.ContinueOnError)

		archivedIncidentShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		archivedIncidentShowProjectIDFlag  = archivedIncidentShowFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		archivedIncidentShowIncidentIDFlag = archivedIncidentShowFlags.String("incident-id", "REQUIRED", "incident_id identifies an archived incident by ID.")
		archivedIncidentShowViewFlag       = archivedIncidentShowFlags.String("view", "", "")
		archivedIncidentShowAPIVersionFlag = archivedIncidentShowFlags.String("api-version", "REQUIRED", "")
		archivedIncidentShowEtagFlag       = archivedIncidentShowFlags.String("etag", "", "")
		archivedIncidentShowTokenFlag      = archivedIncidentShowFlags.String("token", "", "")

		archivedIncidentIndexFlags               = flag.NewFlagSet("index", flag.ExitOnError)
		archivedIncidentIndexProjectIDFlag       = archivedIncidentIndexFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		archivedIncidentIndexViewFlag            = archivedIncidentIndexFlags.String("view", "", "")
		archivedIncidentIndexStateFlag           = archivedIncidentIndexFlags.String("state", "", "")
		archivedIncidentIndexAppliedPolicyIDFlag = archivedIncidentIndexFlags.String("applied-policy-id", "", "")
		archivedIncidentIndexAPIVersionFlag      = archivedIncidentIndexFlags.String("api-version", "REQUIRED", "")
		archivedIncidentIndexEtagFlag            = archivedIncidentIndexFlags.String("etag", "", "")
		archivedIncidentIndexTokenFlag           = archivedIncidentIndexFlags.String("token", "", "")

		archivedIncidentIndexEscalationsFlags          = flag.NewFlagSet("index-escalations", flag.ExitOnError)
		archivedIncidentIndexEscalationsProjectIDFlag  = archivedIncidentIndexEscalationsFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		archivedIncidentIndexEscalationsIncidentIDFlag = archivedIncidentIndexEscalationsFlags.String("incident-id", "REQUIRED", "incident_id identifies an archived incident by ID.")
		archivedIncidentIndexEscalationsAPIVersionFlag = archivedIncidentIndexEscalationsFlags.String("api-version", "REQUIRED", "")
		archivedIncidentIndexEscalationsTokenFlag      = archivedIncidentIndexEscalationsFlags.String("token", "", "")

		archivedIncidentIndexResolutionsFlags          = flag.NewFlagSet("index-resolutions", flag.ExitOnError)
		archivedIncidentIndexResolutionsProjectIDFlag  = archivedIncidentIndexResolutionsFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		archivedIncidentIndexResolutionsIncidentIDFlag = archivedIncidentIndexResolutionsFlags.String("incident-id", "REQUIRED", "incident_id identifies an archived incident by ID.")
		archivedIncidentIndexResolutionsAPIVersionFlag = archivedIncidentIndexResolutionsFlags.String("api-version", "REQUIRED", "")
		archivedIncidentIndexResolutionsTokenFlag      = archivedIncidentIndexResolutionsFlags.String("token", "", "")

		incidentFlags = flag.NewFlagSet("incident", flag.ContinueOnError)

		incidentShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		incidentShowProjectIDFlag  = incidentShowFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		incidentShowIncidentIDFlag = incidentShowFlags.String("incident-id", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentShowViewFlag       = incidentShowFlags.String("view", "", "")
		incidentShowAPIVersionFlag = incidentShowFlags.String("api-version", "REQUIRED", "")
		incidentShowEtagFlag       = incidentShowFlags.String("etag", "", "")
		incidentShowTokenFlag      = incidentShowFlags.String("token", "", "")

		incidentIndexFlags               = flag.NewFlagSet("index", flag.ExitOnError)
		incidentIndexProjectIDFlag       = incidentIndexFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		incidentIndexViewFlag            = incidentIndexFlags.String("view", "", "")
		incidentIndexStateFlag           = incidentIndexFlags.String("state", "", "")
		incidentIndexAppliedPolicyIDFlag = incidentIndexFlags.String("applied-policy-id", "", "")
		incidentIndexAPIVersionFlag      = incidentIndexFlags.String("api-version", "REQUIRED", "")
		incidentIndexEtagFlag            = incidentIndexFlags.String("etag", "", "")
		incidentIndexTokenFlag           = incidentIndexFlags.String("token", "", "")

		incidentResolveFlags          = flag.NewFlagSet("resolve", flag.ExitOnError)
		incidentResolveProjectIDFlag  = incidentResolveFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		incidentResolveIncidentIDFlag = incidentResolveFlags.String("incident-id", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentResolveAPIVersionFlag = incidentResolveFlags.String("api-version", "REQUIRED", "")
		incidentResolveEtagFlag       = incidentResolveFlags.String("etag", "", "")
		incidentResolveTokenFlag      = incidentResolveFlags.String("token", "", "")

		incidentIndexEscalationsFlags          = flag.NewFlagSet("index-escalations", flag.ExitOnError)
		incidentIndexEscalationsProjectIDFlag  = incidentIndexEscalationsFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		incidentIndexEscalationsIncidentIDFlag = incidentIndexEscalationsFlags.String("incident-id", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentIndexEscalationsAPIVersionFlag = incidentIndexEscalationsFlags.String("api-version", "REQUIRED", "")
		incidentIndexEscalationsTokenFlag      = incidentIndexEscalationsFlags.String("token", "", "")

		incidentIndexResolutionsFlags          = flag.NewFlagSet("index-resolutions", flag.ExitOnError)
		incidentIndexResolutionsProjectIDFlag  = incidentIndexResolutionsFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		incidentIndexResolutionsIncidentIDFlag = incidentIndexResolutionsFlags.String("incident-id", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentIndexResolutionsAPIVersionFlag = incidentIndexResolutionsFlags.String("api-version", "REQUIRED", "")
		incidentIndexResolutionsTokenFlag      = incidentIndexResolutionsFlags.String("token", "", "")

		incidentRunActionFlags          = flag.NewFlagSet("run-action", flag.ExitOnError)
		incidentRunActionBodyFlag       = incidentRunActionFlags.String("body", "REQUIRED", "")
		incidentRunActionProjectIDFlag  = incidentRunActionFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		incidentRunActionIncidentIDFlag = incidentRunActionFlags.String("incident-id", "REQUIRED", "incident_id identifies an applied policy by ID.")
		incidentRunActionActionIDFlag   = incidentRunActionFlags.String("action-id", "REQUIRED", "action_id identifies an action by id.")
		incidentRunActionAPIVersionFlag = incidentRunActionFlags.String("api-version", "REQUIRED", "")
		incidentRunActionTokenFlag      = incidentRunActionFlags.String("token", "", "")

		incidentAggregateFlags = flag.NewFlagSet("incident-aggregate", flag.ContinueOnError)

		incidentAggregateShowFlags                   = flag.NewFlagSet("show", flag.ExitOnError)
		incidentAggregateShowOrgIDFlag               = incidentAggregateShowFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		incidentAggregateShowIncidentAggregateIDFlag = incidentAggregateShowFlags.String("incident-aggregate-id", "REQUIRED", "incident_aggregate_id identifies an aggregate by ID.")
		incidentAggregateShowViewFlag                = incidentAggregateShowFlags.String("view", "", "")
		incidentAggregateShowAPIVersionFlag          = incidentAggregateShowFlags.String("api-version", "REQUIRED", "")
		incidentAggregateShowEtagFlag                = incidentAggregateShowFlags.String("etag", "", "")
		incidentAggregateShowTokenFlag               = incidentAggregateShowFlags.String("token", "", "")

		incidentAggregateShowNonCatalogFlags          = flag.NewFlagSet("show-non-catalog", flag.ExitOnError)
		incidentAggregateShowNonCatalogOrgIDFlag      = incidentAggregateShowNonCatalogFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		incidentAggregateShowNonCatalogViewFlag       = incidentAggregateShowNonCatalogFlags.String("view", "", "")
		incidentAggregateShowNonCatalogAPIVersionFlag = incidentAggregateShowNonCatalogFlags.String("api-version", "REQUIRED", "")
		incidentAggregateShowNonCatalogEtagFlag       = incidentAggregateShowNonCatalogFlags.String("etag", "", "")
		incidentAggregateShowNonCatalogTokenFlag      = incidentAggregateShowNonCatalogFlags.String("token", "", "")

		incidentAggregateIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		incidentAggregateIndexOrgIDFlag      = incidentAggregateIndexFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		incidentAggregateIndexViewFlag       = incidentAggregateIndexFlags.String("view", "", "")
		incidentAggregateIndexAPIVersionFlag = incidentAggregateIndexFlags.String("api-version", "REQUIRED", "")
		incidentAggregateIndexEtagFlag       = incidentAggregateIndexFlags.String("etag", "", "")
		incidentAggregateIndexTokenFlag      = incidentAggregateIndexFlags.String("token", "", "")

		policyAggregateFlags = flag.NewFlagSet("policy-aggregate", flag.ContinueOnError)

		policyAggregateCreateFlags          = flag.NewFlagSet("create", flag.ExitOnError)
		policyAggregateCreateBodyFlag       = policyAggregateCreateFlags.String("body", "REQUIRED", "")
		policyAggregateCreateOrgIDFlag      = policyAggregateCreateFlags.String("org-id", "REQUIRED", "org_id identifies an org by ID.")
		policyAggregateCreateAPIVersionFlag = policyAggregateCreateFlags.String("api-version", "REQUIRED", "")
		policyAggregateCreateTokenFlag      = policyAggregateCreateFlags.String("token", "", "")

		policyAggregateUpdateFlags                 = flag.NewFlagSet("update", flag.ExitOnError)
		policyAggregateUpdateBodyFlag              = policyAggregateUpdateFlags.String("body", "REQUIRED", "")
		policyAggregateUpdateOrgIDFlag             = policyAggregateUpdateFlags.String("org-id", "REQUIRED", "org_id identifies an org by ID.")
		policyAggregateUpdatePolicyAggregateIDFlag = policyAggregateUpdateFlags.String("policy-aggregate-id", "REQUIRED", "policy_aggregate_id identifies an policy aggregate by ID.")
		policyAggregateUpdateAPIVersionFlag        = policyAggregateUpdateFlags.String("api-version", "REQUIRED", "")
		policyAggregateUpdateTokenFlag             = policyAggregateUpdateFlags.String("token", "", "")

		policyAggregateDeleteFlags                 = flag.NewFlagSet("delete", flag.ExitOnError)
		policyAggregateDeleteOrgIDFlag             = policyAggregateDeleteFlags.String("org-id", "REQUIRED", "org_id identifies an org by ID.")
		policyAggregateDeletePolicyAggregateIDFlag = policyAggregateDeleteFlags.String("policy-aggregate-id", "REQUIRED", "policy_aggregate_id identifies a policy aggregate by ID.")
		policyAggregateDeleteAPIVersionFlag        = policyAggregateDeleteFlags.String("api-version", "REQUIRED", "")
		policyAggregateDeleteTokenFlag             = policyAggregateDeleteFlags.String("token", "", "")

		policyAggregateShowFlags                 = flag.NewFlagSet("show", flag.ExitOnError)
		policyAggregateShowOrgIDFlag             = policyAggregateShowFlags.String("org-id", "REQUIRED", "org_id identifies an org by ID.")
		policyAggregateShowPolicyAggregateIDFlag = policyAggregateShowFlags.String("policy-aggregate-id", "REQUIRED", "policy_aggregate_id identifies a policy aggregate by ID.")
		policyAggregateShowViewFlag              = policyAggregateShowFlags.String("view", "", "")
		policyAggregateShowAPIVersionFlag        = policyAggregateShowFlags.String("api-version", "REQUIRED", "")
		policyAggregateShowTokenFlag             = policyAggregateShowFlags.String("token", "", "")

		policyAggregateShowNonCatalogFlags          = flag.NewFlagSet("show-non-catalog", flag.ExitOnError)
		policyAggregateShowNonCatalogOrgIDFlag      = policyAggregateShowNonCatalogFlags.String("org-id", "REQUIRED", "org_id identifies an org by ID.")
		policyAggregateShowNonCatalogViewFlag       = policyAggregateShowNonCatalogFlags.String("view", "", "")
		policyAggregateShowNonCatalogAPIVersionFlag = policyAggregateShowNonCatalogFlags.String("api-version", "REQUIRED", "")
		policyAggregateShowNonCatalogTokenFlag      = policyAggregateShowNonCatalogFlags.String("token", "", "")

		policyAggregateIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		policyAggregateIndexOrgIDFlag      = policyAggregateIndexFlags.String("org-id", "REQUIRED", "org_id identifies an org by ID.")
		policyAggregateIndexViewFlag       = policyAggregateIndexFlags.String("view", "", "")
		policyAggregateIndexNameFlag       = policyAggregateIndexFlags.String("name", "", "")
		policyAggregateIndexAPIVersionFlag = policyAggregateIndexFlags.String("api-version", "REQUIRED", "")
		policyAggregateIndexEtagFlag       = policyAggregateIndexFlags.String("etag", "", "")
		policyAggregateIndexTokenFlag      = policyAggregateIndexFlags.String("token", "", "")

		policyTemplateFlags = flag.NewFlagSet("policy-template", flag.ContinueOnError)

		policyTemplateCompileFlags          = flag.NewFlagSet("compile", flag.ExitOnError)
		policyTemplateCompileBodyFlag       = policyTemplateCompileFlags.String("body", "REQUIRED", "")
		policyTemplateCompileProjectIDFlag  = policyTemplateCompileFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateCompileAPIVersionFlag = policyTemplateCompileFlags.String("api-version", "REQUIRED", "")
		policyTemplateCompileTokenFlag      = policyTemplateCompileFlags.String("token", "", "")

		policyTemplateUploadFlags          = flag.NewFlagSet("upload", flag.ExitOnError)
		policyTemplateUploadBodyFlag       = policyTemplateUploadFlags.String("body", "REQUIRED", "")
		policyTemplateUploadProjectIDFlag  = policyTemplateUploadFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateUploadAPIVersionFlag = policyTemplateUploadFlags.String("api-version", "REQUIRED", "")
		policyTemplateUploadTokenFlag      = policyTemplateUploadFlags.String("token", "", "")

		policyTemplateUpdateFlags          = flag.NewFlagSet("update", flag.ExitOnError)
		policyTemplateUpdateBodyFlag       = policyTemplateUpdateFlags.String("body", "REQUIRED", "")
		policyTemplateUpdateProjectIDFlag  = policyTemplateUpdateFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateUpdateTemplateIDFlag = policyTemplateUpdateFlags.String("template-id", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateUpdateAPIVersionFlag = policyTemplateUpdateFlags.String("api-version", "REQUIRED", "")
		policyTemplateUpdateTokenFlag      = policyTemplateUpdateFlags.String("token", "", "")

		policyTemplateRetrieveDataFlags          = flag.NewFlagSet("retrieve-data", flag.ExitOnError)
		policyTemplateRetrieveDataBodyFlag       = policyTemplateRetrieveDataFlags.String("body", "REQUIRED", "")
		policyTemplateRetrieveDataProjectIDFlag  = policyTemplateRetrieveDataFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateRetrieveDataTemplateIDFlag = policyTemplateRetrieveDataFlags.String("template-id", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateRetrieveDataAPIVersionFlag = policyTemplateRetrieveDataFlags.String("api-version", "REQUIRED", "")
		policyTemplateRetrieveDataTokenFlag      = policyTemplateRetrieveDataFlags.String("token", "", "")

		policyTemplateShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		policyTemplateShowProjectIDFlag  = policyTemplateShowFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateShowTemplateIDFlag = policyTemplateShowFlags.String("template-id", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateShowViewFlag       = policyTemplateShowFlags.String("view", "", "")
		policyTemplateShowAPIVersionFlag = policyTemplateShowFlags.String("api-version", "REQUIRED", "")
		policyTemplateShowTokenFlag      = policyTemplateShowFlags.String("token", "", "")

		policyTemplateIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		policyTemplateIndexProjectIDFlag  = policyTemplateIndexFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateIndexViewFlag       = policyTemplateIndexFlags.String("view", "", "")
		policyTemplateIndexAPIVersionFlag = policyTemplateIndexFlags.String("api-version", "REQUIRED", "")
		policyTemplateIndexEtagFlag       = policyTemplateIndexFlags.String("etag", "", "")
		policyTemplateIndexTokenFlag      = policyTemplateIndexFlags.String("token", "", "")

		policyTemplateDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		policyTemplateDeleteProjectIDFlag  = policyTemplateDeleteFlags.String("project-id", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateDeleteTemplateIDFlag = policyTemplateDeleteFlags.String("template-id", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateDeleteAPIVersionFlag = policyTemplateDeleteFlags.String("api-version", "REQUIRED", "")
		policyTemplateDeleteTokenFlag      = policyTemplateDeleteFlags.String("token", "", "")

		publishedTemplateFlags = flag.NewFlagSet("published-template", flag.ContinueOnError)

		publishedTemplateCreateFlags          = flag.NewFlagSet("create", flag.ExitOnError)
		publishedTemplateCreateBodyFlag       = publishedTemplateCreateFlags.String("body", "REQUIRED", "")
		publishedTemplateCreateOrgIDFlag      = publishedTemplateCreateFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateCreateAPIVersionFlag = publishedTemplateCreateFlags.String("api-version", "REQUIRED", "")
		publishedTemplateCreateTokenFlag      = publishedTemplateCreateFlags.String("token", "", "")

		publishedTemplateUpdateFlags          = flag.NewFlagSet("update", flag.ExitOnError)
		publishedTemplateUpdateBodyFlag       = publishedTemplateUpdateFlags.String("body", "REQUIRED", "")
		publishedTemplateUpdateOrgIDFlag      = publishedTemplateUpdateFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateUpdateTemplateIDFlag = publishedTemplateUpdateFlags.String("template-id", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateUpdateAPIVersionFlag = publishedTemplateUpdateFlags.String("api-version", "REQUIRED", "")
		publishedTemplateUpdateTokenFlag      = publishedTemplateUpdateFlags.String("token", "", "")

		publishedTemplateHideFlags          = flag.NewFlagSet("hide", flag.ExitOnError)
		publishedTemplateHideOrgIDFlag      = publishedTemplateHideFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateHideTemplateIDFlag = publishedTemplateHideFlags.String("template-id", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateHideAPIVersionFlag = publishedTemplateHideFlags.String("api-version", "REQUIRED", "")
		publishedTemplateHideTokenFlag      = publishedTemplateHideFlags.String("token", "", "")

		publishedTemplateUnhideFlags          = flag.NewFlagSet("unhide", flag.ExitOnError)
		publishedTemplateUnhideOrgIDFlag      = publishedTemplateUnhideFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateUnhideTemplateIDFlag = publishedTemplateUnhideFlags.String("template-id", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateUnhideAPIVersionFlag = publishedTemplateUnhideFlags.String("api-version", "REQUIRED", "")
		publishedTemplateUnhideTokenFlag      = publishedTemplateUnhideFlags.String("token", "", "")

		publishedTemplateDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		publishedTemplateDeleteOrgIDFlag      = publishedTemplateDeleteFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateDeleteTemplateIDFlag = publishedTemplateDeleteFlags.String("template-id", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateDeleteAPIVersionFlag = publishedTemplateDeleteFlags.String("api-version", "REQUIRED", "")
		publishedTemplateDeleteTokenFlag      = publishedTemplateDeleteFlags.String("token", "", "")

		publishedTemplateShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		publishedTemplateShowOrgIDFlag      = publishedTemplateShowFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateShowTemplateIDFlag = publishedTemplateShowFlags.String("template-id", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateShowViewFlag       = publishedTemplateShowFlags.String("view", "", "")
		publishedTemplateShowAPIVersionFlag = publishedTemplateShowFlags.String("api-version", "REQUIRED", "")
		publishedTemplateShowTokenFlag      = publishedTemplateShowFlags.String("token", "", "")

		publishedTemplateIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		publishedTemplateIndexOrgIDFlag      = publishedTemplateIndexFlags.String("org-id", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateIndexViewFlag       = publishedTemplateIndexFlags.String("view", "", "")
		publishedTemplateIndexShowHiddenFlag = publishedTemplateIndexFlags.String("show-hidden", "", "")
		publishedTemplateIndexAPIVersionFlag = publishedTemplateIndexFlags.String("api-version", "REQUIRED", "")
		publishedTemplateIndexEtagFlag       = publishedTemplateIndexFlags.String("etag", "", "")
		publishedTemplateIndexTokenFlag      = publishedTemplateIndexFlags.String("token", "", "")
	)
	actionStatusFlags.Usage = actionStatusUsage
	actionStatusIndexFlags.Usage = actionStatusIndexUsage
	actionStatusShowFlags.Usage = actionStatusShowUsage

	appliedPolicyFlags.Usage = appliedPolicyUsage
	appliedPolicyCreateFlags.Usage = appliedPolicyCreateUsage
	appliedPolicyDeleteFlags.Usage = appliedPolicyDeleteUsage
	appliedPolicyShowFlags.Usage = appliedPolicyShowUsage
	appliedPolicyShowStatusFlags.Usage = appliedPolicyShowStatusUsage
	appliedPolicyShowLogFlags.Usage = appliedPolicyShowLogUsage
	appliedPolicyIndexFlags.Usage = appliedPolicyIndexUsage
	appliedPolicyEvaluateFlags.Usage = appliedPolicyEvaluateUsage
	appliedPolicyUpdateFlags.Usage = appliedPolicyUpdateUsage

	approvalFlags.Usage = approvalUsage
	approvalShowFlags.Usage = approvalShowUsage
	approvalIndexFlags.Usage = approvalIndexUsage
	approvalApproveFlags.Usage = approvalApproveUsage
	approvalDenyFlags.Usage = approvalDenyUsage

	archivedIncidentFlags.Usage = archivedIncidentUsage
	archivedIncidentShowFlags.Usage = archivedIncidentShowUsage
	archivedIncidentIndexFlags.Usage = archivedIncidentIndexUsage
	archivedIncidentIndexEscalationsFlags.Usage = archivedIncidentIndexEscalationsUsage
	archivedIncidentIndexResolutionsFlags.Usage = archivedIncidentIndexResolutionsUsage

	incidentFlags.Usage = incidentUsage
	incidentShowFlags.Usage = incidentShowUsage
	incidentIndexFlags.Usage = incidentIndexUsage
	incidentResolveFlags.Usage = incidentResolveUsage
	incidentIndexEscalationsFlags.Usage = incidentIndexEscalationsUsage
	incidentIndexResolutionsFlags.Usage = incidentIndexResolutionsUsage
	incidentRunActionFlags.Usage = incidentRunActionUsage

	incidentAggregateFlags.Usage = incidentAggregateUsage
	incidentAggregateShowFlags.Usage = incidentAggregateShowUsage
	incidentAggregateShowNonCatalogFlags.Usage = incidentAggregateShowNonCatalogUsage
	incidentAggregateIndexFlags.Usage = incidentAggregateIndexUsage

	policyAggregateFlags.Usage = policyAggregateUsage
	policyAggregateCreateFlags.Usage = policyAggregateCreateUsage
	policyAggregateUpdateFlags.Usage = policyAggregateUpdateUsage
	policyAggregateDeleteFlags.Usage = policyAggregateDeleteUsage
	policyAggregateShowFlags.Usage = policyAggregateShowUsage
	policyAggregateShowNonCatalogFlags.Usage = policyAggregateShowNonCatalogUsage
	policyAggregateIndexFlags.Usage = policyAggregateIndexUsage

	policyTemplateFlags.Usage = policyTemplateUsage
	policyTemplateCompileFlags.Usage = policyTemplateCompileUsage
	policyTemplateUploadFlags.Usage = policyTemplateUploadUsage
	policyTemplateUpdateFlags.Usage = policyTemplateUpdateUsage
	policyTemplateRetrieveDataFlags.Usage = policyTemplateRetrieveDataUsage
	policyTemplateShowFlags.Usage = policyTemplateShowUsage
	policyTemplateIndexFlags.Usage = policyTemplateIndexUsage
	policyTemplateDeleteFlags.Usage = policyTemplateDeleteUsage

	publishedTemplateFlags.Usage = publishedTemplateUsage
	publishedTemplateCreateFlags.Usage = publishedTemplateCreateUsage
	publishedTemplateUpdateFlags.Usage = publishedTemplateUpdateUsage
	publishedTemplateHideFlags.Usage = publishedTemplateHideUsage
	publishedTemplateUnhideFlags.Usage = publishedTemplateUnhideUsage
	publishedTemplateDeleteFlags.Usage = publishedTemplateDeleteUsage
	publishedTemplateShowFlags.Usage = publishedTemplateShowUsage
	publishedTemplateIndexFlags.Usage = publishedTemplateIndexUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "action-status":
			svcf = actionStatusFlags
		case "applied-policy":
			svcf = appliedPolicyFlags
		case "approval":
			svcf = approvalFlags
		case "archived-incident":
			svcf = archivedIncidentFlags
		case "incident":
			svcf = incidentFlags
		case "incident-aggregate":
			svcf = incidentAggregateFlags
		case "policy-aggregate":
			svcf = policyAggregateFlags
		case "policy-template":
			svcf = policyTemplateFlags
		case "published-template":
			svcf = publishedTemplateFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "action-status":
			switch epn {
			case "index":
				epf = actionStatusIndexFlags

			case "show":
				epf = actionStatusShowFlags

			}

		case "applied-policy":
			switch epn {
			case "create":
				epf = appliedPolicyCreateFlags

			case "delete":
				epf = appliedPolicyDeleteFlags

			case "show":
				epf = appliedPolicyShowFlags

			case "show-status":
				epf = appliedPolicyShowStatusFlags

			case "show-log":
				epf = appliedPolicyShowLogFlags

			case "index":
				epf = appliedPolicyIndexFlags

			case "evaluate":
				epf = appliedPolicyEvaluateFlags

			case "update":
				epf = appliedPolicyUpdateFlags

			}

		case "approval":
			switch epn {
			case "show":
				epf = approvalShowFlags

			case "index":
				epf = approvalIndexFlags

			case "approve":
				epf = approvalApproveFlags

			case "deny":
				epf = approvalDenyFlags

			}

		case "archived-incident":
			switch epn {
			case "show":
				epf = archivedIncidentShowFlags

			case "index":
				epf = archivedIncidentIndexFlags

			case "index-escalations":
				epf = archivedIncidentIndexEscalationsFlags

			case "index-resolutions":
				epf = archivedIncidentIndexResolutionsFlags

			}

		case "incident":
			switch epn {
			case "show":
				epf = incidentShowFlags

			case "index":
				epf = incidentIndexFlags

			case "resolve":
				epf = incidentResolveFlags

			case "index-escalations":
				epf = incidentIndexEscalationsFlags

			case "index-resolutions":
				epf = incidentIndexResolutionsFlags

			case "run-action":
				epf = incidentRunActionFlags

			}

		case "incident-aggregate":
			switch epn {
			case "show":
				epf = incidentAggregateShowFlags

			case "show-non-catalog":
				epf = incidentAggregateShowNonCatalogFlags

			case "index":
				epf = incidentAggregateIndexFlags

			}

		case "policy-aggregate":
			switch epn {
			case "create":
				epf = policyAggregateCreateFlags

			case "update":
				epf = policyAggregateUpdateFlags

			case "delete":
				epf = policyAggregateDeleteFlags

			case "show":
				epf = policyAggregateShowFlags

			case "show-non-catalog":
				epf = policyAggregateShowNonCatalogFlags

			case "index":
				epf = policyAggregateIndexFlags

			}

		case "policy-template":
			switch epn {
			case "compile":
				epf = policyTemplateCompileFlags

			case "upload":
				epf = policyTemplateUploadFlags

			case "update":
				epf = policyTemplateUpdateFlags

			case "retrieve-data":
				epf = policyTemplateRetrieveDataFlags

			case "show":
				epf = policyTemplateShowFlags

			case "index":
				epf = policyTemplateIndexFlags

			case "delete":
				epf = policyTemplateDeleteFlags

			}

		case "published-template":
			switch epn {
			case "create":
				epf = publishedTemplateCreateFlags

			case "update":
				epf = publishedTemplateUpdateFlags

			case "hide":
				epf = publishedTemplateHideFlags

			case "unhide":
				epf = publishedTemplateUnhideFlags

			case "delete":
				epf = publishedTemplateDeleteFlags

			case "show":
				epf = publishedTemplateShowFlags

			case "index":
				epf = publishedTemplateIndexFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "action-status":
			c := actionstatusc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "index":
				endpoint = c.Index()
				data, err = actionstatusc.BuildIndexPayload(*actionStatusIndexProjectIDFlag, *actionStatusIndexViewFlag, *actionStatusIndexIncidentIDFlag, *actionStatusIndexAppliedPolicyIDFlag, *actionStatusIndexAPIVersionFlag, *actionStatusIndexEtagFlag, *actionStatusIndexTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = actionstatusc.BuildShowPayload(*actionStatusShowProjectIDFlag, *actionStatusShowIDFlag, *actionStatusShowViewFlag, *actionStatusShowAPIVersionFlag, *actionStatusShowTokenFlag)
			}
		case "applied-policy":
			c := appliedpolicyc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = appliedpolicyc.BuildCreatePayload(*appliedPolicyCreateBodyFlag, *appliedPolicyCreateProjectIDFlag, *appliedPolicyCreateAPIVersionFlag, *appliedPolicyCreateTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = appliedpolicyc.BuildDeletePayload(*appliedPolicyDeleteProjectIDFlag, *appliedPolicyDeletePolicyIDFlag, *appliedPolicyDeleteAPIVersionFlag, *appliedPolicyDeleteTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = appliedpolicyc.BuildShowPayload(*appliedPolicyShowProjectIDFlag, *appliedPolicyShowPolicyIDFlag, *appliedPolicyShowViewFlag, *appliedPolicyShowAPIVersionFlag, *appliedPolicyShowTokenFlag)
			case "show-status":
				endpoint = c.ShowStatus()
				data, err = appliedpolicyc.BuildShowStatusPayload(*appliedPolicyShowStatusProjectIDFlag, *appliedPolicyShowStatusPolicyIDFlag, *appliedPolicyShowStatusAPIVersionFlag, *appliedPolicyShowStatusTokenFlag)
			case "show-log":
				endpoint = c.ShowLog()
				data, err = appliedpolicyc.BuildShowLogPayload(*appliedPolicyShowLogProjectIDFlag, *appliedPolicyShowLogPolicyIDFlag, *appliedPolicyShowLogAPIVersionFlag, *appliedPolicyShowLogEtagFlag, *appliedPolicyShowLogTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = appliedpolicyc.BuildIndexPayload(*appliedPolicyIndexProjectIDFlag, *appliedPolicyIndexViewFlag, *appliedPolicyIndexNameFlag, *appliedPolicyIndexAPIVersionFlag, *appliedPolicyIndexEtagFlag, *appliedPolicyIndexTokenFlag)
			case "evaluate":
				endpoint = c.Evaluate()
				data, err = appliedpolicyc.BuildEvaluatePayload(*appliedPolicyEvaluateProjectIDFlag, *appliedPolicyEvaluatePolicyIDFlag, *appliedPolicyEvaluateAPIVersionFlag, *appliedPolicyEvaluateTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = appliedpolicyc.BuildUpdatePayload(*appliedPolicyUpdateBodyFlag, *appliedPolicyUpdateProjectIDFlag, *appliedPolicyUpdatePolicyIDFlag, *appliedPolicyUpdateAPIVersionFlag, *appliedPolicyUpdateTokenFlag)
			}
		case "approval":
			c := approvalc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = approvalc.BuildShowPayload(*approvalShowProjectIDFlag, *approvalShowApprovalRequestIDFlag, *approvalShowViewFlag, *approvalShowAPIVersionFlag, *approvalShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = approvalc.BuildIndexPayload(*approvalIndexProjectIDFlag, *approvalIndexViewFlag, *approvalIndexIDFlag, *approvalIndexSubjectKindFlag, *approvalIndexSubjectHrefFlag, *approvalIndexStatusFlag, *approvalIndexAPIVersionFlag, *approvalIndexEtagFlag, *approvalIndexTokenFlag)
			case "approve":
				endpoint = c.Approve()
				data, err = approvalc.BuildApprovePayload(*approvalApproveBodyFlag, *approvalApproveProjectIDFlag, *approvalApproveApprovalRequestIDFlag, *approvalApproveAPIVersionFlag, *approvalApproveTokenFlag)
			case "deny":
				endpoint = c.Deny()
				data, err = approvalc.BuildDenyPayload(*approvalDenyBodyFlag, *approvalDenyProjectIDFlag, *approvalDenyApprovalRequestIDFlag, *approvalDenyAPIVersionFlag, *approvalDenyTokenFlag)
			}
		case "archived-incident":
			c := archivedincidentc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = archivedincidentc.BuildShowPayload(*archivedIncidentShowProjectIDFlag, *archivedIncidentShowIncidentIDFlag, *archivedIncidentShowViewFlag, *archivedIncidentShowAPIVersionFlag, *archivedIncidentShowEtagFlag, *archivedIncidentShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = archivedincidentc.BuildIndexPayload(*archivedIncidentIndexProjectIDFlag, *archivedIncidentIndexViewFlag, *archivedIncidentIndexStateFlag, *archivedIncidentIndexAppliedPolicyIDFlag, *archivedIncidentIndexAPIVersionFlag, *archivedIncidentIndexEtagFlag, *archivedIncidentIndexTokenFlag)
			case "index-escalations":
				endpoint = c.IndexEscalations()
				data, err = archivedincidentc.BuildIndexEscalationsPayload(*archivedIncidentIndexEscalationsProjectIDFlag, *archivedIncidentIndexEscalationsIncidentIDFlag, *archivedIncidentIndexEscalationsAPIVersionFlag, *archivedIncidentIndexEscalationsTokenFlag)
			case "index-resolutions":
				endpoint = c.IndexResolutions()
				data, err = archivedincidentc.BuildIndexResolutionsPayload(*archivedIncidentIndexResolutionsProjectIDFlag, *archivedIncidentIndexResolutionsIncidentIDFlag, *archivedIncidentIndexResolutionsAPIVersionFlag, *archivedIncidentIndexResolutionsTokenFlag)
			}
		case "incident":
			c := incidentc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = incidentc.BuildShowPayload(*incidentShowProjectIDFlag, *incidentShowIncidentIDFlag, *incidentShowViewFlag, *incidentShowAPIVersionFlag, *incidentShowEtagFlag, *incidentShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = incidentc.BuildIndexPayload(*incidentIndexProjectIDFlag, *incidentIndexViewFlag, *incidentIndexStateFlag, *incidentIndexAppliedPolicyIDFlag, *incidentIndexAPIVersionFlag, *incidentIndexEtagFlag, *incidentIndexTokenFlag)
			case "resolve":
				endpoint = c.Resolve()
				data, err = incidentc.BuildResolvePayload(*incidentResolveProjectIDFlag, *incidentResolveIncidentIDFlag, *incidentResolveAPIVersionFlag, *incidentResolveEtagFlag, *incidentResolveTokenFlag)
			case "index-escalations":
				endpoint = c.IndexEscalations()
				data, err = incidentc.BuildIndexEscalationsPayload(*incidentIndexEscalationsProjectIDFlag, *incidentIndexEscalationsIncidentIDFlag, *incidentIndexEscalationsAPIVersionFlag, *incidentIndexEscalationsTokenFlag)
			case "index-resolutions":
				endpoint = c.IndexResolutions()
				data, err = incidentc.BuildIndexResolutionsPayload(*incidentIndexResolutionsProjectIDFlag, *incidentIndexResolutionsIncidentIDFlag, *incidentIndexResolutionsAPIVersionFlag, *incidentIndexResolutionsTokenFlag)
			case "run-action":
				endpoint = c.RunAction()
				data, err = incidentc.BuildRunActionPayload(*incidentRunActionBodyFlag, *incidentRunActionProjectIDFlag, *incidentRunActionIncidentIDFlag, *incidentRunActionActionIDFlag, *incidentRunActionAPIVersionFlag, *incidentRunActionTokenFlag)
			}
		case "incident-aggregate":
			c := incidentaggregatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = incidentaggregatec.BuildShowPayload(*incidentAggregateShowOrgIDFlag, *incidentAggregateShowIncidentAggregateIDFlag, *incidentAggregateShowViewFlag, *incidentAggregateShowAPIVersionFlag, *incidentAggregateShowEtagFlag, *incidentAggregateShowTokenFlag)
			case "show-non-catalog":
				endpoint = c.ShowNonCatalog()
				data, err = incidentaggregatec.BuildShowNonCatalogPayload(*incidentAggregateShowNonCatalogOrgIDFlag, *incidentAggregateShowNonCatalogViewFlag, *incidentAggregateShowNonCatalogAPIVersionFlag, *incidentAggregateShowNonCatalogEtagFlag, *incidentAggregateShowNonCatalogTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = incidentaggregatec.BuildIndexPayload(*incidentAggregateIndexOrgIDFlag, *incidentAggregateIndexViewFlag, *incidentAggregateIndexAPIVersionFlag, *incidentAggregateIndexEtagFlag, *incidentAggregateIndexTokenFlag)
			}
		case "policy-aggregate":
			c := policyaggregatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = policyaggregatec.BuildCreatePayload(*policyAggregateCreateBodyFlag, *policyAggregateCreateOrgIDFlag, *policyAggregateCreateAPIVersionFlag, *policyAggregateCreateTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = policyaggregatec.BuildUpdatePayload(*policyAggregateUpdateBodyFlag, *policyAggregateUpdateOrgIDFlag, *policyAggregateUpdatePolicyAggregateIDFlag, *policyAggregateUpdateAPIVersionFlag, *policyAggregateUpdateTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = policyaggregatec.BuildDeletePayload(*policyAggregateDeleteOrgIDFlag, *policyAggregateDeletePolicyAggregateIDFlag, *policyAggregateDeleteAPIVersionFlag, *policyAggregateDeleteTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = policyaggregatec.BuildShowPayload(*policyAggregateShowOrgIDFlag, *policyAggregateShowPolicyAggregateIDFlag, *policyAggregateShowViewFlag, *policyAggregateShowAPIVersionFlag, *policyAggregateShowTokenFlag)
			case "show-non-catalog":
				endpoint = c.ShowNonCatalog()
				data, err = policyaggregatec.BuildShowNonCatalogPayload(*policyAggregateShowNonCatalogOrgIDFlag, *policyAggregateShowNonCatalogViewFlag, *policyAggregateShowNonCatalogAPIVersionFlag, *policyAggregateShowNonCatalogTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = policyaggregatec.BuildIndexPayload(*policyAggregateIndexOrgIDFlag, *policyAggregateIndexViewFlag, *policyAggregateIndexNameFlag, *policyAggregateIndexAPIVersionFlag, *policyAggregateIndexEtagFlag, *policyAggregateIndexTokenFlag)
			}
		case "policy-template":
			c := policytemplatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "compile":
				endpoint = c.Compile()
				data, err = policytemplatec.BuildCompilePayload(*policyTemplateCompileBodyFlag, *policyTemplateCompileProjectIDFlag, *policyTemplateCompileAPIVersionFlag, *policyTemplateCompileTokenFlag)
			case "upload":
				endpoint = c.Upload()
				data, err = policytemplatec.BuildUploadPayload(*policyTemplateUploadBodyFlag, *policyTemplateUploadProjectIDFlag, *policyTemplateUploadAPIVersionFlag, *policyTemplateUploadTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = policytemplatec.BuildUpdatePayload(*policyTemplateUpdateBodyFlag, *policyTemplateUpdateProjectIDFlag, *policyTemplateUpdateTemplateIDFlag, *policyTemplateUpdateAPIVersionFlag, *policyTemplateUpdateTokenFlag)
			case "retrieve-data":
				endpoint = c.RetrieveData()
				data, err = policytemplatec.BuildRetrieveDataPayload(*policyTemplateRetrieveDataBodyFlag, *policyTemplateRetrieveDataProjectIDFlag, *policyTemplateRetrieveDataTemplateIDFlag, *policyTemplateRetrieveDataAPIVersionFlag, *policyTemplateRetrieveDataTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = policytemplatec.BuildShowPayload(*policyTemplateShowProjectIDFlag, *policyTemplateShowTemplateIDFlag, *policyTemplateShowViewFlag, *policyTemplateShowAPIVersionFlag, *policyTemplateShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = policytemplatec.BuildIndexPayload(*policyTemplateIndexProjectIDFlag, *policyTemplateIndexViewFlag, *policyTemplateIndexAPIVersionFlag, *policyTemplateIndexEtagFlag, *policyTemplateIndexTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = policytemplatec.BuildDeletePayload(*policyTemplateDeleteProjectIDFlag, *policyTemplateDeleteTemplateIDFlag, *policyTemplateDeleteAPIVersionFlag, *policyTemplateDeleteTokenFlag)
			}
		case "published-template":
			c := publishedtemplatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = publishedtemplatec.BuildCreatePayload(*publishedTemplateCreateBodyFlag, *publishedTemplateCreateOrgIDFlag, *publishedTemplateCreateAPIVersionFlag, *publishedTemplateCreateTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = publishedtemplatec.BuildUpdatePayload(*publishedTemplateUpdateBodyFlag, *publishedTemplateUpdateOrgIDFlag, *publishedTemplateUpdateTemplateIDFlag, *publishedTemplateUpdateAPIVersionFlag, *publishedTemplateUpdateTokenFlag)
			case "hide":
				endpoint = c.Hide()
				data, err = publishedtemplatec.BuildHidePayload(*publishedTemplateHideOrgIDFlag, *publishedTemplateHideTemplateIDFlag, *publishedTemplateHideAPIVersionFlag, *publishedTemplateHideTokenFlag)
			case "unhide":
				endpoint = c.Unhide()
				data, err = publishedtemplatec.BuildUnhidePayload(*publishedTemplateUnhideOrgIDFlag, *publishedTemplateUnhideTemplateIDFlag, *publishedTemplateUnhideAPIVersionFlag, *publishedTemplateUnhideTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = publishedtemplatec.BuildDeletePayload(*publishedTemplateDeleteOrgIDFlag, *publishedTemplateDeleteTemplateIDFlag, *publishedTemplateDeleteAPIVersionFlag, *publishedTemplateDeleteTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = publishedtemplatec.BuildShowPayload(*publishedTemplateShowOrgIDFlag, *publishedTemplateShowTemplateIDFlag, *publishedTemplateShowViewFlag, *publishedTemplateShowAPIVersionFlag, *publishedTemplateShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = publishedtemplatec.BuildIndexPayload(*publishedTemplateIndexOrgIDFlag, *publishedTemplateIndexViewFlag, *publishedTemplateIndexShowHiddenFlag, *publishedTemplateIndexAPIVersionFlag, *publishedTemplateIndexEtagFlag, *publishedTemplateIndexTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// action-statusUsage displays the usage of the action-status command and its
// subcommands.
func actionStatusUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ActionStatus service interface.
Usage:
    %s [globalflags] action-status COMMAND [flags]

COMMAND:
    index: Index returns a list of action statuses in a project.
    show: Show retrieves the details of an action status.

Additional help:
    %s action-status COMMAND --help
`, os.Args[0], os.Args[0])
}
func actionStatusIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] action-status index -project-id UINT -view STRING -incident-id STRING -applied-policy-id STRING -api-version STRING -etag STRING -token STRING

Index returns a list of action statuses in a project.
    -project-id UINT: project_id identifies a project by ID.
    -view STRING: 
    -incident-id STRING: 
    -applied-policy-id STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` action-status index --project-id 60073 --view "default" --incident-id "5b06ead5e0dacc007058c784" --applied-policy-id "5b06ead5e0dacc007058c123" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func actionStatusShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] action-status show -project-id UINT -id STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of an action status.
    -project-id UINT: project_id identifies a project by ID.
    -id STRING: id identifies an action status by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` action-status show --project-id 60073 --id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// applied-policyUsage displays the usage of the applied-policy command and its
// subcommands.
func appliedPolicyUsage() {
	fmt.Fprintf(os.Stderr, `Service is the AppliedPolicy service interface.
Usage:
    %s [globalflags] applied-policy COMMAND [flags]

COMMAND:
    create: Create applies a policy template to a given project. The applied policy will continually run until deleted.
    delete: Delete stops and deletes an applied policy.
    show: Show retrieves the details of an applied policy.
    show-status: ShowStatus retrieves the evaluation status details of an applied policy.
    show-log: ShowLog retrieves the last evaluation log of an applied policy. *The content type is "text/markdown"*.
    index: Index retrieves the list of applied policies in a project.
    evaluate: Evaluate executes an applied policy evaluation on demand. It does not affect the normal execution schedule.
    update: Updates attributes of an applied policy and immmediately evaluates it. It only affects the normal execution schedule, if the frequency changes

Additional help:
    %s applied-policy COMMAND --help
`, os.Args[0], os.Args[0])
}
func appliedPolicyCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy create -body JSON -project-id UINT -api-version STRING -token STRING

Create applies a policy template to a given project. The applied policy will continually run until deleted.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy create --body '{
      "credentials": {
         "cred_aws": "aws_default"
      },
      "description": "Delete unattached volumes after 24 hours in US-East.",
      "dry_run": false,
      "frequency": "daily",
      "name": "us_east_unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "severity": "low",
      "skip_approvals": false,
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --project-id 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy delete -project-id UINT -policy-id STRING -api-version STRING -token STRING

Delete stops and deletes an applied policy.
    -project-id UINT: project_id identifies a project by ID.
    -policy-id STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy delete --project-id 60073 --policy-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy show -project-id UINT -policy-id STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of an applied policy.
    -project-id UINT: project_id identifies a project by ID.
    -policy-id STRING: policy_id identifies an applied policy by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy show --project-id 60073 --policy-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyShowStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy show-status -project-id UINT -policy-id STRING -api-version STRING -token STRING

ShowStatus retrieves the evaluation status details of an applied policy.
    -project-id UINT: project_id identifies a project by ID.
    -policy-id STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy show-status --project-id 60073 --policy-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyShowLogUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy show-log -project-id UINT -policy-id STRING -api-version STRING -etag STRING -token STRING

ShowLog retrieves the last evaluation log of an applied policy. *The content type is "text/markdown"*.
    -project-id UINT: project_id identifies a project by ID.
    -policy-id STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy show-log --project-id 60073 --policy-id "5b06ead5e0dacc007058c784" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy index -project-id UINT -view STRING -name JSON -api-version STRING -etag STRING -token STRING

Index retrieves the list of applied policies in a project.
    -project-id UINT: project_id identifies a project by ID.
    -view STRING: 
    -name JSON: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy index --project-id 60073 --view "default" --name '[
      "Tag Checker Policy"
   ]' --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyEvaluateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy evaluate -project-id UINT -policy-id STRING -api-version STRING -token STRING

Evaluate executes an applied policy evaluation on demand. It does not affect the normal execution schedule.
    -project-id UINT: project_id identifies a project by ID.
    -policy-id STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy evaluate --project-id 60073 --policy-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy update -body JSON -project-id UINT -policy-id STRING -api-version STRING -token STRING

Updates attributes of an applied policy and immmediately evaluates it. It only affects the normal execution schedule, if the frequency changes
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -policy-id STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy update --body '{
      "description": "Delete unattached volumes after 24 hours in US-East.",
      "dry_run": false,
      "frequency": "daily",
      "name": "us_east_unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "severity": "low",
      "skip_approvals": false
   }' --project-id 60073 --policy-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// approvalUsage displays the usage of the approval command and its subcommands.
func approvalUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Approval service interface.
Usage:
    %s [globalflags] approval COMMAND [flags]

COMMAND:
    show: Show retrieves the details of an approval request.
    index: Index retrieves the list of approval requests in a project.
    approve: Approve approves a single approval request.
    deny: Deny denies a single approval request.

Additional help:
    %s approval COMMAND --help
`, os.Args[0], os.Args[0])
}
func approvalShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval show -project-id UINT -approval-request-id STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of an approval request.
    -project-id UINT: project_id identifies a project by ID.
    -approval-request-id STRING: approval_request_id identifes an approval by its ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval show --project-id 60073 --approval-request-id "5b36ad26d4c1990070df726a" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func approvalIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval index -project-id UINT -view STRING -id JSON -subject-kind STRING -subject-href STRING -status JSON -api-version STRING -etag STRING -token STRING

Index retrieves the list of approval requests in a project.
    -project-id UINT: project_id identifies a project by ID.
    -view STRING: 
    -id JSON: 
    -subject-kind STRING: 
    -subject-href STRING: 
    -status JSON: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval index --project-id 60073 --view "default" --id '[
      "5b36ad26d4c1990070df726a",
      "5b36ad26d4c2000070df726a"
   ]' --subject-kind "gov#incident" --subject-href "/api/governance/projects/60073/5b36ad26d4c1990070df734a" --status '[
      "pending"
   ]' --api-version "1.0" --etag "d41d8cd98f00b204e9800998ecf8427e" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func approvalApproveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval approve -body JSON -project-id UINT -approval-request-id STRING -api-version STRING -token STRING

Approve approves a single approval request.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -approval-request-id STRING: approval_request_id identifes an approval request by its ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval approve --body '{
      "options": [
         {
            "name": "excluded_tags",
            "value": [
               "env:name=staging",
               "custom:save=true"
            ]
         }
      ]
   }' --project-id 60073 --approval-request-id "5b36ad26d4c1990070df726a" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func approvalDenyUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval deny -body JSON -project-id UINT -approval-request-id STRING -api-version STRING -token STRING

Deny denies a single approval request.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -approval-request-id STRING: approval_request_id identifes an approval request by its ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval deny --body '{
      "comment": "The volumes need to be backed up."
   }' --project-id 60073 --approval-request-id "5b36ad26d4c1990070df726a" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// archived-incidentUsage displays the usage of the archived-incident command
// and its subcommands.
func archivedIncidentUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ArchivedIncident service interface.
Usage:
    %s [globalflags] archived-incident COMMAND [flags]

COMMAND:
    show: Show retrieves the details of an archived incident.
    index: Index retrieves the list of archived_incidents in a project.
    index-escalations: IndexEscalations retrieves the status details of all of the escalations for an archived incident.
    index-resolutions: IndexResolutions retrieves the status details of all of the resolutions for an archived incident.

Additional help:
    %s archived-incident COMMAND --help
`, os.Args[0], os.Args[0])
}
func archivedIncidentShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] archived-incident show -project-id UINT -incident-id STRING -view STRING -api-version STRING -etag STRING -token STRING

Show retrieves the details of an archived incident.
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an archived incident by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` archived-incident show --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func archivedIncidentIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] archived-incident index -project-id UINT -view STRING -state JSON -applied-policy-id STRING -api-version STRING -etag STRING -token STRING

Index retrieves the list of archived_incidents in a project.
    -project-id UINT: project_id identifies a project by ID.
    -view STRING: 
    -state JSON: 
    -applied-policy-id STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` archived-incident index --project-id 60073 --view "default" --state '[
      "terminated"
   ]' --applied-policy-id "5b06ead5e0dacc007058c784" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func archivedIncidentIndexEscalationsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] archived-incident index-escalations -project-id UINT -incident-id STRING -api-version STRING -token STRING

IndexEscalations retrieves the status details of all of the escalations for an archived incident.
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an archived incident by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` archived-incident index-escalations --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func archivedIncidentIndexResolutionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] archived-incident index-resolutions -project-id UINT -incident-id STRING -api-version STRING -token STRING

IndexResolutions retrieves the status details of all of the resolutions for an archived incident.
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an archived incident by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` archived-incident index-resolutions --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// incidentUsage displays the usage of the incident command and its subcommands.
func incidentUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Incident service interface.
Usage:
    %s [globalflags] incident COMMAND [flags]

COMMAND:
    show: Show retrieves the details of an incident.
    index: Index retrieves the list of incidents in a project.
    resolve: Resolve resolves an incident by setting it to an inactive state, indicating that it has been addressed.
    index-escalations: IndexEscalations retrieves the status details of all of the escalations for an incident. This API method is deprecated and will no longer be updated as of July 30, 2020. Please use the index_statuses method instead.
    index-resolutions: IndexResolutions retrieves the status details of all of the resolutions for an incident. This API method is deprecated and will no longer be updated as of July 30, 2020. Please use the index_statuses method instead.
    run-action: RunAction executes any action listed in available_actions on an incident. It can run against all resources in an incident or only a selected amount, depending on passed in options. Actions will run in parallel.

Additional help:
    %s incident COMMAND --help
`, os.Args[0], os.Args[0])
}
func incidentShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident show -project-id UINT -incident-id STRING -view STRING -api-version STRING -etag STRING -token STRING

Show retrieves the details of an incident.
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an incident by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident show --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident index -project-id UINT -view STRING -state JSON -applied-policy-id STRING -api-version STRING -etag STRING -token STRING

Index retrieves the list of incidents in a project.
    -project-id UINT: project_id identifies a project by ID.
    -view STRING: 
    -state JSON: 
    -applied-policy-id STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident index --project-id 60073 --view "default" --state '[
      "triggered"
   ]' --applied-policy-id "5b06ead5e0dacc007058c784" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentResolveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident resolve -project-id UINT -incident-id STRING -api-version STRING -etag STRING -token STRING

Resolve resolves an incident by setting it to an inactive state, indicating that it has been addressed.
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an incident by ID.
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident resolve --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentIndexEscalationsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident index-escalations -project-id UINT -incident-id STRING -api-version STRING -token STRING

IndexEscalations retrieves the status details of all of the escalations for an incident. This API method is deprecated and will no longer be updated as of July 30, 2020. Please use the index_statuses method instead.
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an incident by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident index-escalations --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentIndexResolutionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident index-resolutions -project-id UINT -incident-id STRING -api-version STRING -token STRING

IndexResolutions retrieves the status details of all of the resolutions for an incident. This API method is deprecated and will no longer be updated as of July 30, 2020. Please use the index_statuses method instead.
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an incident by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident index-resolutions --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentRunActionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident run-action -body JSON -project-id UINT -incident-id STRING -action-id STRING -api-version STRING -token STRING

RunAction executes any action listed in available_actions on an incident. It can run against all resources in an incident or only a selected amount, depending on passed in options. Actions will run in parallel.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -incident-id STRING: incident_id identifies an applied policy by ID.
    -action-id STRING: action_id identifies an action by id.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident run-action --body '{
      "options": [
         {
            "name": "ids",
            "value": [
               "i-abc",
               "i-bcd"
            ]
         },
         {
            "name": "email",
            "value": [
               "person1@domain.com"
            ]
         }
      ]
   }' --project-id 60073 --incident-id "5b06ead5e0dacc007058c784" --action-id "5b06ead5e0dacc007058c999" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// incident-aggregateUsage displays the usage of the incident-aggregate command
// and its subcommands.
func incidentAggregateUsage() {
	fmt.Fprintf(os.Stderr, `Service is the IncidentAggregate service interface.
Usage:
    %s [globalflags] incident-aggregate COMMAND [flags]

COMMAND:
    show: Show retrieves the details of an aggregate.
    show-non-catalog: ShowNonCatalog retrieves a list of incidents in the non-catalog policy aggregate. These incidents largely originate from dev/test environments.
    index: Index retrieves the list of incident_aggregates in an organization.

Additional help:
    %s incident-aggregate COMMAND --help
`, os.Args[0], os.Args[0])
}
func incidentAggregateShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident-aggregate show -org-id UINT -incident-aggregate-id STRING -view STRING -api-version STRING -etag STRING -token STRING

Show retrieves the details of an aggregate.
    -org-id UINT: org_id identifies an organization by ID.
    -incident-aggregate-id STRING: incident_aggregate_id identifies an aggregate by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident-aggregate show --org-id 60073 --incident-aggregate-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentAggregateShowNonCatalogUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident-aggregate show-non-catalog -org-id UINT -view STRING -api-version STRING -etag STRING -token STRING

ShowNonCatalog retrieves a list of incidents in the non-catalog policy aggregate. These incidents largely originate from dev/test environments.
    -org-id UINT: org_id identifies an organization by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident-aggregate show-non-catalog --org-id 60073 --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentAggregateIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident-aggregate index -org-id UINT -view STRING -api-version STRING -etag STRING -token STRING

Index retrieves the list of incident_aggregates in an organization.
    -org-id UINT: org_id identifies an organization by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident-aggregate index --org-id 60073 --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// policy-aggregateUsage displays the usage of the policy-aggregate command and
// its subcommands.
func policyAggregateUsage() {
	fmt.Fprintf(os.Stderr, `Service is the PolicyAggregate service interface.
Usage:
    %s [globalflags] policy-aggregate COMMAND [flags]

COMMAND:
    create: Create applies a policy template to a given project. The policy aggregate will continually run until deleted.
    update: Update changes the list of projects in a policy aggregate.
    delete: Delete asynchronously stops and deletes a policy aggregate. All individual applied policies in the aggregate will be stopped.
    show: Show retrieves the details of a policy aggregate.
    show-non-catalog: ShowNonCatalog retrieves applied policies that are not part of a regular aggregate. Only applied policies are applied from the project-scoped Template endpoint (as opposed to the org-wide Catalog) are part of this view. These template-based policies should largely be only used for development and testing purposes.
    index: Index retrieves the list of policy aggregates in an org.

Additional help:
    %s policy-aggregate COMMAND --help
`, os.Args[0], os.Args[0])
}
func policyAggregateCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-aggregate create -body JSON -org-id UINT -api-version STRING -token STRING

Create applies a policy template to a given project. The policy aggregate will continually run until deleted.
    -body JSON: 
    -org-id UINT: org_id identifies an org by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-aggregate create --body '{
      "all_projects": false,
      "credentials": {
         "Expedita ipsum iusto.": "Ab soluta qui quisquam."
      },
      "description": "Delete unattached volumes after 24 hours.",
      "dry_run": false,
      "frequency": "daily",
      "name": "unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "project_ids": [
         60072,
         60073
      ],
      "severity": "low",
      "skip_approvals": false,
      "template_href": "/api/governance/orgs/48673/published_templates/59"
   }' --org-id 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyAggregateUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-aggregate update -body JSON -org-id UINT -policy-aggregate-id STRING -api-version STRING -token STRING

Update changes the list of projects in a policy aggregate.
    -body JSON: 
    -org-id UINT: org_id identifies an org by ID.
    -policy-aggregate-id STRING: policy_aggregate_id identifies an policy aggregate by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-aggregate update --body '{
      "description": "Delete unattached volumes after 24 hours.",
      "dry_run": false,
      "excluded_project_ids": [
         60073
      ],
      "frequency": "daily",
      "name": "unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "project_ids": [
         60072
      ],
      "severity": "low",
      "skip_approvals": false
   }' --org-id 60073 --policy-aggregate-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyAggregateDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-aggregate delete -org-id UINT -policy-aggregate-id STRING -api-version STRING -token STRING

Delete asynchronously stops and deletes a policy aggregate. All individual applied policies in the aggregate will be stopped.
    -org-id UINT: org_id identifies an org by ID.
    -policy-aggregate-id STRING: policy_aggregate_id identifies a policy aggregate by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-aggregate delete --org-id 60073 --policy-aggregate-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyAggregateShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-aggregate show -org-id UINT -policy-aggregate-id STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of a policy aggregate.
    -org-id UINT: org_id identifies an org by ID.
    -policy-aggregate-id STRING: policy_aggregate_id identifies a policy aggregate by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-aggregate show --org-id 60073 --policy-aggregate-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyAggregateShowNonCatalogUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-aggregate show-non-catalog -org-id UINT -view STRING -api-version STRING -token STRING

ShowNonCatalog retrieves applied policies that are not part of a regular aggregate. Only applied policies are applied from the project-scoped Template endpoint (as opposed to the org-wide Catalog) are part of this view. These template-based policies should largely be only used for development and testing purposes.
    -org-id UINT: org_id identifies an org by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-aggregate show-non-catalog --org-id 60073 --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyAggregateIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-aggregate index -org-id UINT -view STRING -name JSON -api-version STRING -etag STRING -token STRING

Index retrieves the list of policy aggregates in an org.
    -org-id UINT: org_id identifies an org by ID.
    -view STRING: 
    -name JSON: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-aggregate index --org-id 60073 --view "default" --name '[
      "Tag Checker Policy"
   ]' --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// policy-templateUsage displays the usage of the policy-template command and
// its subcommands.
func policyTemplateUsage() {
	fmt.Fprintf(os.Stderr, `Service is the PolicyTemplate service interface.
Usage:
    %s [globalflags] policy-template COMMAND [flags]

COMMAND:
    compile: Compile compiles a policy template for a project. This is only to be used for checking the syntax of a policy template; the results are not stored.
    upload: Upload uploads a policy template for a project, first compiling it. On failure, an array of syntax errors will be returned.
    update: Update updates a policy template in place for a project, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    retrieve-data: Retrieve Data retrieves the data sources specified in a give policy template.
    show: Show retrieves the details of a policy template.
    index: IndexPolicyTemplates retrieves the list of policy templates in a project.
    delete: Delete deletes a policy template from a project. Deleting a policy template will not delete any applied policies created from the template, they must be stopped explicitly.

Additional help:
    %s policy-template COMMAND --help
`, os.Args[0], os.Args[0])
}
func policyTemplateCompileUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template compile -body JSON -project-id UINT -api-version STRING -token STRING

Compile compiles a policy template for a project. This is only to be used for checking the syntax of a policy template; the results are not stored.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template compile --body '{
      "filename": "file.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --project-id 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template upload -body JSON -project-id UINT -api-version STRING -token STRING

Upload uploads a policy template for a project, first compiling it. On failure, an array of syntax errors will be returned.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template upload --body '{
      "filename": "file.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --project-id 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template update -body JSON -project-id UINT -template-id STRING -api-version STRING -token STRING

Update updates a policy template in place for a project, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -template-id STRING: template_id identifies a policy template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template update --body '{
      "filename": "tag_checker.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --project-id 60073 --template-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateRetrieveDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template retrieve-data -body JSON -project-id UINT -template-id STRING -api-version STRING -token STRING

Retrieve Data retrieves the data sources specified in a give policy template.
    -body JSON: 
    -project-id UINT: project_id identifies a project by ID.
    -template-id STRING: template_id identifies a policy template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template retrieve-data --body '{
      "credentials": {
         "Ea amet et.": "Illum possimus perferendis vitae suscipit."
      },
      "names": [
         "azure_resources"
      ],
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ]
   }' --project-id 60073 --template-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template show -project-id UINT -template-id STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of a policy template.
    -project-id UINT: project_id identifies a project by ID.
    -template-id STRING: template_id identifies a policy template by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template show --project-id 60073 --template-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template index -project-id UINT -view STRING -api-version STRING -etag STRING -token STRING

IndexPolicyTemplates retrieves the list of policy templates in a project.
    -project-id UINT: project_id identifies a project by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template index --project-id 60073 --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template delete -project-id UINT -template-id STRING -api-version STRING -token STRING

Delete deletes a policy template from a project. Deleting a policy template will not delete any applied policies created from the template, they must be stopped explicitly.
    -project-id UINT: project_id identifies a project by ID.
    -template-id STRING: template_id identifies a policy template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template delete --project-id 60073 --template-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// published-templateUsage displays the usage of the published-template command
// and its subcommands.
func publishedTemplateUsage() {
	fmt.Fprintf(os.Stderr, `Service is the PublishedTemplate service interface.
Usage:
    %s [globalflags] published-template COMMAND [flags]

COMMAND:
    create: Create creates an organization-scoped published template from a project-scoped policy template.
    update: Update updates a published template in place for an organization, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    hide: Hide hides a RightScale built-in template from an organization.
    unhide: Unhide unhides a RightScale built-in template from an organization.
    delete: Delete deletes a published template from an organization. Deleting a published template will not delete any applied policies created from the template, they must be stopped explicitly.
    show: Show retrieves the details of a published template.
    index: Index retrieves the list of published templates in an organization.

Additional help:
    %s published-template COMMAND --help
`, os.Args[0], os.Args[0])
}
func publishedTemplateCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template create -body JSON -org-id UINT -api-version STRING -token STRING

Create creates an organization-scoped published template from a project-scoped policy template.
    -body JSON: 
    -org-id UINT: org_id identifies an organization by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template create --body '{
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --org-id 1105 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template update -body JSON -org-id UINT -template-id STRING -api-version STRING -token STRING

Update updates a published template in place for an organization, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    -body JSON: 
    -org-id UINT: org_id identifies an organization by ID.
    -template-id STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template update --body '{
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --org-id 1105 --template-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateHideUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template hide -org-id UINT -template-id STRING -api-version STRING -token STRING

Hide hides a RightScale built-in template from an organization.
    -org-id UINT: org_id identifies an organization by ID.
    -template-id STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template hide --org-id 1105 --template-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateUnhideUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template unhide -org-id UINT -template-id STRING -api-version STRING -token STRING

Unhide unhides a RightScale built-in template from an organization.
    -org-id UINT: org_id identifies an organization by ID.
    -template-id STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template unhide --org-id 1105 --template-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template delete -org-id UINT -template-id STRING -api-version STRING -token STRING

Delete deletes a published template from an organization. Deleting a published template will not delete any applied policies created from the template, they must be stopped explicitly.
    -org-id UINT: org_id identifies an organization by ID.
    -template-id STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template delete --org-id 1105 --template-id "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template show -org-id UINT -template-id STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of a published template.
    -org-id UINT: org_id identifies an organization by ID.
    -template-id STRING: template_id identifies a published template by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template show --org-id 1105 --template-id "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template index -org-id UINT -view STRING -show-hidden BOOL -api-version STRING -etag STRING -token STRING

Index retrieves the list of published templates in an organization.
    -org-id UINT: org_id identifies an organization by ID.
    -view STRING: 
    -show-hidden BOOL: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template index --org-id 1105 --view "default" --show-hidden true --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}
