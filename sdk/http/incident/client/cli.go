// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Incident HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	incident "github.com/flexera-public/policy_sdk/sdk/incident"
	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the Incident show endpoint from CLI
// flags.
func BuildShowPayload(incidentShowProjectID string, incidentShowIncidentID string, incidentShowView string, incidentShowAPIVersion string, incidentShowEtag string, incidentShowToken string) (*incident.ShowPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentShowProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = incidentShowIncidentID
	}
	var view *string
	{
		if incidentShowView != "" {
			view = &incidentShowView
			if view != nil {
				if !(*view == "default" || *view == "extended" || *view == "source") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "extended", "source"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var apiVersion string
	{
		apiVersion = incidentShowAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var etag *string
	{
		if incidentShowEtag != "" {
			etag = &incidentShowEtag
		}
	}
	var token *string
	{
		if incidentShowToken != "" {
			token = &incidentShowToken
		}
	}
	v := &incident.ShowPayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.View = view
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v, nil
}

// BuildIndexPayload builds the payload for the Incident index endpoint from
// CLI flags.
func BuildIndexPayload(incidentIndexProjectID string, incidentIndexView string, incidentIndexState string, incidentIndexAppliedPolicyID string, incidentIndexAPIVersion string, incidentIndexEtag string, incidentIndexToken string) (*incident.IndexPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentIndexProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var view *string
	{
		if incidentIndexView != "" {
			view = &incidentIndexView
			if view != nil {
				if !(*view == "default") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var state []string
	{
		if incidentIndexState != "" {
			err = json.Unmarshal([]byte(incidentIndexState), &state)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for state, example of valid JSON:\n%s", "'[\n      \"triggered\"\n   ]'")
			}
			for _, e := range state {
				if !(e == "triggered" || e == "resolved" || e == "terminated") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("state[*]", e, []interface{}{"triggered", "resolved", "terminated"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var appliedPolicyID *string
	{
		if incidentIndexAppliedPolicyID != "" {
			appliedPolicyID = &incidentIndexAppliedPolicyID
		}
	}
	var apiVersion string
	{
		apiVersion = incidentIndexAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var etag *string
	{
		if incidentIndexEtag != "" {
			etag = &incidentIndexEtag
		}
	}
	var token *string
	{
		if incidentIndexToken != "" {
			token = &incidentIndexToken
		}
	}
	v := &incident.IndexPayload{}
	v.ProjectID = projectID
	v.View = view
	v.State = state
	v.AppliedPolicyID = appliedPolicyID
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v, nil
}

// BuildResolvePayload builds the payload for the Incident resolve endpoint
// from CLI flags.
func BuildResolvePayload(incidentResolveProjectID string, incidentResolveIncidentID string, incidentResolveAPIVersion string, incidentResolveEtag string, incidentResolveToken string) (*incident.ResolvePayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentResolveProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = incidentResolveIncidentID
	}
	var apiVersion string
	{
		apiVersion = incidentResolveAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var etag *string
	{
		if incidentResolveEtag != "" {
			etag = &incidentResolveEtag
		}
	}
	var token *string
	{
		if incidentResolveToken != "" {
			token = &incidentResolveToken
		}
	}
	v := &incident.ResolvePayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v, nil
}

// BuildIndexEscalationsPayload builds the payload for the Incident
// index_escalations endpoint from CLI flags.
func BuildIndexEscalationsPayload(incidentIndexEscalationsProjectID string, incidentIndexEscalationsIncidentID string, incidentIndexEscalationsAPIVersion string, incidentIndexEscalationsToken string) (*incident.IndexEscalationsPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentIndexEscalationsProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = incidentIndexEscalationsIncidentID
	}
	var apiVersion string
	{
		apiVersion = incidentIndexEscalationsAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if incidentIndexEscalationsToken != "" {
			token = &incidentIndexEscalationsToken
		}
	}
	v := &incident.IndexEscalationsPayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}

// BuildIndexResolutionsPayload builds the payload for the Incident
// index_resolutions endpoint from CLI flags.
func BuildIndexResolutionsPayload(incidentIndexResolutionsProjectID string, incidentIndexResolutionsIncidentID string, incidentIndexResolutionsAPIVersion string, incidentIndexResolutionsToken string) (*incident.IndexResolutionsPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentIndexResolutionsProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = incidentIndexResolutionsIncidentID
	}
	var apiVersion string
	{
		apiVersion = incidentIndexResolutionsAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if incidentIndexResolutionsToken != "" {
			token = &incidentIndexResolutionsToken
		}
	}
	v := &incident.IndexResolutionsPayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}

// BuildRunActionPayload builds the payload for the Incident run_action
// endpoint from CLI flags.
func BuildRunActionPayload(incidentRunActionBody string, incidentRunActionProjectID string, incidentRunActionIncidentID string, incidentRunActionActionID string, incidentRunActionAPIVersion string, incidentRunActionToken string) (*incident.RunActionPayload, error) {
	var err error
	var body RunActionRequestBody
	{
		err = json.Unmarshal([]byte(incidentRunActionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"options\": [\n         {\n            \"name\": \"ids\",\n            \"value\": [\n               \"i-abc\",\n               \"i-bcd\"\n            ]\n         },\n         {\n            \"name\": \"email\",\n            \"value\": [\n               \"person1@domain.com\"\n            ]\n         }\n      ]\n   }'")
		}
	}
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentRunActionProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = incidentRunActionIncidentID
	}
	var actionID string
	{
		actionID = incidentRunActionActionID
	}
	var apiVersion string
	{
		apiVersion = incidentRunActionAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if incidentRunActionToken != "" {
			token = &incidentRunActionToken
		}
	}
	v := &incident.RunActionPayload{}
	if body.Options != nil {
		v.Options = make([]*incident.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = marshalConfigurationOptionCreateTypeRequestBodyToIncidentConfigurationOptionCreateType(val)
		}
	}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.ActionID = actionID
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}
