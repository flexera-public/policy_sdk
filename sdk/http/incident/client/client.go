// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Incident client HTTP transport
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Incident service endpoint HTTP clients.
type Client struct {
	// Show Doer is the HTTP client used to make requests to the show endpoint.
	ShowDoer goahttp.Doer

	// Index Doer is the HTTP client used to make requests to the index endpoint.
	IndexDoer goahttp.Doer

	// Resolve Doer is the HTTP client used to make requests to the resolve
	// endpoint.
	ResolveDoer goahttp.Doer

	// IndexEscalations Doer is the HTTP client used to make requests to the
	// index_escalations endpoint.
	IndexEscalationsDoer goahttp.Doer

	// IndexResolutions Doer is the HTTP client used to make requests to the
	// index_resolutions endpoint.
	IndexResolutionsDoer goahttp.Doer

	// RunAction Doer is the HTTP client used to make requests to the run_action
	// endpoint.
	RunActionDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Incident service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ShowDoer:             doer,
		IndexDoer:            doer,
		ResolveDoer:          doer,
		IndexEscalationsDoer: doer,
		IndexResolutionsDoer: doer,
		RunActionDoer:        doer,
		CORSDoer:             doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// Show returns an endpoint that makes HTTP requests to the Incident service
// show server.
func (c *Client) Show() goa.Endpoint {
	var (
		encodeRequest  = EncodeShowRequest(c.encoder)
		decodeResponse = DecodeShowResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Incident", "show", err)
		}
		return decodeResponse(resp)
	}
}

// Index returns an endpoint that makes HTTP requests to the Incident service
// index server.
func (c *Client) Index() goa.Endpoint {
	var (
		encodeRequest  = EncodeIndexRequest(c.encoder)
		decodeResponse = DecodeIndexResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIndexRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IndexDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Incident", "index", err)
		}
		return decodeResponse(resp)
	}
}

// Resolve returns an endpoint that makes HTTP requests to the Incident service
// resolve server.
func (c *Client) Resolve() goa.Endpoint {
	var (
		encodeRequest  = EncodeResolveRequest(c.encoder)
		decodeResponse = DecodeResolveResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildResolveRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ResolveDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Incident", "resolve", err)
		}
		return decodeResponse(resp)
	}
}

// IndexEscalations returns an endpoint that makes HTTP requests to the
// Incident service index_escalations server.
func (c *Client) IndexEscalations() goa.Endpoint {
	var (
		encodeRequest  = EncodeIndexEscalationsRequest(c.encoder)
		decodeResponse = DecodeIndexEscalationsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIndexEscalationsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IndexEscalationsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Incident", "index_escalations", err)
		}
		return decodeResponse(resp)
	}
}

// IndexResolutions returns an endpoint that makes HTTP requests to the
// Incident service index_resolutions server.
func (c *Client) IndexResolutions() goa.Endpoint {
	var (
		encodeRequest  = EncodeIndexResolutionsRequest(c.encoder)
		decodeResponse = DecodeIndexResolutionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIndexResolutionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IndexResolutionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Incident", "index_resolutions", err)
		}
		return decodeResponse(resp)
	}
}

// RunAction returns an endpoint that makes HTTP requests to the Incident
// service run_action server.
func (c *Client) RunAction() goa.Endpoint {
	var (
		encodeRequest  = EncodeRunActionRequest(c.encoder)
		decodeResponse = DecodeRunActionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRunActionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RunActionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Incident", "run_action", err)
		}
		return decodeResponse(resp)
	}
}
