// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Incident HTTP server types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	incident "github.com/rightscale/policy_sdk/sdk/incident"
	incidentviews "github.com/rightscale/policy_sdk/sdk/incident/views"
	goa "goa.design/goa/v3/pkg"
)

// RunActionRequestBody is the type of the "Incident" service "run_action"
// endpoint HTTP request body.
type RunActionRequestBody struct {
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
}

// ShowOKResponseBody is the type of the "Incident" service "show" endpoint
// HTTP response body.
type ShowOKResponseBody struct {
	// id is the ID of the incident, must be unique in the project.
	ID string `form:"id" json:"id" xml:"id"`
	// incident_aggregate_id is set if incident is part of an incident aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the incident.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyResponseBodyLink `form:"applied_policy,omitempty" json:"applied_policy,omitempty" xml:"applied_policy,omitempty"`
	// summary is a summary of the incident.
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string `form:"resolved_at,omitempty" json:"resolved_at,omitempty" xml:"resolved_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	ResolvedBy *UserResponseBody `form:"resolved_by,omitempty" json:"resolved_by,omitempty" xml:"resolved_by,omitempty"`
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string `form:"resolution_message,omitempty" json:"resolution_message,omitempty" xml:"resolution_message,omitempty"`
	// state represents the current handling status of the incident.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// The number of items in violation data.
	ViolationDataCount *uint `form:"violation_data_count,omitempty" json:"violation_data_count,omitempty" xml:"violation_data_count,omitempty"`
	// severity defines the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// options lists the configuration options used to parameterize the policy that
	// created the incident.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool `form:"action_failed,omitempty" json:"action_failed,omitempty" xml:"action_failed,omitempty"`
	// kind is "gov#incident".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// ShowOKResponseBodyExtended is the type of the "Incident" service "show"
// endpoint HTTP response body.
type ShowOKResponseBodyExtended struct {
	// id is the ID of the incident, must be unique in the project.
	ID string `form:"id" json:"id" xml:"id"`
	// incident_aggregate_id is set if incident is part of an incident aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the incident.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyResponseBodyLink `form:"applied_policy,omitempty" json:"applied_policy,omitempty" xml:"applied_policy,omitempty"`
	// summary is a summary of the incident.
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string `form:"resolved_at,omitempty" json:"resolved_at,omitempty" xml:"resolved_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	ResolvedBy *UserResponseBody `form:"resolved_by,omitempty" json:"resolved_by,omitempty" xml:"resolved_by,omitempty"`
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string `form:"resolution_message,omitempty" json:"resolution_message,omitempty" xml:"resolution_message,omitempty"`
	// state represents the current handling status of the incident.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// The number of items in violation data.
	ViolationDataCount *uint `form:"violation_data_count,omitempty" json:"violation_data_count,omitempty" xml:"violation_data_count,omitempty"`
	// severity defines the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// options lists the configuration options used to parameterize the policy that
	// created the incident.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool `form:"action_failed,omitempty" json:"action_failed,omitempty" xml:"action_failed,omitempty"`
	// kind is "gov#incident".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// available_actions is a list of actions that can currently be run on the
	// incident. If the incident is triggered, escalation actions will be
	// available. If the incident is in resolved, resolution actions will be
	// available. If the incident is terminated, no actions are available.
	AvailableActions []*ActionResponseBody `form:"available_actions,omitempty" json:"available_actions,omitempty" xml:"available_actions,omitempty"`
	// message is a description of the incident.
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
	// violation_data_fields is a list of field names exported in violation data.
	ViolationDataFields []*DataFieldResponseBody `form:"violation_data_fields,omitempty" json:"violation_data_fields,omitempty" xml:"violation_data_fields,omitempty"`
	// violation data for the incident.
	ViolationData interface{} `form:"violation_data,omitempty" json:"violation_data,omitempty" xml:"violation_data,omitempty"`
}

// ShowOKResponseBodySource is the type of the "Incident" service "show"
// endpoint HTTP response body.
type ShowOKResponseBodySource struct {
	// id is the ID of the incident, must be unique in the project.
	ID string `form:"id" json:"id" xml:"id"`
	// incident_aggregate_id is set if incident is part of an incident aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the incident.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyResponseBodySource `form:"applied_policy,omitempty" json:"applied_policy,omitempty" xml:"applied_policy,omitempty"`
	// kind is "gov#incident".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// IndexOKResponseBody is the type of the "Incident" service "index" endpoint
// HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of incidents in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of incidents.
	Items IncidentResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#incident_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexEscalationsResponseBody is the type of the "Incident" service
// "index_escalations" endpoint HTTP response body.
type IndexEscalationsResponseBody struct {
	// status is the status of all of the escalations.
	Status string `form:"status" json:"status" xml:"status"`
	// escalations is the set of escalations.
	Escalations []*EscalationResponseBody `form:"escalations,omitempty" json:"escalations,omitempty" xml:"escalations,omitempty"`
	// started_at is the time when the incident handling is started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
}

// IndexResolutionsResponseBody is the type of the "Incident" service
// "index_resolutions" endpoint HTTP response body.
type IndexResolutionsResponseBody struct {
	// status is the status of all of the resolutions.
	Status string `form:"status" json:"status" xml:"status"`
	// resolutions is the set of resolutions.
	Resolutions []*ResolutionResponseBody `form:"resolutions,omitempty" json:"resolutions,omitempty" xml:"resolutions,omitempty"`
	// started_at is the time when the incident handling is started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "Incident" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "Incident" service "show"
// endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "Incident" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "Incident" service "show"
// endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "Incident" service "show"
// endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "Incident" service "show"
// endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexUnauthorizedResponseBody is the type of the "Incident" service "index"
// endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexForbiddenResponseBody is the type of the "Incident" service "index"
// endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadRequestResponseBody is the type of the "Incident" service "index"
// endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadGatewayResponseBody is the type of the "Incident" service "index"
// endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexInternalErrorResponseBody is the type of the "Incident" service "index"
// endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveNotFoundResponseBody is the type of the "Incident" service "resolve"
// endpoint HTTP response body for the "not_found" error.
type ResolveNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolvePreconditionFailedResponseBody is the type of the "Incident" service
// "resolve" endpoint HTTP response body for the "precondition_failed" error.
type ResolvePreconditionFailedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveUnauthorizedResponseBody is the type of the "Incident" service
// "resolve" endpoint HTTP response body for the "unauthorized" error.
type ResolveUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveForbiddenResponseBody is the type of the "Incident" service "resolve"
// endpoint HTTP response body for the "forbidden" error.
type ResolveForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveBadRequestResponseBody is the type of the "Incident" service
// "resolve" endpoint HTTP response body for the "bad_request" error.
type ResolveBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveBadGatewayResponseBody is the type of the "Incident" service
// "resolve" endpoint HTTP response body for the "bad_gateway" error.
type ResolveBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveInternalErrorResponseBody is the type of the "Incident" service
// "resolve" endpoint HTTP response body for the "internal_error" error.
type ResolveInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexEscalationsNotFoundResponseBody is the type of the "Incident" service
// "index_escalations" endpoint HTTP response body for the "not_found" error.
type IndexEscalationsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexEscalationsUnauthorizedResponseBody is the type of the "Incident"
// service "index_escalations" endpoint HTTP response body for the
// "unauthorized" error.
type IndexEscalationsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexEscalationsForbiddenResponseBody is the type of the "Incident" service
// "index_escalations" endpoint HTTP response body for the "forbidden" error.
type IndexEscalationsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexEscalationsBadRequestResponseBody is the type of the "Incident" service
// "index_escalations" endpoint HTTP response body for the "bad_request" error.
type IndexEscalationsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexEscalationsBadGatewayResponseBody is the type of the "Incident" service
// "index_escalations" endpoint HTTP response body for the "bad_gateway" error.
type IndexEscalationsBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexEscalationsInternalErrorResponseBody is the type of the "Incident"
// service "index_escalations" endpoint HTTP response body for the
// "internal_error" error.
type IndexEscalationsInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexResolutionsNotFoundResponseBody is the type of the "Incident" service
// "index_resolutions" endpoint HTTP response body for the "not_found" error.
type IndexResolutionsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexResolutionsUnprocessableEntityResponseBody is the type of the
// "Incident" service "index_resolutions" endpoint HTTP response body for the
// "unprocessable_entity" error.
type IndexResolutionsUnprocessableEntityResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexResolutionsUnauthorizedResponseBody is the type of the "Incident"
// service "index_resolutions" endpoint HTTP response body for the
// "unauthorized" error.
type IndexResolutionsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexResolutionsForbiddenResponseBody is the type of the "Incident" service
// "index_resolutions" endpoint HTTP response body for the "forbidden" error.
type IndexResolutionsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexResolutionsBadRequestResponseBody is the type of the "Incident" service
// "index_resolutions" endpoint HTTP response body for the "bad_request" error.
type IndexResolutionsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexResolutionsBadGatewayResponseBody is the type of the "Incident" service
// "index_resolutions" endpoint HTTP response body for the "bad_gateway" error.
type IndexResolutionsBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexResolutionsInternalErrorResponseBody is the type of the "Incident"
// service "index_resolutions" endpoint HTTP response body for the
// "internal_error" error.
type IndexResolutionsInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionNotFoundResponseBody is the type of the "Incident" service
// "run_action" endpoint HTTP response body for the "not_found" error.
type RunActionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionUnprocessableEntityResponseBody is the type of the "Incident"
// service "run_action" endpoint HTTP response body for the
// "unprocessable_entity" error.
type RunActionUnprocessableEntityResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionUnauthorizedResponseBody is the type of the "Incident" service
// "run_action" endpoint HTTP response body for the "unauthorized" error.
type RunActionUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionForbiddenResponseBody is the type of the "Incident" service
// "run_action" endpoint HTTP response body for the "forbidden" error.
type RunActionForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionBadRequestResponseBody is the type of the "Incident" service
// "run_action" endpoint HTTP response body for the "bad_request" error.
type RunActionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionBadGatewayResponseBody is the type of the "Incident" service
// "run_action" endpoint HTTP response body for the "bad_gateway" error.
type RunActionBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionInternalErrorResponseBody is the type of the "Incident" service
// "run_action" endpoint HTTP response body for the "internal_error" error.
type RunActionInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RunActionConflictResponseBody is the type of the "Incident" service
// "run_action" endpoint HTTP response body for the "conflict" error.
type RunActionConflictResponseBody struct {
	// message identifies the reason for the conflict
	Message string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// id is the Project ID
	ID uint `form:"id" json:"id" xml:"id"`
	// name is the Project Name
	Name string `form:"name" json:"name" xml:"name"`
	// org_id is the RightScale Organization ID
	OrgID uint `form:"org_id" json:"org_id" xml:"org_id"`
	// org_name is the RightScale Organization Name
	OrgName string `form:"org_name" json:"org_name" xml:"org_name"`
}

// AppliedPolicyResponseBodyLink is used to define fields on response body
// types.
type AppliedPolicyResponseBodyLink struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyTemplateResponseBodyLink is used to define fields on response body
// types.
type PolicyTemplateResponseBodyLink struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID uint `form:"id" json:"id" xml:"id"`
	// email of user
	Email string `form:"email" json:"email" xml:"email"`
	// name of user, usually of the form 'First Last'
	Name string `form:"name" json:"name" xml:"name"`
}

// PublishedTemplateResponseBodyLink is used to define fields on response body
// types.
type PublishedTemplateResponseBodyLink struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool `form:"built_in,omitempty" json:"built_in,omitempty" xml:"built_in,omitempty"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name string `form:"name" json:"name" xml:"name"`
	// label of option
	Label string `form:"label" json:"label" xml:"label"`
	// type of option
	Type string `form:"type" json:"type" xml:"type"`
	// value of option
	Value interface{} `form:"value" json:"value" xml:"value"`
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho bool `form:"no_echo,omitempty" json:"no_echo,omitempty" xml:"no_echo,omitempty"`
}

// ActionResponseBody is used to define fields on response body types.
type ActionResponseBody struct {
	// id is an unique identifier for the action.
	ID string `form:"id" json:"id" xml:"id"`
	// type is either escalation or resolution. An escalation action is applicable
	// when an incident is in a triggered state. A resolution action is applicable
	// when an incident is resolved.
	Type string `form:"type" json:"type" xml:"type"`
	// label is a human readable label for the action
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description provides an explanation of what happens for this action.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// parameters is a list of parameters required to run the action.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// whether or not this action is automatically applied to all future incidents.
	Automatic *bool `form:"automatic,omitempty" json:"automatic,omitempty" xml:"automatic,omitempty"`
	// kind is "gov#action".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ParameterResponseBody is used to define fields on response body types.
type ParameterResponseBody struct {
	// Name of the parameter
	Name string `json:"name"`
	// Type of the parameter
	Type string `json:"type"`
	// Label to show in the UI
	Label string `json:"label"`
	// The index of this parameter in the list
	Index uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpResponseBody `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpResponseBody is used to define fields on response body types.
type RegexpResponseBody struct {
	// Pattern is the regular expression pattern.
	Pattern string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// DataFieldResponseBody is used to define fields on response body types.
type DataFieldResponseBody struct {
	// key in violation_data.
	Key string `form:"key" json:"key" xml:"key"`
	// label is a human readable field name, if any
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// optional formatting or type information
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
}

// AppliedPolicyResponseBodySource is used to define fields on response body
// types.
type AppliedPolicyResponseBodySource struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodySource `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodySource `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyTemplateResponseBodySource is used to define fields on response body
// types.
type PolicyTemplateResponseBodySource struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PublishedTemplateResponseBodySource is used to define fields on response
// body types.
type PublishedTemplateResponseBodySource struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is published template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IncidentResponseBodyCollection is used to define fields on response body
// types.
type IncidentResponseBodyCollection []*IncidentResponseBody

// IncidentResponseBody is used to define fields on response body types.
type IncidentResponseBody struct {
	// id is the ID of the incident, must be unique in the project.
	ID string `form:"id" json:"id" xml:"id"`
	// incident_aggregate_id is set if incident is part of an incident aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the incident.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyResponseBodyLink `form:"applied_policy,omitempty" json:"applied_policy,omitempty" xml:"applied_policy,omitempty"`
	// summary is a summary of the incident.
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string `form:"resolved_at,omitempty" json:"resolved_at,omitempty" xml:"resolved_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	ResolvedBy *UserResponseBody `form:"resolved_by,omitempty" json:"resolved_by,omitempty" xml:"resolved_by,omitempty"`
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string `form:"resolution_message,omitempty" json:"resolution_message,omitempty" xml:"resolution_message,omitempty"`
	// state represents the current handling status of the incident.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// The number of items in violation data.
	ViolationDataCount *uint `form:"violation_data_count,omitempty" json:"violation_data_count,omitempty" xml:"violation_data_count,omitempty"`
	// severity defines the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// options lists the configuration options used to parameterize the policy that
	// created the incident.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool `form:"action_failed,omitempty" json:"action_failed,omitempty" xml:"action_failed,omitempty"`
	// kind is "gov#incident".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// etag is an HTTP ETag for the incident.
	Etag string `form:"etag" json:"etag" xml:"etag"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// EscalationResponseBody is used to define fields on response body types.
type EscalationResponseBody struct {
	// status is the status of the set of escalation actions.
	Status string `form:"status" json:"status" xml:"status"`
	// name is the name of the escalation.
	Name string `form:"name" json:"name" xml:"name"`
	// actions is the list of individual actions.
	Actions []*EscalationActionResponseBody `form:"actions" json:"actions" xml:"actions"`
}

// EscalationActionResponseBody is used to define fields on response body types.
type EscalationActionResponseBody struct {
	// type is the type of the action.
	Type string `form:"type" json:"type" xml:"type"`
	// status is the status of the action.
	Status string `form:"status" json:"status" xml:"status"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// error is any error occurred when handling the action.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequestResponseBodyExtended `form:"approval_request,omitempty" json:"approval_request,omitempty" xml:"approval_request,omitempty"`
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string `form:"process_href,omitempty" json:"process_href,omitempty" xml:"process_href,omitempty"`
}

// ApprovalRequestResponseBodyExtended is used to define fields on response
// body types.
type ApprovalRequestResponseBodyExtended struct {
	// id identifies an approval request by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID uint `form:"project_id" json:"project_id" xml:"project_id"`
	// href is the href of the approval request
	Href string `form:"href" json:"href" xml:"href"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject `form:"subject" json:"subject" xml:"subject"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserResponseBody `form:"approved_by,omitempty" json:"approved_by,omitempty" xml:"approved_by,omitempty"`
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string `form:"approved_at,omitempty" json:"approved_at,omitempty" xml:"approved_at,omitempty"`
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string `form:"denial_comment,omitempty" json:"denial_comment,omitempty" xml:"denial_comment,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	DeniedBy *UserResponseBody `form:"denied_by,omitempty" json:"denied_by,omitempty" xml:"denied_by,omitempty"`
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string `form:"denied_at,omitempty" json:"denied_at,omitempty" xml:"denied_at,omitempty"`
	// kind is "gov#approval_request".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ApprovalSubject is used to define fields on response body types.
type ApprovalSubject struct {
	// kind is the kind of subject
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// href is the href of the subject.
	Href string `form:"href" json:"href" xml:"href"`
}

// ResolutionResponseBody is used to define fields on response body types.
type ResolutionResponseBody struct {
	// status is the status of the set of resolution actions.
	Status string `form:"status" json:"status" xml:"status"`
	// name is the name of the resolution.
	Name string `form:"name" json:"name" xml:"name"`
	// actions is the list of individual actions.
	Actions []*ResolutionActionResponseBody `form:"actions" json:"actions" xml:"actions"`
}

// ResolutionActionResponseBody is used to define fields on response body types.
type ResolutionActionResponseBody struct {
	// type is the type of the action.
	Type string `form:"type" json:"type" xml:"type"`
	// status is the status of the action.
	Status string `form:"status" json:"status" xml:"status"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// error is any error occurred when handling the action.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequestResponseBodyExtended `form:"approval_request,omitempty" json:"approval_request,omitempty" xml:"approval_request,omitempty"`
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string `form:"process_href,omitempty" json:"process_href,omitempty" xml:"process_href,omitempty"`
}

// ConfigurationOptionCreateTypeRequestBody is used to define fields on request
// body types.
type ConfigurationOptionCreateTypeRequestBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// value of option
	Value interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewShowOKResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "Incident" service.
func NewShowOKResponseBody(res *incidentviews.IncidentView) *ShowOKResponseBody {
	body := &ShowOKResponseBody{
		ID:                  *res.ID,
		IncidentAggregateID: res.IncidentAggregateID,
		Href:                res.Href,
		Summary:             res.Summary,
		ViolationDataCount:  res.ViolationDataCount,
		CreatedAt:           res.CreatedAt,
		UpdatedAt:           res.UpdatedAt,
		ResolvedAt:          res.ResolvedAt,
		ResolutionMessage:   res.ResolutionMessage,
		State:               res.State,
		Severity:            res.Severity,
		Category:            res.Category,
		DryRun:              res.DryRun,
		ActionFailed:        res.ActionFailed,
		Kind:                *res.Kind,
		NotModified:         res.NotModified,
	}
	if res.Project != nil {
		body.Project = marshalIncidentviewsProjectViewToProjectResponseBody(res.Project)
	}
	if res.AppliedPolicy != nil {
		body.AppliedPolicy = marshalIncidentviewsAppliedPolicyViewToAppliedPolicyResponseBodyLink(res.AppliedPolicy)
	}
	if res.ResolvedBy != nil {
		body.ResolvedBy = marshalIncidentviewsUserViewToUserResponseBody(res.ResolvedBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalIncidentviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	return body
}

// NewShowOKResponseBodyExtended builds the HTTP response body from the result
// of the "show" endpoint of the "Incident" service.
func NewShowOKResponseBodyExtended(res *incidentviews.IncidentView) *ShowOKResponseBodyExtended {
	body := &ShowOKResponseBodyExtended{
		ID:                  *res.ID,
		IncidentAggregateID: res.IncidentAggregateID,
		Href:                res.Href,
		Summary:             res.Summary,
		Detail:              res.Detail,
		ViolationData:       res.ViolationData,
		ViolationDataCount:  res.ViolationDataCount,
		CreatedAt:           res.CreatedAt,
		UpdatedAt:           res.UpdatedAt,
		ResolvedAt:          res.ResolvedAt,
		ResolutionMessage:   res.ResolutionMessage,
		State:               res.State,
		Severity:            res.Severity,
		Category:            res.Category,
		DryRun:              res.DryRun,
		ActionFailed:        res.ActionFailed,
		Kind:                *res.Kind,
		NotModified:         res.NotModified,
	}
	if res.Project != nil {
		body.Project = marshalIncidentviewsProjectViewToProjectResponseBody(res.Project)
	}
	if res.AppliedPolicy != nil {
		body.AppliedPolicy = marshalIncidentviewsAppliedPolicyViewToAppliedPolicyResponseBodyLink(res.AppliedPolicy)
	}
	if res.ViolationDataFields != nil {
		body.ViolationDataFields = make([]*DataFieldResponseBody, len(res.ViolationDataFields))
		for i, val := range res.ViolationDataFields {
			body.ViolationDataFields[i] = marshalIncidentviewsDataFieldViewToDataFieldResponseBody(val)
		}
	}
	if res.ResolvedBy != nil {
		body.ResolvedBy = marshalIncidentviewsUserViewToUserResponseBody(res.ResolvedBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalIncidentviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if res.AvailableActions != nil {
		body.AvailableActions = make([]*ActionResponseBody, len(res.AvailableActions))
		for i, val := range res.AvailableActions {
			body.AvailableActions[i] = marshalIncidentviewsActionViewToActionResponseBody(val)
		}
	}
	return body
}

// NewShowOKResponseBodySource builds the HTTP response body from the result of
// the "show" endpoint of the "Incident" service.
func NewShowOKResponseBodySource(res *incidentviews.IncidentView) *ShowOKResponseBodySource {
	body := &ShowOKResponseBodySource{
		ID:                  *res.ID,
		IncidentAggregateID: res.IncidentAggregateID,
		Href:                res.Href,
		Kind:                *res.Kind,
		NotModified:         res.NotModified,
	}
	if res.Project != nil {
		body.Project = marshalIncidentviewsProjectViewToProjectResponseBody(res.Project)
	}
	if res.AppliedPolicy != nil {
		body.AppliedPolicy = marshalIncidentviewsAppliedPolicyViewToAppliedPolicyResponseBodySource(res.AppliedPolicy)
	}
	return body
}

// NewIndexOKResponseBody builds the HTTP response body from the result of the
// "index" endpoint of the "Incident" service.
func NewIndexOKResponseBody(res *incidentviews.IncidentListView) *IndexOKResponseBody {
	body := &IndexOKResponseBody{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*IncidentResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalIncidentviewsIncidentViewToIncidentResponseBody(val)
		}
	}
	return body
}

// NewIndexEscalationsResponseBody builds the HTTP response body from the
// result of the "index_escalations" endpoint of the "Incident" service.
func NewIndexEscalationsResponseBody(res *incidentviews.EscalationsView) *IndexEscalationsResponseBody {
	body := &IndexEscalationsResponseBody{
		Status:     *res.Status,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
	}
	if res.Escalations != nil {
		body.Escalations = make([]*EscalationResponseBody, len(res.Escalations))
		for i, val := range res.Escalations {
			body.Escalations[i] = marshalIncidentviewsEscalationViewToEscalationResponseBody(val)
		}
	}
	return body
}

// NewIndexResolutionsResponseBody builds the HTTP response body from the
// result of the "index_resolutions" endpoint of the "Incident" service.
func NewIndexResolutionsResponseBody(res *incidentviews.ResolutionsView) *IndexResolutionsResponseBody {
	body := &IndexResolutionsResponseBody{
		Status:     *res.Status,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
	}
	if res.Resolutions != nil {
		body.Resolutions = make([]*ResolutionResponseBody, len(res.Resolutions))
		for i, val := range res.Resolutions {
			body.Resolutions[i] = marshalIncidentviewsResolutionViewToResolutionResponseBody(val)
		}
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "Incident" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "Incident" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "Incident" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "Incident" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "Incident" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "Incident" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexUnauthorizedResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "Incident" service.
func NewIndexUnauthorizedResponseBody(res *goa.ServiceError) *IndexUnauthorizedResponseBody {
	body := &IndexUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexForbiddenResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "Incident" service.
func NewIndexForbiddenResponseBody(res *goa.ServiceError) *IndexForbiddenResponseBody {
	body := &IndexForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadRequestResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "Incident" service.
func NewIndexBadRequestResponseBody(res *goa.ServiceError) *IndexBadRequestResponseBody {
	body := &IndexBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadGatewayResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "Incident" service.
func NewIndexBadGatewayResponseBody(res *goa.ServiceError) *IndexBadGatewayResponseBody {
	body := &IndexBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexInternalErrorResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "Incident" service.
func NewIndexInternalErrorResponseBody(res *goa.ServiceError) *IndexInternalErrorResponseBody {
	body := &IndexInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveNotFoundResponseBody builds the HTTP response body from the result
// of the "resolve" endpoint of the "Incident" service.
func NewResolveNotFoundResponseBody(res *goa.ServiceError) *ResolveNotFoundResponseBody {
	body := &ResolveNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolvePreconditionFailedResponseBody builds the HTTP response body from
// the result of the "resolve" endpoint of the "Incident" service.
func NewResolvePreconditionFailedResponseBody(res *goa.ServiceError) *ResolvePreconditionFailedResponseBody {
	body := &ResolvePreconditionFailedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveUnauthorizedResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "Incident" service.
func NewResolveUnauthorizedResponseBody(res *goa.ServiceError) *ResolveUnauthorizedResponseBody {
	body := &ResolveUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveForbiddenResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "Incident" service.
func NewResolveForbiddenResponseBody(res *goa.ServiceError) *ResolveForbiddenResponseBody {
	body := &ResolveForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveBadRequestResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "Incident" service.
func NewResolveBadRequestResponseBody(res *goa.ServiceError) *ResolveBadRequestResponseBody {
	body := &ResolveBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveBadGatewayResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "Incident" service.
func NewResolveBadGatewayResponseBody(res *goa.ServiceError) *ResolveBadGatewayResponseBody {
	body := &ResolveBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveInternalErrorResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "Incident" service.
func NewResolveInternalErrorResponseBody(res *goa.ServiceError) *ResolveInternalErrorResponseBody {
	body := &ResolveInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexEscalationsNotFoundResponseBody builds the HTTP response body from
// the result of the "index_escalations" endpoint of the "Incident" service.
func NewIndexEscalationsNotFoundResponseBody(res *goa.ServiceError) *IndexEscalationsNotFoundResponseBody {
	body := &IndexEscalationsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexEscalationsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "index_escalations" endpoint of the "Incident"
// service.
func NewIndexEscalationsUnauthorizedResponseBody(res *goa.ServiceError) *IndexEscalationsUnauthorizedResponseBody {
	body := &IndexEscalationsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexEscalationsForbiddenResponseBody builds the HTTP response body from
// the result of the "index_escalations" endpoint of the "Incident" service.
func NewIndexEscalationsForbiddenResponseBody(res *goa.ServiceError) *IndexEscalationsForbiddenResponseBody {
	body := &IndexEscalationsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexEscalationsBadRequestResponseBody builds the HTTP response body from
// the result of the "index_escalations" endpoint of the "Incident" service.
func NewIndexEscalationsBadRequestResponseBody(res *goa.ServiceError) *IndexEscalationsBadRequestResponseBody {
	body := &IndexEscalationsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexEscalationsBadGatewayResponseBody builds the HTTP response body from
// the result of the "index_escalations" endpoint of the "Incident" service.
func NewIndexEscalationsBadGatewayResponseBody(res *goa.ServiceError) *IndexEscalationsBadGatewayResponseBody {
	body := &IndexEscalationsBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexEscalationsInternalErrorResponseBody builds the HTTP response body
// from the result of the "index_escalations" endpoint of the "Incident"
// service.
func NewIndexEscalationsInternalErrorResponseBody(res *goa.ServiceError) *IndexEscalationsInternalErrorResponseBody {
	body := &IndexEscalationsInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexResolutionsNotFoundResponseBody builds the HTTP response body from
// the result of the "index_resolutions" endpoint of the "Incident" service.
func NewIndexResolutionsNotFoundResponseBody(res *goa.ServiceError) *IndexResolutionsNotFoundResponseBody {
	body := &IndexResolutionsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexResolutionsUnprocessableEntityResponseBody builds the HTTP response
// body from the result of the "index_resolutions" endpoint of the "Incident"
// service.
func NewIndexResolutionsUnprocessableEntityResponseBody(res *goa.ServiceError) *IndexResolutionsUnprocessableEntityResponseBody {
	body := &IndexResolutionsUnprocessableEntityResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexResolutionsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "index_resolutions" endpoint of the "Incident"
// service.
func NewIndexResolutionsUnauthorizedResponseBody(res *goa.ServiceError) *IndexResolutionsUnauthorizedResponseBody {
	body := &IndexResolutionsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexResolutionsForbiddenResponseBody builds the HTTP response body from
// the result of the "index_resolutions" endpoint of the "Incident" service.
func NewIndexResolutionsForbiddenResponseBody(res *goa.ServiceError) *IndexResolutionsForbiddenResponseBody {
	body := &IndexResolutionsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexResolutionsBadRequestResponseBody builds the HTTP response body from
// the result of the "index_resolutions" endpoint of the "Incident" service.
func NewIndexResolutionsBadRequestResponseBody(res *goa.ServiceError) *IndexResolutionsBadRequestResponseBody {
	body := &IndexResolutionsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexResolutionsBadGatewayResponseBody builds the HTTP response body from
// the result of the "index_resolutions" endpoint of the "Incident" service.
func NewIndexResolutionsBadGatewayResponseBody(res *goa.ServiceError) *IndexResolutionsBadGatewayResponseBody {
	body := &IndexResolutionsBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexResolutionsInternalErrorResponseBody builds the HTTP response body
// from the result of the "index_resolutions" endpoint of the "Incident"
// service.
func NewIndexResolutionsInternalErrorResponseBody(res *goa.ServiceError) *IndexResolutionsInternalErrorResponseBody {
	body := &IndexResolutionsInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionNotFoundResponseBody builds the HTTP response body from the
// result of the "run_action" endpoint of the "Incident" service.
func NewRunActionNotFoundResponseBody(res *goa.ServiceError) *RunActionNotFoundResponseBody {
	body := &RunActionNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionUnprocessableEntityResponseBody builds the HTTP response body
// from the result of the "run_action" endpoint of the "Incident" service.
func NewRunActionUnprocessableEntityResponseBody(res *goa.ServiceError) *RunActionUnprocessableEntityResponseBody {
	body := &RunActionUnprocessableEntityResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionUnauthorizedResponseBody builds the HTTP response body from the
// result of the "run_action" endpoint of the "Incident" service.
func NewRunActionUnauthorizedResponseBody(res *goa.ServiceError) *RunActionUnauthorizedResponseBody {
	body := &RunActionUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionForbiddenResponseBody builds the HTTP response body from the
// result of the "run_action" endpoint of the "Incident" service.
func NewRunActionForbiddenResponseBody(res *goa.ServiceError) *RunActionForbiddenResponseBody {
	body := &RunActionForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionBadRequestResponseBody builds the HTTP response body from the
// result of the "run_action" endpoint of the "Incident" service.
func NewRunActionBadRequestResponseBody(res *goa.ServiceError) *RunActionBadRequestResponseBody {
	body := &RunActionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionBadGatewayResponseBody builds the HTTP response body from the
// result of the "run_action" endpoint of the "Incident" service.
func NewRunActionBadGatewayResponseBody(res *goa.ServiceError) *RunActionBadGatewayResponseBody {
	body := &RunActionBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionInternalErrorResponseBody builds the HTTP response body from the
// result of the "run_action" endpoint of the "Incident" service.
func NewRunActionInternalErrorResponseBody(res *goa.ServiceError) *RunActionInternalErrorResponseBody {
	body := &RunActionInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRunActionConflictResponseBody builds the HTTP response body from the
// result of the "run_action" endpoint of the "Incident" service.
func NewRunActionConflictResponseBody(res *incident.Conflict) *RunActionConflictResponseBody {
	body := &RunActionConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewShowPayload builds a Incident service show endpoint payload.
func NewShowPayload(projectID uint, incidentID string, view *string, apiVersion string, etag *string, token *string) *incident.ShowPayload {
	v := &incident.ShowPayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.View = view
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewIndexPayload builds a Incident service index endpoint payload.
func NewIndexPayload(projectID uint, view *string, state []string, appliedPolicyID *string, apiVersion string, etag *string, token *string) *incident.IndexPayload {
	v := &incident.IndexPayload{}
	v.ProjectID = projectID
	v.View = view
	v.State = state
	v.AppliedPolicyID = appliedPolicyID
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewResolvePayload builds a Incident service resolve endpoint payload.
func NewResolvePayload(projectID uint, incidentID string, apiVersion string, etag *string, token *string) *incident.ResolvePayload {
	v := &incident.ResolvePayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewIndexEscalationsPayload builds a Incident service index_escalations
// endpoint payload.
func NewIndexEscalationsPayload(projectID uint, incidentID string, apiVersion string, token *string) *incident.IndexEscalationsPayload {
	v := &incident.IndexEscalationsPayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewIndexResolutionsPayload builds a Incident service index_resolutions
// endpoint payload.
func NewIndexResolutionsPayload(projectID uint, incidentID string, apiVersion string, token *string) *incident.IndexResolutionsPayload {
	v := &incident.IndexResolutionsPayload{}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewRunActionPayload builds a Incident service run_action endpoint payload.
func NewRunActionPayload(body *RunActionRequestBody, projectID uint, incidentID string, actionID string, apiVersion string, token *string) *incident.RunActionPayload {
	v := &incident.RunActionPayload{}
	if body.Options != nil {
		v.Options = make([]*incident.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionCreateTypeRequestBodyToIncidentConfigurationOptionCreateType(val)
		}
	}
	v.ProjectID = projectID
	v.IncidentID = incidentID
	v.ActionID = actionID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// ValidateRunActionRequestBody runs the validations defined on
// run_action_request_body
func ValidateRunActionRequestBody(body *RunActionRequestBody) (err error) {
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionCreateTypeRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateConfigurationOptionCreateTypeRequestBody runs the validations
// defined on ConfigurationOptionCreateTypeRequestBody
func ValidateConfigurationOptionCreateTypeRequestBody(body *ConfigurationOptionCreateTypeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
