// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Approval HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	approval "github.com/rightscale/policy_sdk/sdk/approval"
	approvalviews "github.com/rightscale/policy_sdk/sdk/approval/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "Approval" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID         uint
		approvalRequestID string
	)
	{
		p, ok := v.(*approval.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Approval", "show", "*approval.ShowPayload", v)
		}
		projectID = p.ProjectID
		approvalRequestID = p.ApprovalRequestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowApprovalPath(projectID, approvalRequestID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Approval", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the Approval show
// server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*approval.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("Approval", "show", "*approval.ShowPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the Approval
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "show", err)
			}
			p := NewShowApprovalRequestOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &approvalviews.ApprovalRequest{Projected: p, View: view}
			if err = approvalviews.ValidateApprovalRequest(vres); err != nil {
				return nil, goahttp.ErrValidationError("Approval", "show", err)
			}
			res := approval.NewApprovalRequest(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "show", err)
			}
			err = ValidateShowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "show", err)
			}
			err = ValidateShowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "show", err)
			}
			err = ValidateShowBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Approval", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "Approval" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*approval.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Approval", "index", "*approval.IndexPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexApprovalPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Approval", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the Approval
// index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*approval.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("Approval", "index", "*approval.IndexPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		for _, value := range p.ID {
			values.Add("id", value)
		}
		if p.SubjectKind != nil {
			values.Add("subject_kind", *p.SubjectKind)
		}
		if p.SubjectHref != nil {
			values.Add("subject_href", *p.SubjectHref)
		}
		for _, value := range p.Status {
			values.Add("status", value)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the Approval
// index endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			p := NewIndexApprovalRequestListNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &approvalviews.ApprovalRequestList{Projected: p, View: view}
			res := approval.NewApprovalRequestList(vres)
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "index", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			p := NewIndexApprovalRequestListOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &approvalviews.ApprovalRequestList{Projected: p, View: view}
			if err = approvalviews.ValidateApprovalRequestList(vres); err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			res := approval.NewApprovalRequestList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "index", err)
			}
			err = ValidateIndexUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "index", err)
			}
			err = ValidateIndexForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Approval", "index", resp.StatusCode, string(body))
		}
	}
}

// BuildApproveRequest instantiates a HTTP request object with method and path
// set to call the "Approval" service "approve" endpoint
func (c *Client) BuildApproveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID         uint
		approvalRequestID string
	)
	{
		p, ok := v.(*approval.ApprovePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Approval", "approve", "*approval.ApprovePayload", v)
		}
		projectID = p.ProjectID
		approvalRequestID = p.ApprovalRequestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ApproveApprovalPath(projectID, approvalRequestID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Approval", "approve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeApproveRequest returns an encoder for requests sent to the Approval
// approve server.
func EncodeApproveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*approval.ApprovePayload)
		if !ok {
			return goahttp.ErrInvalidType("Approval", "approve", "*approval.ApprovePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewApproveRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Approval", "approve", err)
		}
		return nil
	}
}

// DecodeApproveResponse returns a decoder for responses returned by the
// Approval approve endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeApproveResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeApproveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusNotFound:
			var (
				body ApproveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "approve", err)
			}
			err = ValidateApproveNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "approve", err)
			}
			return nil, NewApproveNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ApproveUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "approve", err)
			}
			err = ValidateApproveUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "approve", err)
			}
			return nil, NewApproveUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ApproveForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "approve", err)
			}
			err = ValidateApproveForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "approve", err)
			}
			return nil, NewApproveForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ApproveBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "approve", err)
			}
			err = ValidateApproveBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "approve", err)
			}
			return nil, NewApproveBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ApproveBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "approve", err)
			}
			err = ValidateApproveBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "approve", err)
			}
			return nil, NewApproveBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ApproveInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "approve", err)
			}
			err = ValidateApproveInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "approve", err)
			}
			return nil, NewApproveInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Approval", "approve", resp.StatusCode, string(body))
		}
	}
}

// BuildDenyRequest instantiates a HTTP request object with method and path set
// to call the "Approval" service "deny" endpoint
func (c *Client) BuildDenyRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID         uint
		approvalRequestID string
	)
	{
		p, ok := v.(*approval.DenyPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Approval", "deny", "*approval.DenyPayload", v)
		}
		projectID = p.ProjectID
		approvalRequestID = p.ApprovalRequestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DenyApprovalPath(projectID, approvalRequestID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Approval", "deny", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDenyRequest returns an encoder for requests sent to the Approval deny
// server.
func EncodeDenyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*approval.DenyPayload)
		if !ok {
			return goahttp.ErrInvalidType("Approval", "deny", "*approval.DenyPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewDenyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Approval", "deny", err)
		}
		return nil
	}
}

// DecodeDenyResponse returns a decoder for responses returned by the Approval
// deny endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDenyResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeDenyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DenyNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "deny", err)
			}
			err = ValidateDenyNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "deny", err)
			}
			return nil, NewDenyNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DenyUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "deny", err)
			}
			err = ValidateDenyUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "deny", err)
			}
			return nil, NewDenyUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DenyForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "deny", err)
			}
			err = ValidateDenyForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "deny", err)
			}
			return nil, NewDenyForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DenyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "deny", err)
			}
			err = ValidateDenyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "deny", err)
			}
			return nil, NewDenyBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body DenyBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "deny", err)
			}
			err = ValidateDenyBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "deny", err)
			}
			return nil, NewDenyBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body DenyInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Approval", "deny", err)
			}
			err = ValidateDenyInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Approval", "deny", err)
			}
			return nil, NewDenyInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Approval", "deny", resp.StatusCode, string(body))
		}
	}
}

// unmarshalApprovalSubjectToApprovalviewsApprovalSubject builds a value of
// type *approvalviews.ApprovalSubject from a value of type *ApprovalSubject.
func unmarshalApprovalSubjectToApprovalviewsApprovalSubject(v *ApprovalSubject) *approvalviews.ApprovalSubject {
	res := &approvalviews.ApprovalSubject{
		Kind: v.Kind,
		Href: v.Href,
	}

	return res
}

// unmarshalParameterResponseBodyToApprovalviewsParameterView builds a value of
// type *approvalviews.ParameterView from a value of type
// *ParameterResponseBody.
func unmarshalParameterResponseBodyToApprovalviewsParameterView(v *ParameterResponseBody) *approvalviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &approvalviews.ParameterView{
		Name:                  v.Name,
		Type:                  v.Type,
		Label:                 v.Label,
		Index:                 v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = unmarshalRegexpResponseBodyToApprovalviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// unmarshalRegexpResponseBodyToApprovalviewsRegexpView builds a value of type
// *approvalviews.RegexpView from a value of type *RegexpResponseBody.
func unmarshalRegexpResponseBodyToApprovalviewsRegexpView(v *RegexpResponseBody) *approvalviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &approvalviews.RegexpView{
		Pattern: v.Pattern,
		Options: v.Options,
	}

	return res
}

// unmarshalConfigurationOptionResponseBodyToApprovalviewsConfigurationOptionView
// builds a value of type *approvalviews.ConfigurationOptionView from a value
// of type *ConfigurationOptionResponseBody.
func unmarshalConfigurationOptionResponseBodyToApprovalviewsConfigurationOptionView(v *ConfigurationOptionResponseBody) *approvalviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &approvalviews.ConfigurationOptionView{
		Name:   v.Name,
		Label:  v.Label,
		Type:   v.Type,
		Value:  v.Value,
		NoEcho: v.NoEcho,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}

	return res
}

// unmarshalUserResponseBodyToApprovalviewsUserView builds a value of type
// *approvalviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToApprovalviewsUserView(v *UserResponseBody) *approvalviews.UserView {
	if v == nil {
		return nil
	}
	res := &approvalviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalApprovalRequestResponseBodyToApprovalviewsApprovalRequestView
// builds a value of type *approvalviews.ApprovalRequestView from a value of
// type *ApprovalRequestResponseBody.
func unmarshalApprovalRequestResponseBodyToApprovalviewsApprovalRequestView(v *ApprovalRequestResponseBody) *approvalviews.ApprovalRequestView {
	if v == nil {
		return nil
	}
	res := &approvalviews.ApprovalRequestView{
		ID:            v.ID,
		ProjectID:     v.ProjectID,
		Href:          v.Href,
		Label:         v.Label,
		Description:   v.Description,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
		Status:        v.Status,
		ApprovedAt:    v.ApprovedAt,
		DenialComment: v.DenialComment,
		DeniedAt:      v.DeniedAt,
		Kind:          v.Kind,
	}
	res.Subject = unmarshalApprovalSubjectToApprovalviewsApprovalSubject(v.Subject)
	if v.Parameters != nil {
		res.Parameters = make(map[string]*approvalviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToApprovalviewsParameterView(val)
		}
	}
	if v.Options != nil {
		res.Options = make([]*approvalviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToApprovalviewsConfigurationOptionView(val)
		}
	}
	if v.ApprovedBy != nil {
		res.ApprovedBy = unmarshalUserResponseBodyToApprovalviewsUserView(v.ApprovedBy)
	}
	if v.DeniedBy != nil {
		res.DeniedBy = unmarshalUserResponseBodyToApprovalviewsUserView(v.DeniedBy)
	}

	return res
}

// marshalApprovalConfigurationOptionCreateTypeToConfigurationOptionCreateTypeRequestBody
// builds a value of type *ConfigurationOptionCreateTypeRequestBody from a
// value of type *approval.ConfigurationOptionCreateType.
func marshalApprovalConfigurationOptionCreateTypeToConfigurationOptionCreateTypeRequestBody(v *approval.ConfigurationOptionCreateType) *ConfigurationOptionCreateTypeRequestBody {
	if v == nil {
		return nil
	}
	res := &ConfigurationOptionCreateTypeRequestBody{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// marshalConfigurationOptionCreateTypeRequestBodyToApprovalConfigurationOptionCreateType
// builds a value of type *approval.ConfigurationOptionCreateType from a value
// of type *ConfigurationOptionCreateTypeRequestBody.
func marshalConfigurationOptionCreateTypeRequestBodyToApprovalConfigurationOptionCreateType(v *ConfigurationOptionCreateTypeRequestBody) *approval.ConfigurationOptionCreateType {
	if v == nil {
		return nil
	}
	res := &approval.ConfigurationOptionCreateType{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}
