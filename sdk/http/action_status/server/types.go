// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ActionStatus HTTP server types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	actionstatus "github.com/rightscale/policy_sdk/sdk/action_status"
	actionstatusviews "github.com/rightscale/policy_sdk/sdk/action_status/views"
	goa "goa.design/goa/v3/pkg"
)

// IndexOKResponseBody is the type of the "ActionStatus" service "index"
// endpoint HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of action statuss in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of action statuses.
	Items ActionStatusResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#action_status_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBodyExtended is the type of the "ActionStatus" service
// "index" endpoint HTTP response body.
type IndexOKResponseBodyExtended struct {
	// count is the number of action statuss in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of action statuses.
	Items ActionStatusResponseBodyExtendedCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#action_status_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBody is the type of the "ActionStatus" service "show" endpoint
// HTTP response body.
type ShowResponseBody struct {
	// id is a unique identifier for this action status.
	ID string `form:"id" json:"id" xml:"id"`
	// status of the action.
	Status string `form:"status" json:"status" xml:"status"`
	// type is the type of action, which also indicates the situations in which it
	// is used.
	Type string `form:"type" json:"type" xml:"type"`
	// whether or not this action is automatically run.
	Automatic *bool `form:"automatic,omitempty" json:"automatic,omitempty" xml:"automatic,omitempty"`
	// name is an identifier for the action.
	Name string `form:"name" json:"name" xml:"name"`
	// label is the human readable name for the action.
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// run_by is the Flexera user that ran the action. If the action was applied
	// automatically, this will be who applied the action.
	RunBy *UserResponseBody `form:"run_by,omitempty" json:"run_by,omitempty" xml:"run_by,omitempty"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// options lists the configuration options used to parameterize the action.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// kind is "gov#action_status".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodyExtended is the type of the "ActionStatus" service "show"
// endpoint HTTP response body.
type ShowResponseBodyExtended struct {
	// id is a unique identifier for this action status.
	ID string `form:"id" json:"id" xml:"id"`
	// status of the action.
	Status string `form:"status" json:"status" xml:"status"`
	// type is the type of action, which also indicates the situations in which it
	// is used.
	Type string `form:"type" json:"type" xml:"type"`
	// whether or not this action is automatically run.
	Automatic *bool `form:"automatic,omitempty" json:"automatic,omitempty" xml:"automatic,omitempty"`
	// name is an identifier for the action.
	Name string `form:"name" json:"name" xml:"name"`
	// label is the human readable name for the action.
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// run_by is the Flexera user that ran the action. If the action was applied
	// automatically, this will be who applied the action.
	RunBy *UserResponseBody `form:"run_by,omitempty" json:"run_by,omitempty" xml:"run_by,omitempty"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// options lists the configuration options used to parameterize the action.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// kind is "gov#action_status".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// actions is the list of individual steps within this action and their success
	// or failure.
	ActionItems []*ActionItemStatusResponseBody `form:"action_items" json:"action_items" xml:"action_items"`
}

// IndexUnauthorizedResponseBody is the type of the "ActionStatus" service
// "index" endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexForbiddenResponseBody is the type of the "ActionStatus" service "index"
// endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadRequestResponseBody is the type of the "ActionStatus" service
// "index" endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadGatewayResponseBody is the type of the "ActionStatus" service
// "index" endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexInternalErrorResponseBody is the type of the "ActionStatus" service
// "index" endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNotFoundResponseBody is the type of the "ActionStatus" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "ActionStatus" service
// "show" endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "ActionStatus" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "ActionStatus" service "show"
// endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "ActionStatus" service "show"
// endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "ActionStatus" service
// "show" endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ActionStatusResponseBodyCollection is used to define fields on response body
// types.
type ActionStatusResponseBodyCollection []*ActionStatusResponseBody

// ActionStatusResponseBody is used to define fields on response body types.
type ActionStatusResponseBody struct {
	// id is a unique identifier for this action status.
	ID string `form:"id" json:"id" xml:"id"`
	// status of the action.
	Status string `form:"status" json:"status" xml:"status"`
	// type is the type of action, which also indicates the situations in which it
	// is used.
	Type string `form:"type" json:"type" xml:"type"`
	// whether or not this action is automatically run.
	Automatic *bool `form:"automatic,omitempty" json:"automatic,omitempty" xml:"automatic,omitempty"`
	// name is an identifier for the action.
	Name string `form:"name" json:"name" xml:"name"`
	// label is the human readable name for the action.
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// run_by is the Flexera user that ran the action. If the action was applied
	// automatically, this will be who applied the action.
	RunBy *UserResponseBody `form:"run_by,omitempty" json:"run_by,omitempty" xml:"run_by,omitempty"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// options lists the configuration options used to parameterize the action.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// kind is "gov#action_status".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID uint `form:"id" json:"id" xml:"id"`
	// email of user
	Email string `form:"email" json:"email" xml:"email"`
	// name of user, usually of the form 'First Last'
	Name string `form:"name" json:"name" xml:"name"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name string `form:"name" json:"name" xml:"name"`
	// label of option
	Label string `form:"label" json:"label" xml:"label"`
	// type of option
	Type string `form:"type" json:"type" xml:"type"`
	// value of option
	Value interface{} `form:"value" json:"value" xml:"value"`
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho bool `form:"no_echo,omitempty" json:"no_echo,omitempty" xml:"no_echo,omitempty"`
}

// ActionStatusResponseBodyExtendedCollection is used to define fields on
// response body types.
type ActionStatusResponseBodyExtendedCollection []*ActionStatusResponseBodyExtended

// ActionStatusResponseBodyExtended is used to define fields on response body
// types.
type ActionStatusResponseBodyExtended struct {
	// id is a unique identifier for this action status.
	ID string `form:"id" json:"id" xml:"id"`
	// status of the action.
	Status string `form:"status" json:"status" xml:"status"`
	// type is the type of action, which also indicates the situations in which it
	// is used.
	Type string `form:"type" json:"type" xml:"type"`
	// whether or not this action is automatically run.
	Automatic *bool `form:"automatic,omitempty" json:"automatic,omitempty" xml:"automatic,omitempty"`
	// name is an identifier for the action.
	Name string `form:"name" json:"name" xml:"name"`
	// label is the human readable name for the action.
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// run_by is the Flexera user that ran the action. If the action was applied
	// automatically, this will be who applied the action.
	RunBy *UserResponseBody `form:"run_by,omitempty" json:"run_by,omitempty" xml:"run_by,omitempty"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// options lists the configuration options used to parameterize the action.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// kind is "gov#action_status".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// actions is the list of individual steps within this action and their success
	// or failure.
	ActionItems []*ActionItemStatusResponseBody `form:"action_items" json:"action_items" xml:"action_items"`
}

// ActionItemStatusResponseBody is used to define fields on response body types.
type ActionItemStatusResponseBody struct {
	// type of the action item.
	Type string `form:"type" json:"type" xml:"type"`
	// status of the action item.
	Status string `form:"status" json:"status" xml:"status"`
	// started_at is the time when the action item was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the action item was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// error is any error that occurred when handling the action item.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// approval_request_href is an href of the approval request. Required if the
	// type is request_approval.
	ApprovalRequestHref *string `form:"approval_request_href,omitempty" json:"approval_request_href,omitempty" xml:"approval_request_href,omitempty"`
	// process_href is a url of a cloud workflow process. Required if the type is
	// cloud_workflow.
	ProcessHref *string `form:"process_href,omitempty" json:"process_href,omitempty" xml:"process_href,omitempty"`
}

// NewIndexOKResponseBody builds the HTTP response body from the result of the
// "index" endpoint of the "ActionStatus" service.
func NewIndexOKResponseBody(res *actionstatusviews.ActionStatusListView) *IndexOKResponseBody {
	body := &IndexOKResponseBody{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*ActionStatusResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalActionstatusviewsActionStatusViewToActionStatusResponseBody(val)
		}
	}
	return body
}

// NewIndexOKResponseBodyExtended builds the HTTP response body from the result
// of the "index" endpoint of the "ActionStatus" service.
func NewIndexOKResponseBodyExtended(res *actionstatusviews.ActionStatusListView) *IndexOKResponseBodyExtended {
	body := &IndexOKResponseBodyExtended{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*ActionStatusResponseBodyExtended, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalActionstatusviewsActionStatusViewToActionStatusResponseBodyExtended(val)
		}
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "ActionStatus" service.
func NewShowResponseBody(res *actionstatusviews.ActionStatusView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:         *res.ID,
		Status:     *res.Status,
		Name:       *res.Name,
		Type:       *res.Type,
		Label:      res.Label,
		Automatic:  res.Automatic,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
		Kind:       *res.Kind,
	}
	if res.RunBy != nil {
		body.RunBy = marshalActionstatusviewsUserViewToUserResponseBody(res.RunBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalActionstatusviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	return body
}

// NewShowResponseBodyExtended builds the HTTP response body from the result of
// the "show" endpoint of the "ActionStatus" service.
func NewShowResponseBodyExtended(res *actionstatusviews.ActionStatusView) *ShowResponseBodyExtended {
	body := &ShowResponseBodyExtended{
		ID:         *res.ID,
		Status:     *res.Status,
		Name:       *res.Name,
		Type:       *res.Type,
		Label:      res.Label,
		Automatic:  res.Automatic,
		StartedAt:  res.StartedAt,
		FinishedAt: res.FinishedAt,
		Kind:       *res.Kind,
	}
	if res.RunBy != nil {
		body.RunBy = marshalActionstatusviewsUserViewToUserResponseBody(res.RunBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalActionstatusviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if res.ActionItems != nil {
		body.ActionItems = make([]*ActionItemStatusResponseBody, len(res.ActionItems))
		for i, val := range res.ActionItems {
			body.ActionItems[i] = marshalActionstatusviewsActionItemStatusViewToActionItemStatusResponseBody(val)
		}
	}
	return body
}

// NewIndexUnauthorizedResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "ActionStatus" service.
func NewIndexUnauthorizedResponseBody(res *goa.ServiceError) *IndexUnauthorizedResponseBody {
	body := &IndexUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexForbiddenResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "ActionStatus" service.
func NewIndexForbiddenResponseBody(res *goa.ServiceError) *IndexForbiddenResponseBody {
	body := &IndexForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadRequestResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "ActionStatus" service.
func NewIndexBadRequestResponseBody(res *goa.ServiceError) *IndexBadRequestResponseBody {
	body := &IndexBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadGatewayResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "ActionStatus" service.
func NewIndexBadGatewayResponseBody(res *goa.ServiceError) *IndexBadGatewayResponseBody {
	body := &IndexBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexInternalErrorResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "ActionStatus" service.
func NewIndexInternalErrorResponseBody(res *goa.ServiceError) *IndexInternalErrorResponseBody {
	body := &IndexInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "ActionStatus" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "ActionStatus" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "ActionStatus" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "ActionStatus" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "ActionStatus" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "ActionStatus" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexPayload builds a ActionStatus service index endpoint payload.
func NewIndexPayload(projectID uint, view *string, incidentID *string, appliedPolicyID *string, apiVersion string, etag *string, token *string) *actionstatus.IndexPayload {
	v := &actionstatus.IndexPayload{}
	v.ProjectID = projectID
	v.View = view
	v.IncidentID = incidentID
	v.AppliedPolicyID = appliedPolicyID
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewShowPayload builds a ActionStatus service show endpoint payload.
func NewShowPayload(projectID uint, id string, view *string, apiVersion string, token *string) *actionstatus.ShowPayload {
	v := &actionstatus.ShowPayload{}
	v.ProjectID = projectID
	v.ID = id
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v
}
