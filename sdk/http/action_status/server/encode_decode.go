// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ActionStatus HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	actionstatusviews "github.com/rightscale/policy_sdk/sdk/action_status/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeIndexResponse returns an encoder for responses returned by the
// ActionStatus index endpoint.
func EncodeIndexResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*actionstatusviews.ActionStatusList)
		w.Header().Set("goa-view", res.View)
		if res.Projected.NotModified != nil && *res.Projected.NotModified == "true" {
			w.Header().Set("Etag", *res.Projected.Etag)
			w.WriteHeader(http.StatusNotModified)
			return nil
		}
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewIndexOKResponseBody(res.Projected)
		case "extended":
			body = NewIndexOKResponseBodyExtended(res.Projected)
		}
		if res.Projected.Etag != nil {
			w.Header().Set("Etag", *res.Projected.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIndexRequest returns a decoder for requests sent to the ActionStatus
// index endpoint.
func DecodeIndexRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			projectID       uint
			view            *string
			incidentID      *string
			appliedPolicyID *string
			apiVersion      string
			etag            *string
			token           *string
			err             error

			params = mux.Vars(r)
		)
		{
			projectIDRaw := params["project_id"]
			v, err2 := strconv.ParseUint(projectIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("projectID", projectIDRaw, "unsigned integer"))
			}
			projectID = uint(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "extended") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "extended"}))
			}
		}
		incidentIDRaw := r.URL.Query().Get("incident_id")
		if incidentIDRaw != "" {
			incidentID = &incidentIDRaw
		}
		appliedPolicyIDRaw := r.URL.Query().Get("applied_policy_id")
		if appliedPolicyIDRaw != "" {
			appliedPolicyID = &appliedPolicyIDRaw
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-None-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIndexPayload(projectID, view, incidentID, appliedPolicyID, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeIndexError returns an encoder for errors returned by the index
// ActionStatus endpoint.
func EncodeIndexError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeShowResponse returns an encoder for responses returned by the
// ActionStatus show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*actionstatusviews.ActionStatus)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewShowResponseBody(res.Projected)
		case "extended":
			body = NewShowResponseBodyExtended(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowRequest returns a decoder for requests sent to the ActionStatus
// show endpoint.
func DecodeShowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			projectID  uint
			id         string
			view       *string
			apiVersion string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			projectIDRaw := params["project_id"]
			v, err2 := strconv.ParseUint(projectIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("projectID", projectIDRaw, "unsigned integer"))
			}
			projectID = uint(v)
		}
		id = params["id"]
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "extended") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "extended"}))
			}
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowPayload(projectID, id, view, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeShowError returns an encoder for errors returned by the show
// ActionStatus endpoint.
func EncodeShowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalActionstatusviewsActionStatusViewToActionStatusResponseBody builds a
// value of type *ActionStatusResponseBody from a value of type
// *actionstatusviews.ActionStatusView.
func marshalActionstatusviewsActionStatusViewToActionStatusResponseBody(v *actionstatusviews.ActionStatusView) *ActionStatusResponseBody {
	if v == nil {
		return nil
	}
	res := &ActionStatusResponseBody{
		ID:         *v.ID,
		Status:     *v.Status,
		Name:       *v.Name,
		Type:       *v.Type,
		Label:      v.Label,
		Automatic:  v.Automatic,
		StartedAt:  v.StartedAt,
		FinishedAt: v.FinishedAt,
		Kind:       *v.Kind,
	}
	if v.RunBy != nil {
		res.RunBy = marshalActionstatusviewsUserViewToUserResponseBody(v.RunBy)
	}
	if v.Options != nil {
		res.Options = make([]*ConfigurationOptionResponseBody, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = marshalActionstatusviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}

	return res
}

// marshalActionstatusviewsUserViewToUserResponseBody builds a value of type
// *UserResponseBody from a value of type *actionstatusviews.UserView.
func marshalActionstatusviewsUserViewToUserResponseBody(v *actionstatusviews.UserView) *UserResponseBody {
	if v == nil {
		return nil
	}
	res := &UserResponseBody{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// marshalActionstatusviewsConfigurationOptionViewToConfigurationOptionResponseBody
// builds a value of type *ConfigurationOptionResponseBody from a value of type
// *actionstatusviews.ConfigurationOptionView.
func marshalActionstatusviewsConfigurationOptionViewToConfigurationOptionResponseBody(v *actionstatusviews.ConfigurationOptionView) *ConfigurationOptionResponseBody {
	if v == nil {
		return nil
	}
	res := &ConfigurationOptionResponseBody{
		Name:  *v.Name,
		Label: *v.Label,
		Type:  *v.Type,
		Value: v.Value,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}

	return res
}

// marshalActionstatusviewsActionStatusViewToActionStatusResponseBodyExtended
// builds a value of type *ActionStatusResponseBodyExtended from a value of
// type *actionstatusviews.ActionStatusView.
func marshalActionstatusviewsActionStatusViewToActionStatusResponseBodyExtended(v *actionstatusviews.ActionStatusView) *ActionStatusResponseBodyExtended {
	if v == nil {
		return nil
	}
	res := &ActionStatusResponseBodyExtended{
		ID:         *v.ID,
		Status:     *v.Status,
		Name:       *v.Name,
		Type:       *v.Type,
		Label:      v.Label,
		Automatic:  v.Automatic,
		StartedAt:  v.StartedAt,
		FinishedAt: v.FinishedAt,
		Kind:       *v.Kind,
	}
	if v.RunBy != nil {
		res.RunBy = marshalActionstatusviewsUserViewToUserResponseBody(v.RunBy)
	}
	if v.Options != nil {
		res.Options = make([]*ConfigurationOptionResponseBody, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = marshalActionstatusviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if v.ActionItems != nil {
		res.ActionItems = make([]*ActionItemStatusResponseBody, len(v.ActionItems))
		for i, val := range v.ActionItems {
			res.ActionItems[i] = marshalActionstatusviewsActionItemStatusViewToActionItemStatusResponseBody(val)
		}
	}

	return res
}

// marshalActionstatusviewsActionItemStatusViewToActionItemStatusResponseBody
// builds a value of type *ActionItemStatusResponseBody from a value of type
// *actionstatusviews.ActionItemStatusView.
func marshalActionstatusviewsActionItemStatusViewToActionItemStatusResponseBody(v *actionstatusviews.ActionItemStatusView) *ActionItemStatusResponseBody {
	res := &ActionItemStatusResponseBody{
		Type:                *v.Type,
		Status:              *v.Status,
		StartedAt:           v.StartedAt,
		FinishedAt:          v.FinishedAt,
		Error:               v.Error,
		ApprovalRequestHref: v.ApprovalRequestHref,
		ProcessHref:         v.ProcessHref,
	}

	return res
}
