// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ActionStatus HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"fmt"
	"strconv"

	actionstatus "github.com/rightscale/policy_sdk/sdk/action_status"
	goa "goa.design/goa/v3/pkg"
)

// BuildIndexPayload builds the payload for the ActionStatus index endpoint
// from CLI flags.
func BuildIndexPayload(actionStatusIndexProjectID string, actionStatusIndexView string, actionStatusIndexIncidentID string, actionStatusIndexAppliedPolicyID string, actionStatusIndexAPIVersion string, actionStatusIndexEtag string, actionStatusIndexToken string) (*actionstatus.IndexPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(actionStatusIndexProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var view *string
	{
		if actionStatusIndexView != "" {
			view = &actionStatusIndexView
			if view != nil {
				if !(*view == "default" || *view == "extended") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "extended"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var incidentID *string
	{
		if actionStatusIndexIncidentID != "" {
			incidentID = &actionStatusIndexIncidentID
		}
	}
	var appliedPolicyID *string
	{
		if actionStatusIndexAppliedPolicyID != "" {
			appliedPolicyID = &actionStatusIndexAppliedPolicyID
		}
	}
	var apiVersion string
	{
		apiVersion = actionStatusIndexAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var etag *string
	{
		if actionStatusIndexEtag != "" {
			etag = &actionStatusIndexEtag
		}
	}
	var token *string
	{
		if actionStatusIndexToken != "" {
			token = &actionStatusIndexToken
		}
	}
	v := &actionstatus.IndexPayload{}
	v.ProjectID = projectID
	v.View = view
	v.IncidentID = incidentID
	v.AppliedPolicyID = appliedPolicyID
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v, nil
}

// BuildShowPayload builds the payload for the ActionStatus show endpoint from
// CLI flags.
func BuildShowPayload(actionStatusShowProjectID string, actionStatusShowID string, actionStatusShowView string, actionStatusShowAPIVersion string, actionStatusShowToken string) (*actionstatus.ShowPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(actionStatusShowProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var id string
	{
		id = actionStatusShowID
	}
	var view *string
	{
		if actionStatusShowView != "" {
			view = &actionStatusShowView
			if view != nil {
				if !(*view == "default" || *view == "extended") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "extended"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var apiVersion string
	{
		apiVersion = actionStatusShowAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if actionStatusShowToken != "" {
			token = &actionStatusShowToken
		}
	}
	v := &actionstatus.ShowPayload{}
	v.ProjectID = projectID
	v.ID = id
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}
