// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ActionStatus HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	actionstatus "github.com/flexera-public/policy_sdk/sdk/action_status"
	actionstatusviews "github.com/flexera-public/policy_sdk/sdk/action_status/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "ActionStatus" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*actionstatus.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ActionStatus", "index", "*actionstatus.IndexPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexActionStatusPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ActionStatus", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the ActionStatus
// index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*actionstatus.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("ActionStatus", "index", "*actionstatus.IndexPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		if p.IncidentID != nil {
			values.Add("incident_id", *p.IncidentID)
		}
		if p.AppliedPolicyID != nil {
			values.Add("applied_policy_id", *p.AppliedPolicyID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// ActionStatus index endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			p := NewIndexActionStatusListNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &actionstatusviews.ActionStatusList{Projected: p, View: view}
			res := actionstatus.NewActionStatusList(vres)
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "index", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			p := NewIndexActionStatusListOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &actionstatusviews.ActionStatusList{Projected: p, View: view}
			if err = actionstatusviews.ValidateActionStatusList(vres); err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			res := actionstatus.NewActionStatusList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "index", err)
			}
			err = ValidateIndexUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "index", err)
			}
			err = ValidateIndexForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ActionStatus", "index", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "ActionStatus" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
		id        string
	)
	{
		p, ok := v.(*actionstatus.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ActionStatus", "show", "*actionstatus.ShowPayload", v)
		}
		projectID = p.ProjectID
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowActionStatusPath(projectID, id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ActionStatus", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the ActionStatus
// show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*actionstatus.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("ActionStatus", "show", "*actionstatus.ShowPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// ActionStatus show endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "show", err)
			}
			p := NewShowActionStatusOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &actionstatusviews.ActionStatus{Projected: p, View: view}
			if err = actionstatusviews.ValidateActionStatus(vres); err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "show", err)
			}
			res := actionstatus.NewActionStatus(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "show", err)
			}
			err = ValidateShowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "show", err)
			}
			err = ValidateShowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "show", err)
			}
			err = ValidateShowBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActionStatus", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActionStatus", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ActionStatus", "show", resp.StatusCode, string(body))
		}
	}
}

// unmarshalActionStatusResponseBodyToActionstatusviewsActionStatusView builds
// a value of type *actionstatusviews.ActionStatusView from a value of type
// *ActionStatusResponseBody.
func unmarshalActionStatusResponseBodyToActionstatusviewsActionStatusView(v *ActionStatusResponseBody) *actionstatusviews.ActionStatusView {
	if v == nil {
		return nil
	}
	res := &actionstatusviews.ActionStatusView{
		ID:         v.ID,
		Status:     v.Status,
		Name:       v.Name,
		Type:       v.Type,
		Label:      v.Label,
		Automatic:  v.Automatic,
		StartedAt:  v.StartedAt,
		FinishedAt: v.FinishedAt,
		Kind:       v.Kind,
	}
	if v.RunBy != nil {
		res.RunBy = unmarshalUserResponseBodyToActionstatusviewsUserView(v.RunBy)
	}
	if v.Options != nil {
		res.Options = make([]*actionstatusviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToActionstatusviewsConfigurationOptionView(val)
		}
	}
	res.ActionItems = make([]*actionstatusviews.ActionItemStatusView, len(v.ActionItems))
	for i, val := range v.ActionItems {
		res.ActionItems[i] = unmarshalActionItemStatusResponseBodyToActionstatusviewsActionItemStatusView(val)
	}

	return res
}

// unmarshalUserResponseBodyToActionstatusviewsUserView builds a value of type
// *actionstatusviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToActionstatusviewsUserView(v *UserResponseBody) *actionstatusviews.UserView {
	if v == nil {
		return nil
	}
	res := &actionstatusviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalConfigurationOptionResponseBodyToActionstatusviewsConfigurationOptionView
// builds a value of type *actionstatusviews.ConfigurationOptionView from a
// value of type *ConfigurationOptionResponseBody.
func unmarshalConfigurationOptionResponseBodyToActionstatusviewsConfigurationOptionView(v *ConfigurationOptionResponseBody) *actionstatusviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &actionstatusviews.ConfigurationOptionView{
		Name:   v.Name,
		Label:  v.Label,
		Type:   v.Type,
		Value:  v.Value,
		NoEcho: v.NoEcho,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}

	return res
}

// unmarshalActionItemStatusResponseBodyToActionstatusviewsActionItemStatusView
// builds a value of type *actionstatusviews.ActionItemStatusView from a value
// of type *ActionItemStatusResponseBody.
func unmarshalActionItemStatusResponseBodyToActionstatusviewsActionItemStatusView(v *ActionItemStatusResponseBody) *actionstatusviews.ActionItemStatusView {
	res := &actionstatusviews.ActionItemStatusView{
		Type:                v.Type,
		Status:              v.Status,
		StartedAt:           v.StartedAt,
		FinishedAt:          v.FinishedAt,
		Error:               v.Error,
		ApprovalRequestHref: v.ApprovalRequestHref,
		ProcessHref:         v.ProcessHref,
	}

	return res
}
