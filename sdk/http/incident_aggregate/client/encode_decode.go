// Code generated by goa v3.1.3, DO NOT EDIT.
//
// IncidentAggregate HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	incidentaggregate "github.com/rightscale/policy_sdk/sdk/incident_aggregate"
	incidentaggregateviews "github.com/rightscale/policy_sdk/sdk/incident_aggregate/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "IncidentAggregate" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID               uint
		incidentAggregateID string
	)
	{
		p, ok := v.(*incidentaggregate.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("IncidentAggregate", "show", "*incidentaggregate.ShowPayload", v)
		}
		orgID = p.OrgID
		incidentAggregateID = p.IncidentAggregateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowIncidentAggregatePath(orgID, incidentAggregateID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("IncidentAggregate", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the
// IncidentAggregate show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incidentaggregate.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("IncidentAggregate", "show", "*incidentaggregate.ShowPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// IncidentAggregate show endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			p := NewShowIncidentAggregateNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &incidentaggregateviews.IncidentAggregate{Projected: p, View: view}
			res := incidentaggregate.NewIncidentAggregate(vres)
			return res, nil
		case http.StatusOK:
			var (
				body ShowOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			p := NewShowIncidentAggregateOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &incidentaggregateviews.IncidentAggregate{Projected: p, View: view}
			if err = incidentaggregateviews.ValidateIncidentAggregate(vres); err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			res := incidentaggregate.NewIncidentAggregate(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show", err)
			}
			err = ValidateShowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show", err)
			}
			err = ValidateShowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show", err)
			}
			err = ValidateShowBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("IncidentAggregate", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildShowNonCatalogRequest instantiates a HTTP request object with method
// and path set to call the "IncidentAggregate" service "show_non_catalog"
// endpoint
func (c *Client) BuildShowNonCatalogRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID uint
	)
	{
		p, ok := v.(*incidentaggregate.ShowNonCatalogPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("IncidentAggregate", "show_non_catalog", "*incidentaggregate.ShowNonCatalogPayload", v)
		}
		orgID = p.OrgID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowNonCatalogIncidentAggregatePath(orgID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("IncidentAggregate", "show_non_catalog", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowNonCatalogRequest returns an encoder for requests sent to the
// IncidentAggregate show_non_catalog server.
func EncodeShowNonCatalogRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incidentaggregate.ShowNonCatalogPayload)
		if !ok {
			return goahttp.ErrInvalidType("IncidentAggregate", "show_non_catalog", "*incidentaggregate.ShowNonCatalogPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowNonCatalogResponse returns a decoder for responses returned by the
// IncidentAggregate show_non_catalog endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeShowNonCatalogResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowNonCatalogResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			p := NewShowNonCatalogIncidentAggregateNonCatalogNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &incidentaggregateviews.IncidentAggregateNonCatalog{Projected: p, View: view}
			res := incidentaggregate.NewIncidentAggregateNonCatalog(vres)
			return res, nil
		case http.StatusOK:
			var (
				body ShowNonCatalogOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show_non_catalog", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			p := NewShowNonCatalogIncidentAggregateNonCatalogOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &incidentaggregateviews.IncidentAggregateNonCatalog{Projected: p, View: view}
			if err = incidentaggregateviews.ValidateIncidentAggregateNonCatalog(vres); err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			res := incidentaggregate.NewIncidentAggregateNonCatalog(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ShowNonCatalogUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show_non_catalog", err)
			}
			err = ValidateShowNonCatalogUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			return nil, NewShowNonCatalogUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowNonCatalogForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show_non_catalog", err)
			}
			err = ValidateShowNonCatalogForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			return nil, NewShowNonCatalogForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowNonCatalogBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show_non_catalog", err)
			}
			err = ValidateShowNonCatalogBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			return nil, NewShowNonCatalogBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowNonCatalogBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show_non_catalog", err)
			}
			err = ValidateShowNonCatalogBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			return nil, NewShowNonCatalogBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowNonCatalogInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "show_non_catalog", err)
			}
			err = ValidateShowNonCatalogInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "show_non_catalog", err)
			}
			return nil, NewShowNonCatalogInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("IncidentAggregate", "show_non_catalog", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "IncidentAggregate" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID uint
	)
	{
		p, ok := v.(*incidentaggregate.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("IncidentAggregate", "index", "*incidentaggregate.IndexPayload", v)
		}
		orgID = p.OrgID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexIncidentAggregatePath(orgID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("IncidentAggregate", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the
// IncidentAggregate index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incidentaggregate.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("IncidentAggregate", "index", "*incidentaggregate.IndexPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// IncidentAggregate index endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			p := NewIndexIncidentAggregateListNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := "default"
			vres := &incidentaggregateviews.IncidentAggregateList{Projected: p, View: view}
			res := incidentaggregate.NewIncidentAggregateList(vres)
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "index", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			p := NewIndexIncidentAggregateListOK(&body, etag)
			view := "default"
			vres := &incidentaggregateviews.IncidentAggregateList{Projected: p, View: view}
			if err = incidentaggregateviews.ValidateIncidentAggregateList(vres); err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			res := incidentaggregate.NewIncidentAggregateList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "index", err)
			}
			err = ValidateIndexUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "index", err)
			}
			err = ValidateIndexForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("IncidentAggregate", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("IncidentAggregate", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("IncidentAggregate", "index", resp.StatusCode, string(body))
		}
	}
}

// unmarshalOrgResponseBodyToIncidentaggregateviewsOrgView builds a value of
// type *incidentaggregateviews.OrgView from a value of type *OrgResponseBody.
func unmarshalOrgResponseBodyToIncidentaggregateviewsOrgView(v *OrgResponseBody) *incidentaggregateviews.OrgView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.OrgView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalPolicyAggregateResponseBodyToIncidentaggregateviewsPolicyAggregateView
// builds a value of type *incidentaggregateviews.PolicyAggregateView from a
// value of type *PolicyAggregateResponseBody.
func unmarshalPolicyAggregateResponseBodyToIncidentaggregateviewsPolicyAggregateView(v *PolicyAggregateResponseBody) *incidentaggregateviews.PolicyAggregateView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.PolicyAggregateView{
		ID:                    v.ID,
		Name:                  v.Name,
		Href:                  v.Href,
		IncidentAggregateHref: v.IncidentAggregateHref,
		Description:           v.Description,
		DocLink:               v.DocLink,
		CreatedAt:             v.CreatedAt,
		UpdatedAt:             v.UpdatedAt,
		Severity:              v.Severity,
		Category:              v.Category,
		Frequency:             v.Frequency,
		DryRun:                v.DryRun,
		SkipApprovals:         v.SkipApprovals,
		Status:                v.Status,
		Count:                 v.Count,
		ActiveCount:           v.ActiveCount,
		ErrorCount:            v.ErrorCount,
		Kind:                  v.Kind,
	}
	if v.Org != nil {
		res.Org = unmarshalOrgResponseBodyToIncidentaggregateviewsOrgView(v.Org)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = unmarshalPublishedTemplateResponseBodyToIncidentaggregateviewsPublishedTemplateView(v.PublishedTemplate)
	}
	if v.ProjectIds != nil {
		res.ProjectIds = make([]uint, len(v.ProjectIds))
		for i, val := range v.ProjectIds {
			res.ProjectIds[i] = val
		}
	}
	if v.ExcludedProjectIds != nil {
		res.ExcludedProjectIds = make([]uint, len(v.ExcludedProjectIds))
		for i, val := range v.ExcludedProjectIds {
			res.ExcludedProjectIds[i] = val
		}
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.CreatedBy)
	}
	if v.Options != nil {
		res.Options = make([]*incidentaggregateviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToIncidentaggregateviewsConfigurationOptionView(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]string, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}
	if v.RunningProjectIds != nil {
		res.RunningProjectIds = make([]uint, len(v.RunningProjectIds))
		for i, val := range v.RunningProjectIds {
			res.RunningProjectIds[i] = val
		}
	}
	if v.Errors != nil {
		res.Errors = make(map[string]string, len(v.Errors))
		for key, val := range v.Errors {
			tk := key
			tv := val
			res.Errors[tk] = tv
		}
	}
	if v.Items != nil {
		res.Items = make([]*incidentaggregateviews.PolicyAggregateItemView, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = unmarshalPolicyAggregateItemResponseBodyToIncidentaggregateviewsPolicyAggregateItemView(val)
		}
	}

	return res
}

// unmarshalPublishedTemplateResponseBodyToIncidentaggregateviewsPublishedTemplateView
// builds a value of type *incidentaggregateviews.PublishedTemplateView from a
// value of type *PublishedTemplateResponseBody.
func unmarshalPublishedTemplateResponseBodyToIncidentaggregateviewsPublishedTemplateView(v *PublishedTemplateResponseBody) *incidentaggregateviews.PublishedTemplateView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.PublishedTemplateView{
		ID:                        v.ID,
		Name:                      v.Name,
		OrgID:                     v.OrgID,
		ProjectID:                 v.ProjectID,
		PolicyTemplateID:          v.PolicyTemplateID,
		PolicyTemplateURL:         v.PolicyTemplateURL,
		PolicyTemplateFingerprint: v.PolicyTemplateFingerprint,
		RsPtVer:                   v.RsPtVer,
		ShortDescription:          v.ShortDescription,
		LongDescription:           v.LongDescription,
		DocLink:                   v.DocLink,
		DefaultFrequency:          v.DefaultFrequency,
		Href:                      v.Href,
		Filename:                  v.Filename,
		Source:                    v.Source,
		Fingerprint:               v.Fingerprint,
		Category:                  v.Category,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
		Severity:                  v.Severity,
		BuiltIn:                   v.BuiltIn,
		Hidden:                    v.Hidden,
		HiddenAt:                  v.HiddenAt,
		Tenancy:                   v.Tenancy,
		Kind:                      v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*incidentaggregateviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = unmarshalPermissionResponseBodyToIncidentaggregateviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*incidentaggregateviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToIncidentaggregateviewsParameterView(val)
		}
	}
	if v.HiddenBy != nil {
		res.HiddenBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.HiddenBy)
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*incidentaggregateviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = unmarshalCredentialsResponseBodyToIncidentaggregateviewsCredentialsView(val)
		}
	}

	return res
}

// unmarshalUserResponseBodyToIncidentaggregateviewsUserView builds a value of
// type *incidentaggregateviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v *UserResponseBody) *incidentaggregateviews.UserView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalPermissionResponseBodyToIncidentaggregateviewsPermissionView builds
// a value of type *incidentaggregateviews.PermissionView from a value of type
// *PermissionResponseBody.
func unmarshalPermissionResponseBodyToIncidentaggregateviewsPermissionView(v *PermissionResponseBody) *incidentaggregateviews.PermissionView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.PermissionView{
		Name:  v.Name,
		Label: v.Label,
	}
	res.Resources = make([]string, len(v.Resources))
	for i, val := range v.Resources {
		res.Resources[i] = val
	}
	res.Actions = make([]string, len(v.Actions))
	for i, val := range v.Actions {
		res.Actions[i] = val
	}

	return res
}

// unmarshalParameterResponseBodyToIncidentaggregateviewsParameterView builds a
// value of type *incidentaggregateviews.ParameterView from a value of type
// *ParameterResponseBody.
func unmarshalParameterResponseBodyToIncidentaggregateviewsParameterView(v *ParameterResponseBody) *incidentaggregateviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.ParameterView{
		Name:                  v.Name,
		Type:                  v.Type,
		Label:                 v.Label,
		Index:                 v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = unmarshalRegexpResponseBodyToIncidentaggregateviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// unmarshalRegexpResponseBodyToIncidentaggregateviewsRegexpView builds a value
// of type *incidentaggregateviews.RegexpView from a value of type
// *RegexpResponseBody.
func unmarshalRegexpResponseBodyToIncidentaggregateviewsRegexpView(v *RegexpResponseBody) *incidentaggregateviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.RegexpView{
		Pattern: v.Pattern,
		Options: v.Options,
	}

	return res
}

// unmarshalCredentialsResponseBodyToIncidentaggregateviewsCredentialsView
// builds a value of type *incidentaggregateviews.CredentialsView from a value
// of type *CredentialsResponseBody.
func unmarshalCredentialsResponseBodyToIncidentaggregateviewsCredentialsView(v *CredentialsResponseBody) *incidentaggregateviews.CredentialsView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.CredentialsView{
		Name:        v.Name,
		Label:       v.Label,
		Description: v.Description,
	}
	res.Schemes = make([]string, len(v.Schemes))
	for i, val := range v.Schemes {
		res.Schemes[i] = val
	}
	if v.Tags != nil {
		res.Tags = make([]*incidentaggregateviews.CredentialsTagView, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = unmarshalCredentialsTagResponseBodyToIncidentaggregateviewsCredentialsTagView(val)
		}
	}

	return res
}

// unmarshalCredentialsTagResponseBodyToIncidentaggregateviewsCredentialsTagView
// builds a value of type *incidentaggregateviews.CredentialsTagView from a
// value of type *CredentialsTagResponseBody.
func unmarshalCredentialsTagResponseBodyToIncidentaggregateviewsCredentialsTagView(v *CredentialsTagResponseBody) *incidentaggregateviews.CredentialsTagView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.CredentialsTagView{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// unmarshalConfigurationOptionResponseBodyToIncidentaggregateviewsConfigurationOptionView
// builds a value of type *incidentaggregateviews.ConfigurationOptionView from
// a value of type *ConfigurationOptionResponseBody.
func unmarshalConfigurationOptionResponseBodyToIncidentaggregateviewsConfigurationOptionView(v *ConfigurationOptionResponseBody) *incidentaggregateviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.ConfigurationOptionView{
		Name:   v.Name,
		Label:  v.Label,
		Type:   v.Type,
		Value:  v.Value,
		NoEcho: v.NoEcho,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}

	return res
}

// unmarshalPolicyAggregateItemResponseBodyToIncidentaggregateviewsPolicyAggregateItemView
// builds a value of type *incidentaggregateviews.PolicyAggregateItemView from
// a value of type *PolicyAggregateItemResponseBody.
func unmarshalPolicyAggregateItemResponseBodyToIncidentaggregateviewsPolicyAggregateItemView(v *PolicyAggregateItemResponseBody) *incidentaggregateviews.PolicyAggregateItemView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.PolicyAggregateItemView{
		ID:        v.ID,
		URL:       v.URL,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Status:    v.Status,
		Error:     v.Error,
		ErroredAt: v.ErroredAt,
		Kind:      v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToIncidentaggregateviewsProjectView(v.Project)
	}

	return res
}

// unmarshalProjectResponseBodyToIncidentaggregateviewsProjectView builds a
// value of type *incidentaggregateviews.ProjectView from a value of type
// *ProjectResponseBody.
func unmarshalProjectResponseBodyToIncidentaggregateviewsProjectView(v *ProjectResponseBody) *incidentaggregateviews.ProjectView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.ProjectView{
		ID:      v.ID,
		Name:    v.Name,
		OrgID:   v.OrgID,
		OrgName: v.OrgName,
	}

	return res
}

// unmarshalIncidentSummaryResponseBodyToIncidentaggregateviewsIncidentSummaryView
// builds a value of type *incidentaggregateviews.IncidentSummaryView from a
// value of type *IncidentSummaryResponseBody.
func unmarshalIncidentSummaryResponseBodyToIncidentaggregateviewsIncidentSummaryView(v *IncidentSummaryResponseBody) *incidentaggregateviews.IncidentSummaryView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.IncidentSummaryView{
		IncidentCount:      v.IncidentCount,
		ViolationDataCount: v.ViolationDataCount,
		ResolvedCount:      v.ResolvedCount,
		TriggeredCount:     v.TriggeredCount,
	}

	return res
}

// unmarshalActionSummaryResponseBodyToIncidentaggregateviewsActionSummaryView
// builds a value of type *incidentaggregateviews.ActionSummaryView from a
// value of type *ActionSummaryResponseBody.
func unmarshalActionSummaryResponseBodyToIncidentaggregateviewsActionSummaryView(v *ActionSummaryResponseBody) *incidentaggregateviews.ActionSummaryView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.ActionSummaryView{
		PendingCount: v.PendingCount,
		FailedCount:  v.FailedCount,
	}

	return res
}

// unmarshalIncidentAggregateItemResponseBodyToIncidentaggregateviewsIncidentAggregateItemView
// builds a value of type *incidentaggregateviews.IncidentAggregateItemView
// from a value of type *IncidentAggregateItemResponseBody.
func unmarshalIncidentAggregateItemResponseBodyToIncidentaggregateviewsIncidentAggregateItemView(v *IncidentAggregateItemResponseBody) *incidentaggregateviews.IncidentAggregateItemView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.IncidentAggregateItemView{
		ID:                 v.ID,
		URL:                v.URL,
		ViolationDataCount: v.ViolationDataCount,
		CreatedAt:          v.CreatedAt,
		UpdatedAt:          v.UpdatedAt,
		ResolvedAt:         v.ResolvedAt,
		ResolutionMessage:  v.ResolutionMessage,
		State:              v.State,
		ActionFailed:       v.ActionFailed,
		ActionPending:      v.ActionPending,
		Kind:               v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToIncidentaggregateviewsProjectView(v.Project)
	}
	if v.ResolvedBy != nil {
		res.ResolvedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.ResolvedBy)
	}

	return res
}

// unmarshalPolicyAggregateNonCatalogResponseBodyToIncidentaggregateviewsPolicyAggregateNonCatalogView
// builds a value of type *incidentaggregateviews.PolicyAggregateNonCatalogView
// from a value of type *PolicyAggregateNonCatalogResponseBody.
func unmarshalPolicyAggregateNonCatalogResponseBodyToIncidentaggregateviewsPolicyAggregateNonCatalogView(v *PolicyAggregateNonCatalogResponseBody) *incidentaggregateviews.PolicyAggregateNonCatalogView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.PolicyAggregateNonCatalogView{
		Href:                  v.Href,
		IncidentAggregateHref: v.IncidentAggregateHref,
		Count:                 v.Count,
		ActiveCount:           v.ActiveCount,
		ErrorCount:            v.ErrorCount,
		Kind:                  v.Kind,
	}
	if v.RunningProjectIds != nil {
		res.RunningProjectIds = make([]uint, len(v.RunningProjectIds))
		for i, val := range v.RunningProjectIds {
			res.RunningProjectIds[i] = val
		}
	}
	if v.Items != nil {
		res.Items = make([]*incidentaggregateviews.PolicyAggregateNonCatalogItemView, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = unmarshalPolicyAggregateNonCatalogItemResponseBodyToIncidentaggregateviewsPolicyAggregateNonCatalogItemView(val)
		}
	}

	return res
}

// unmarshalPolicyAggregateNonCatalogItemResponseBodyToIncidentaggregateviewsPolicyAggregateNonCatalogItemView
// builds a value of type
// *incidentaggregateviews.PolicyAggregateNonCatalogItemView from a value of
// type *PolicyAggregateNonCatalogItemResponseBody.
func unmarshalPolicyAggregateNonCatalogItemResponseBodyToIncidentaggregateviewsPolicyAggregateNonCatalogItemView(v *PolicyAggregateNonCatalogItemResponseBody) *incidentaggregateviews.PolicyAggregateNonCatalogItemView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.PolicyAggregateNonCatalogItemView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		URL:         v.URL,
		Status:      v.Status,
		Error:       v.Error,
		ErroredAt:   v.ErroredAt,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		Severity:    v.Severity,
		Category:    v.Category,
		Frequency:   v.Frequency,
		DryRun:      v.DryRun,
		Kind:        v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToIncidentaggregateviewsProjectView(v.Project)
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = unmarshalPolicyTemplateResponseBodyToIncidentaggregateviewsPolicyTemplateView(v.PolicyTemplate)
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.CreatedBy)
	}

	return res
}

// unmarshalPolicyTemplateResponseBodyToIncidentaggregateviewsPolicyTemplateView
// builds a value of type *incidentaggregateviews.PolicyTemplateView from a
// value of type *PolicyTemplateResponseBody.
func unmarshalPolicyTemplateResponseBodyToIncidentaggregateviewsPolicyTemplateView(v *PolicyTemplateResponseBody) *incidentaggregateviews.PolicyTemplateView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.PolicyTemplateView{
		ID:               v.ID,
		Name:             v.Name,
		ProjectID:        v.ProjectID,
		RsPtVer:          v.RsPtVer,
		ShortDescription: v.ShortDescription,
		LongDescription:  v.LongDescription,
		DocLink:          v.DocLink,
		DefaultFrequency: v.DefaultFrequency,
		Href:             v.Href,
		Filename:         v.Filename,
		Source:           v.Source,
		Fingerprint:      v.Fingerprint,
		Category:         v.Category,
		CreatedAt:        v.CreatedAt,
		UpdatedAt:        v.UpdatedAt,
		Severity:         v.Severity,
		Tenancy:          v.Tenancy,
		Kind:             v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*incidentaggregateviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = unmarshalPermissionResponseBodyToIncidentaggregateviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*incidentaggregateviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToIncidentaggregateviewsParameterView(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*incidentaggregateviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = unmarshalCredentialsResponseBodyToIncidentaggregateviewsCredentialsView(val)
		}
	}

	return res
}

// unmarshalIncidentAggregateNonCatalogItemResponseBodyToIncidentaggregateviewsIncidentAggregateNonCatalogItemView
// builds a value of type
// *incidentaggregateviews.IncidentAggregateNonCatalogItemView from a value of
// type *IncidentAggregateNonCatalogItemResponseBody.
func unmarshalIncidentAggregateNonCatalogItemResponseBodyToIncidentaggregateviewsIncidentAggregateNonCatalogItemView(v *IncidentAggregateNonCatalogItemResponseBody) *incidentaggregateviews.IncidentAggregateNonCatalogItemView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.IncidentAggregateNonCatalogItemView{
		ID:                 v.ID,
		URL:                v.URL,
		ViolationDataCount: v.ViolationDataCount,
		CreatedAt:          v.CreatedAt,
		UpdatedAt:          v.UpdatedAt,
		ResolvedAt:         v.ResolvedAt,
		ResolutionMessage:  v.ResolutionMessage,
		State:              v.State,
		ActionFailed:       v.ActionFailed,
		ActionPending:      v.ActionPending,
		Severity:           v.Severity,
		Category:           v.Category,
		DryRun:             v.DryRun,
		Kind:               v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToIncidentaggregateviewsProjectView(v.Project)
	}
	if v.AppliedPolicy != nil {
		res.AppliedPolicy = unmarshalAppliedPolicyResponseBodyToIncidentaggregateviewsAppliedPolicyView(v.AppliedPolicy)
	}
	if v.ResolvedBy != nil {
		res.ResolvedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.ResolvedBy)
	}

	return res
}

// unmarshalAppliedPolicyResponseBodyToIncidentaggregateviewsAppliedPolicyView
// builds a value of type *incidentaggregateviews.AppliedPolicyView from a
// value of type *AppliedPolicyResponseBody.
func unmarshalAppliedPolicyResponseBodyToIncidentaggregateviewsAppliedPolicyView(v *AppliedPolicyResponseBody) *incidentaggregateviews.AppliedPolicyView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.AppliedPolicyView{
		ID:                  v.ID,
		PolicyAggregateID:   v.PolicyAggregateID,
		IncidentAggregateID: v.IncidentAggregateID,
		Name:                v.Name,
		Href:                v.Href,
		Description:         v.Description,
		DocLink:             v.DocLink,
		CreatedAt:           v.CreatedAt,
		UpdatedAt:           v.UpdatedAt,
		Severity:            v.Severity,
		Category:            v.Category,
		Frequency:           v.Frequency,
		DryRun:              v.DryRun,
		SkipApprovals:       v.SkipApprovals,
		Status:              v.Status,
		Error:               v.Error,
		ErroredAt:           v.ErroredAt,
		Scope:               v.Scope,
		Kind:                v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToIncidentaggregateviewsProjectView(v.Project)
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = unmarshalPolicyTemplateResponseBodyToIncidentaggregateviewsPolicyTemplateView(v.PolicyTemplate)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = unmarshalPublishedTemplateResponseBodyToIncidentaggregateviewsPublishedTemplateView(v.PublishedTemplate)
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToIncidentaggregateviewsUserView(v.CreatedBy)
	}
	if v.Options != nil {
		res.Options = make([]*incidentaggregateviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToIncidentaggregateviewsConfigurationOptionView(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]string, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}

	return res
}

// unmarshalIncidentAggregateResponseBodyToIncidentaggregateviewsIncidentAggregateView
// builds a value of type *incidentaggregateviews.IncidentAggregateView from a
// value of type *IncidentAggregateResponseBody.
func unmarshalIncidentAggregateResponseBodyToIncidentaggregateviewsIncidentAggregateView(v *IncidentAggregateResponseBody) *incidentaggregateviews.IncidentAggregateView {
	if v == nil {
		return nil
	}
	res := &incidentaggregateviews.IncidentAggregateView{
		ID:          v.ID,
		Href:        v.Href,
		Count:       v.Count,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		State:       v.State,
		Severity:    v.Severity,
		Category:    v.Category,
		DryRun:      v.DryRun,
		Kind:        v.Kind,
		Etag:        v.Etag,
		NotModified: v.NotModified,
	}
	if v.Org != nil {
		res.Org = unmarshalOrgResponseBodyToIncidentaggregateviewsOrgView(v.Org)
	}
	if v.PolicyAggregate != nil {
		res.PolicyAggregate = unmarshalPolicyAggregateResponseBodyToIncidentaggregateviewsPolicyAggregateView(v.PolicyAggregate)
	}
	if v.IncidentSummary != nil {
		res.IncidentSummary = unmarshalIncidentSummaryResponseBodyToIncidentaggregateviewsIncidentSummaryView(v.IncidentSummary)
	}
	if v.ActionSummary != nil {
		res.ActionSummary = unmarshalActionSummaryResponseBodyToIncidentaggregateviewsActionSummaryView(v.ActionSummary)
	}
	if v.Items != nil {
		res.Items = make([]*incidentaggregateviews.IncidentAggregateItemView, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = unmarshalIncidentAggregateItemResponseBodyToIncidentaggregateviewsIncidentAggregateItemView(val)
		}
	}

	return res
}
