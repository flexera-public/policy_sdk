// Code generated by goa v3.1.3, DO NOT EDIT.
//
// IncidentAggregate HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	incidentaggregateviews "github.com/rightscale/policy_sdk/sdk/incident_aggregate/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeShowResponse returns an encoder for responses returned by the
// IncidentAggregate show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*incidentaggregateviews.IncidentAggregate)
		w.Header().Set("goa-view", res.View)
		if res.Projected.NotModified != nil && *res.Projected.NotModified == "true" {
			w.Header().Set("Etag", *res.Projected.Etag)
			w.WriteHeader(http.StatusNotModified)
			return nil
		}
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "index":
			body = NewShowOKResponseBodyIndex(res.Projected)
		case "default", "":
			body = NewShowOKResponseBody(res.Projected)
		case "source":
			body = NewShowOKResponseBodySource(res.Projected)
		}
		if res.Projected.Etag != nil {
			w.Header().Set("Etag", *res.Projected.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowRequest returns a decoder for requests sent to the
// IncidentAggregate show endpoint.
func DecodeShowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orgID               uint
			incidentAggregateID string
			view                *string
			apiVersion          string
			etag                *string
			token               *string
			err                 error

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		incidentAggregateID = params["incident_aggregate_id"]
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "index" || *view == "source") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "index", "source"}))
			}
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-None-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowPayload(orgID, incidentAggregateID, view, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeShowError returns an encoder for errors returned by the show
// IncidentAggregate endpoint.
func EncodeShowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeShowNonCatalogResponse returns an encoder for responses returned by
// the IncidentAggregate show_non_catalog endpoint.
func EncodeShowNonCatalogResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*incidentaggregateviews.IncidentAggregateNonCatalog)
		w.Header().Set("goa-view", res.View)
		if res.Projected.NotModified != nil && *res.Projected.NotModified == "true" {
			w.Header().Set("Etag", *res.Projected.Etag)
			w.WriteHeader(http.StatusNotModified)
			return nil
		}
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "index":
			body = NewShowNonCatalogOKResponseBodyIndex(res.Projected)
		case "default", "":
			body = NewShowNonCatalogOKResponseBody(res.Projected)
		}
		if res.Projected.Etag != nil {
			w.Header().Set("Etag", *res.Projected.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowNonCatalogRequest returns a decoder for requests sent to the
// IncidentAggregate show_non_catalog endpoint.
func DecodeShowNonCatalogRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orgID      uint
			view       *string
			apiVersion string
			etag       *string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "index") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "index"}))
			}
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-None-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowNonCatalogPayload(orgID, view, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeShowNonCatalogError returns an encoder for errors returned by the
// show_non_catalog IncidentAggregate endpoint.
func EncodeShowNonCatalogError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeIndexResponse returns an encoder for responses returned by the
// IncidentAggregate index endpoint.
func EncodeIndexResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*incidentaggregateviews.IncidentAggregateList)
		if res.Projected.NotModified != nil && *res.Projected.NotModified == "true" {
			w.Header().Set("Etag", *res.Projected.Etag)
			w.WriteHeader(http.StatusNotModified)
			return nil
		}
		enc := encoder(ctx, w)
		body := NewIndexOKResponseBody(res.Projected)
		if res.Projected.Etag != nil {
			w.Header().Set("Etag", *res.Projected.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIndexRequest returns a decoder for requests sent to the
// IncidentAggregate index endpoint.
func DecodeIndexRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orgID      uint
			view       *string
			apiVersion string
			etag       *string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default"}))
			}
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-None-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIndexPayload(orgID, view, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeIndexError returns an encoder for errors returned by the index
// IncidentAggregate endpoint.
func EncodeIndexError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalIncidentaggregateviewsOrgViewToOrgResponseBody builds a value of type
// *OrgResponseBody from a value of type *incidentaggregateviews.OrgView.
func marshalIncidentaggregateviewsOrgViewToOrgResponseBody(v *incidentaggregateviews.OrgView) *OrgResponseBody {
	if v == nil {
		return nil
	}
	res := &OrgResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink
// builds a value of type *PolicyAggregateResponseBodyLink from a value of type
// *incidentaggregateviews.PolicyAggregateView.
func marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink(v *incidentaggregateviews.PolicyAggregateView) *PolicyAggregateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PolicyAggregateResponseBodyLink{
		ID:                    *v.ID,
		Name:                  *v.Name,
		Href:                  *v.Href,
		IncidentAggregateHref: v.IncidentAggregateHref,
		CreatedAt:             v.CreatedAt,
		Kind:                  *v.Kind,
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = marshalIncidentaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(v.PublishedTemplate)
	}
	if v.CreatedBy != nil {
		res.CreatedBy = marshalIncidentaggregateviewsUserViewToUserResponseBody(v.CreatedBy)
	}

	return res
}

// marshalIncidentaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink
// builds a value of type *PublishedTemplateResponseBodyLink from a value of
// type *incidentaggregateviews.PublishedTemplateView.
func marshalIncidentaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(v *incidentaggregateviews.PublishedTemplateView) *PublishedTemplateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PublishedTemplateResponseBodyLink{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Fingerprint: *v.Fingerprint,
		UpdatedAt:   v.UpdatedAt,
		BuiltIn:     v.BuiltIn,
		Kind:        *v.Kind,
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = marshalIncidentaggregateviewsUserViewToUserResponseBody(v.UpdatedBy)
	}

	return res
}

// marshalIncidentaggregateviewsUserViewToUserResponseBody builds a value of
// type *UserResponseBody from a value of type *incidentaggregateviews.UserView.
func marshalIncidentaggregateviewsUserViewToUserResponseBody(v *incidentaggregateviews.UserView) *UserResponseBody {
	if v == nil {
		return nil
	}
	res := &UserResponseBody{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// marshalIncidentaggregateviewsIncidentSummaryViewToIncidentSummaryResponseBody
// builds a value of type *IncidentSummaryResponseBody from a value of type
// *incidentaggregateviews.IncidentSummaryView.
func marshalIncidentaggregateviewsIncidentSummaryViewToIncidentSummaryResponseBody(v *incidentaggregateviews.IncidentSummaryView) *IncidentSummaryResponseBody {
	if v == nil {
		return nil
	}
	res := &IncidentSummaryResponseBody{
		IncidentCount:      *v.IncidentCount,
		ViolationDataCount: *v.ViolationDataCount,
		ResolvedCount:      *v.ResolvedCount,
		TriggeredCount:     *v.TriggeredCount,
	}

	return res
}

// marshalIncidentaggregateviewsActionSummaryViewToActionSummaryResponseBody
// builds a value of type *ActionSummaryResponseBody from a value of type
// *incidentaggregateviews.ActionSummaryView.
func marshalIncidentaggregateviewsActionSummaryViewToActionSummaryResponseBody(v *incidentaggregateviews.ActionSummaryView) *ActionSummaryResponseBody {
	if v == nil {
		return nil
	}
	res := &ActionSummaryResponseBody{
		PendingCount: *v.PendingCount,
		FailedCount:  *v.FailedCount,
	}

	return res
}

// marshalIncidentaggregateviewsIncidentAggregateItemViewToIncidentAggregateItemResponseBody
// builds a value of type *IncidentAggregateItemResponseBody from a value of
// type *incidentaggregateviews.IncidentAggregateItemView.
func marshalIncidentaggregateviewsIncidentAggregateItemViewToIncidentAggregateItemResponseBody(v *incidentaggregateviews.IncidentAggregateItemView) *IncidentAggregateItemResponseBody {
	if v == nil {
		return nil
	}
	res := &IncidentAggregateItemResponseBody{
		ID:                 *v.ID,
		URL:                *v.URL,
		ViolationDataCount: v.ViolationDataCount,
		CreatedAt:          v.CreatedAt,
		UpdatedAt:          v.UpdatedAt,
		ResolvedAt:         v.ResolvedAt,
		ResolutionMessage:  v.ResolutionMessage,
		State:              v.State,
		ActionFailed:       v.ActionFailed,
		ActionPending:      v.ActionPending,
		Kind:               *v.Kind,
	}
	if v.Project != nil {
		res.Project = marshalIncidentaggregateviewsProjectViewToProjectResponseBody(v.Project)
	}
	if v.ResolvedBy != nil {
		res.ResolvedBy = marshalIncidentaggregateviewsUserViewToUserResponseBody(v.ResolvedBy)
	}

	return res
}

// marshalIncidentaggregateviewsProjectViewToProjectResponseBody builds a value
// of type *ProjectResponseBody from a value of type
// *incidentaggregateviews.ProjectView.
func marshalIncidentaggregateviewsProjectViewToProjectResponseBody(v *incidentaggregateviews.ProjectView) *ProjectResponseBody {
	if v == nil {
		return nil
	}
	res := &ProjectResponseBody{
		ID:      *v.ID,
		Name:    *v.Name,
		OrgID:   *v.OrgID,
		OrgName: *v.OrgName,
	}

	return res
}

// marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodySource
// builds a value of type *PolicyAggregateResponseBodySource from a value of
// type *incidentaggregateviews.PolicyAggregateView.
func marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodySource(v *incidentaggregateviews.PolicyAggregateView) *PolicyAggregateResponseBodySource {
	if v == nil {
		return nil
	}
	res := &PolicyAggregateResponseBodySource{
		ID:   *v.ID,
		Name: *v.Name,
		Href: *v.Href,
		Kind: *v.Kind,
	}
	if v.Org != nil {
		res.Org = marshalIncidentaggregateviewsOrgViewToOrgResponseBody(v.Org)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = marshalIncidentaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodySource(v.PublishedTemplate)
	}

	return res
}

// marshalIncidentaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodySource
// builds a value of type *PublishedTemplateResponseBodySource from a value of
// type *incidentaggregateviews.PublishedTemplateView.
func marshalIncidentaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodySource(v *incidentaggregateviews.PublishedTemplateView) *PublishedTemplateResponseBodySource {
	if v == nil {
		return nil
	}
	res := &PublishedTemplateResponseBodySource{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Filename:    v.Filename,
		Source:      v.Source,
		Fingerprint: *v.Fingerprint,
		Kind:        *v.Kind,
	}

	return res
}

// marshalIncidentaggregateviewsPolicyAggregateNonCatalogViewToPolicyAggregateNonCatalogResponseBodyLink
// builds a value of type *PolicyAggregateNonCatalogResponseBodyLink from a
// value of type *incidentaggregateviews.PolicyAggregateNonCatalogView.
func marshalIncidentaggregateviewsPolicyAggregateNonCatalogViewToPolicyAggregateNonCatalogResponseBodyLink(v *incidentaggregateviews.PolicyAggregateNonCatalogView) *PolicyAggregateNonCatalogResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PolicyAggregateNonCatalogResponseBodyLink{
		Href:                  *v.Href,
		IncidentAggregateHref: v.IncidentAggregateHref,
		Kind:                  *v.Kind,
	}

	return res
}

// marshalIncidentaggregateviewsIncidentAggregateNonCatalogItemViewToIncidentAggregateNonCatalogItemResponseBody
// builds a value of type *IncidentAggregateNonCatalogItemResponseBody from a
// value of type *incidentaggregateviews.IncidentAggregateNonCatalogItemView.
func marshalIncidentaggregateviewsIncidentAggregateNonCatalogItemViewToIncidentAggregateNonCatalogItemResponseBody(v *incidentaggregateviews.IncidentAggregateNonCatalogItemView) *IncidentAggregateNonCatalogItemResponseBody {
	if v == nil {
		return nil
	}
	res := &IncidentAggregateNonCatalogItemResponseBody{
		ID:                 *v.ID,
		URL:                *v.URL,
		ViolationDataCount: v.ViolationDataCount,
		CreatedAt:          v.CreatedAt,
		UpdatedAt:          v.UpdatedAt,
		ResolvedAt:         v.ResolvedAt,
		ResolutionMessage:  v.ResolutionMessage,
		State:              v.State,
		ActionFailed:       v.ActionFailed,
		ActionPending:      v.ActionPending,
		Severity:           v.Severity,
		Category:           v.Category,
		DryRun:             v.DryRun,
		Kind:               *v.Kind,
	}
	if v.Project != nil {
		res.Project = marshalIncidentaggregateviewsProjectViewToProjectResponseBody(v.Project)
	}
	if v.AppliedPolicy != nil {
		res.AppliedPolicy = marshalIncidentaggregateviewsAppliedPolicyViewToAppliedPolicyResponseBodyLink(v.AppliedPolicy)
	}
	if v.ResolvedBy != nil {
		res.ResolvedBy = marshalIncidentaggregateviewsUserViewToUserResponseBody(v.ResolvedBy)
	}

	return res
}

// marshalIncidentaggregateviewsAppliedPolicyViewToAppliedPolicyResponseBodyLink
// builds a value of type *AppliedPolicyResponseBodyLink from a value of type
// *incidentaggregateviews.AppliedPolicyView.
func marshalIncidentaggregateviewsAppliedPolicyViewToAppliedPolicyResponseBodyLink(v *incidentaggregateviews.AppliedPolicyView) *AppliedPolicyResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &AppliedPolicyResponseBodyLink{
		ID:                  *v.ID,
		PolicyAggregateID:   v.PolicyAggregateID,
		IncidentAggregateID: v.IncidentAggregateID,
		Name:                *v.Name,
		Href:                *v.Href,
		CreatedAt:           v.CreatedAt,
		Frequency:           v.Frequency,
		Kind:                *v.Kind,
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = marshalIncidentaggregateviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(v.PolicyTemplate)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = marshalIncidentaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(v.PublishedTemplate)
	}
	if v.CreatedBy != nil {
		res.CreatedBy = marshalIncidentaggregateviewsUserViewToUserResponseBody(v.CreatedBy)
	}

	return res
}

// marshalIncidentaggregateviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink
// builds a value of type *PolicyTemplateResponseBodyLink from a value of type
// *incidentaggregateviews.PolicyTemplateView.
func marshalIncidentaggregateviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(v *incidentaggregateviews.PolicyTemplateView) *PolicyTemplateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PolicyTemplateResponseBodyLink{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Fingerprint: *v.Fingerprint,
		UpdatedAt:   v.UpdatedAt,
		Kind:        *v.Kind,
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = marshalIncidentaggregateviewsUserViewToUserResponseBody(v.UpdatedBy)
	}

	return res
}

// marshalIncidentaggregateviewsIncidentAggregateViewToIncidentAggregateResponseBodyIndex
// builds a value of type *IncidentAggregateResponseBodyIndex from a value of
// type *incidentaggregateviews.IncidentAggregateView.
func marshalIncidentaggregateviewsIncidentAggregateViewToIncidentAggregateResponseBodyIndex(v *incidentaggregateviews.IncidentAggregateView) *IncidentAggregateResponseBodyIndex {
	if v == nil {
		return nil
	}
	res := &IncidentAggregateResponseBodyIndex{
		ID:          *v.ID,
		Href:        v.Href,
		Count:       v.Count,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		State:       v.State,
		Severity:    v.Severity,
		Category:    v.Category,
		DryRun:      v.DryRun,
		Kind:        *v.Kind,
		Etag:        *v.Etag,
		NotModified: v.NotModified,
	}
	if v.Org != nil {
		res.Org = marshalIncidentaggregateviewsOrgViewToOrgResponseBody(v.Org)
	}
	if v.PolicyAggregate != nil {
		res.PolicyAggregate = marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink(v.PolicyAggregate)
	}
	if v.IncidentSummary != nil {
		res.IncidentSummary = marshalIncidentaggregateviewsIncidentSummaryViewToIncidentSummaryResponseBody(v.IncidentSummary)
	}
	if v.ActionSummary != nil {
		res.ActionSummary = marshalIncidentaggregateviewsActionSummaryViewToActionSummaryResponseBody(v.ActionSummary)
	}

	return res
}
