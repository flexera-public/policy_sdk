// Code generated by goa v3.1.3, DO NOT EDIT.
//
// IncidentAggregate HTTP server types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	incidentaggregate "github.com/rightscale/policy_sdk/sdk/incident_aggregate"
	incidentaggregateviews "github.com/rightscale/policy_sdk/sdk/incident_aggregate/views"
	goa "goa.design/goa/v3/pkg"
)

// ShowOKResponseBodyIndex is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body.
type ShowOKResponseBodyIndex struct {
	// id is the ID of the incident_aggregate, must be unique in the org.
	ID string `form:"id" json:"id" xml:"id"`
	// Org represents a RightScale org and provides some information about the org.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the incident_aggregate.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_aggregate links to key attributes of the applied policy that
	// initiated the incident_aggregate.
	PolicyAggregate *PolicyAggregateResponseBodyLink `form:"policy_aggregate,omitempty" json:"policy_aggregate,omitempty" xml:"policy_aggregate,omitempty"`
	// created_at is the incident_aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident_aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The number of incidents across all projects.
	Count           *uint                        `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	IncidentSummary *IncidentSummaryResponseBody `form:"incident_summary,omitempty" json:"incident_summary,omitempty" xml:"incident_summary,omitempty"`
	ActionSummary   *ActionSummaryResponseBody   `form:"action_summary,omitempty" json:"action_summary,omitempty" xml:"action_summary,omitempty"`
	// state represents the current handling status of the incident_aggregate.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// severity defines the severity level of the incident_aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident_aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident_aggregate should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// kind is "gov#incident_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// ShowOKResponseBody is the type of the "IncidentAggregate" service "show"
// endpoint HTTP response body.
type ShowOKResponseBody struct {
	// id is the ID of the incident_aggregate, must be unique in the org.
	ID string `form:"id" json:"id" xml:"id"`
	// Org represents a RightScale org and provides some information about the org.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the incident_aggregate.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_aggregate links to key attributes of the applied policy that
	// initiated the incident_aggregate.
	PolicyAggregate *PolicyAggregateResponseBodyLink `form:"policy_aggregate,omitempty" json:"policy_aggregate,omitempty" xml:"policy_aggregate,omitempty"`
	// created_at is the incident_aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident_aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// state represents the current handling status of the incident_aggregate.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// The number of incidents across all projects.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// An array of the individual incidents and their statuses.
	Items           IncidentAggregateItemResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	IncidentSummary *IncidentSummaryResponseBody                `form:"incident_summary,omitempty" json:"incident_summary,omitempty" xml:"incident_summary,omitempty"`
	ActionSummary   *ActionSummaryResponseBody                  `form:"action_summary,omitempty" json:"action_summary,omitempty" xml:"action_summary,omitempty"`
	// severity defines the severity level of the incident_aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident_aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident_aggregate should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// kind is "gov#incident_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// ShowOKResponseBodySource is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body.
type ShowOKResponseBodySource struct {
	// id is the ID of the incident_aggregate, must be unique in the org.
	ID string `form:"id" json:"id" xml:"id"`
	// Org represents a RightScale org and provides some information about the org.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the incident_aggregate.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_aggregate links to key attributes of the applied policy that
	// initiated the incident_aggregate.
	PolicyAggregate *PolicyAggregateResponseBodySource `form:"policy_aggregate,omitempty" json:"policy_aggregate,omitempty" xml:"policy_aggregate,omitempty"`
	// kind is "gov#incident_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// ShowNonCatalogOKResponseBodyIndex is the type of the "IncidentAggregate"
// service "show_non_catalog" endpoint HTTP response body.
type ShowNonCatalogOKResponseBodyIndex struct {
	// href is the href of the incident_aggregate.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_aggregate links to key attributes of the policy aggregate that
	// initiated the incident_aggregate.
	PolicyAggregate *PolicyAggregateNonCatalogResponseBodyLink `form:"policy_aggregate,omitempty" json:"policy_aggregate,omitempty" xml:"policy_aggregate,omitempty"`
	// updated_at is the incident_aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The number of incidents across all projects.
	Count           *uint                        `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	IncidentSummary *IncidentSummaryResponseBody `form:"incident_summary,omitempty" json:"incident_summary,omitempty" xml:"incident_summary,omitempty"`
	ActionSummary   *ActionSummaryResponseBody   `form:"action_summary,omitempty" json:"action_summary,omitempty" xml:"action_summary,omitempty"`
	// kind is "gov#incident_aggregate_non_catalog".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// ShowNonCatalogOKResponseBody is the type of the "IncidentAggregate" service
// "show_non_catalog" endpoint HTTP response body.
type ShowNonCatalogOKResponseBody struct {
	// href is the href of the incident_aggregate.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_aggregate links to key attributes of the policy aggregate that
	// initiated the incident_aggregate.
	PolicyAggregate *PolicyAggregateNonCatalogResponseBodyLink `form:"policy_aggregate,omitempty" json:"policy_aggregate,omitempty" xml:"policy_aggregate,omitempty"`
	// updated_at is the incident_aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The number of incidents across all projects.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// An array of the individual incidents and their statuses.
	Items           IncidentAggregateNonCatalogItemResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	IncidentSummary *IncidentSummaryResponseBody                          `form:"incident_summary,omitempty" json:"incident_summary,omitempty" xml:"incident_summary,omitempty"`
	ActionSummary   *ActionSummaryResponseBody                            `form:"action_summary,omitempty" json:"action_summary,omitempty" xml:"action_summary,omitempty"`
	// kind is "gov#incident_aggregate_non_catalog".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// IndexOKResponseBody is the type of the "IncidentAggregate" service "index"
// endpoint HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of incident aggregates in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of incident aggregates.
	Items IncidentAggregateResponseBodyIndexCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#incident_aggregate_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowNotFoundResponseBody is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "IncidentAggregate" service
// "show" endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogUnauthorizedResponseBody is the type of the
// "IncidentAggregate" service "show_non_catalog" endpoint HTTP response body
// for the "unauthorized" error.
type ShowNonCatalogUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogForbiddenResponseBody is the type of the "IncidentAggregate"
// service "show_non_catalog" endpoint HTTP response body for the "forbidden"
// error.
type ShowNonCatalogForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogBadRequestResponseBody is the type of the "IncidentAggregate"
// service "show_non_catalog" endpoint HTTP response body for the "bad_request"
// error.
type ShowNonCatalogBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogBadGatewayResponseBody is the type of the "IncidentAggregate"
// service "show_non_catalog" endpoint HTTP response body for the "bad_gateway"
// error.
type ShowNonCatalogBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogInternalErrorResponseBody is the type of the
// "IncidentAggregate" service "show_non_catalog" endpoint HTTP response body
// for the "internal_error" error.
type ShowNonCatalogInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexUnauthorizedResponseBody is the type of the "IncidentAggregate" service
// "index" endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexForbiddenResponseBody is the type of the "IncidentAggregate" service
// "index" endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadRequestResponseBody is the type of the "IncidentAggregate" service
// "index" endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadGatewayResponseBody is the type of the "IncidentAggregate" service
// "index" endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexInternalErrorResponseBody is the type of the "IncidentAggregate"
// service "index" endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OrgResponseBody is used to define fields on response body types.
type OrgResponseBody struct {
	// id is the Org ID
	ID uint `form:"id" json:"id" xml:"id"`
	// name is the organization name
	Name string `form:"name" json:"name" xml:"name"`
}

// PolicyAggregateResponseBodyLink is used to define fields on response body
// types.
type PolicyAggregateResponseBodyLink struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PublishedTemplateResponseBodyLink is used to define fields on response body
// types.
type PublishedTemplateResponseBodyLink struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool `form:"built_in,omitempty" json:"built_in,omitempty" xml:"built_in,omitempty"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID uint `form:"id" json:"id" xml:"id"`
	// email of user
	Email string `form:"email" json:"email" xml:"email"`
	// name of user, usually of the form 'First Last'
	Name string `form:"name" json:"name" xml:"name"`
}

// IncidentSummaryResponseBody is used to define fields on response body types.
type IncidentSummaryResponseBody struct {
	// The number of incidents across all projects.
	IncidentCount uint `form:"incident_count" json:"incident_count" xml:"incident_count"`
	// The number of items in violation data across all incidents.
	ViolationDataCount uint `form:"violation_data_count" json:"violation_data_count" xml:"violation_data_count"`
	// The number of incidents in a resolved state across all projects.
	ResolvedCount uint `form:"resolved_count" json:"resolved_count" xml:"resolved_count"`
	// The number of incidents in a triggered state across all projects.
	TriggeredCount uint `form:"triggered_count" json:"triggered_count" xml:"triggered_count"`
}

// ActionSummaryResponseBody is used to define fields on response body types.
type ActionSummaryResponseBody struct {
	// The number of incidents with pending approvals.
	PendingCount uint `form:"pending_count" json:"pending_count" xml:"pending_count"`
	// The number of failed escalations.
	FailedCount uint `form:"failed_count" json:"failed_count" xml:"failed_count"`
}

// IncidentAggregateItemResponseBodyCollection is used to define fields on
// response body types.
type IncidentAggregateItemResponseBodyCollection []*IncidentAggregateItemResponseBody

// IncidentAggregateItemResponseBody is used to define fields on response body
// types.
type IncidentAggregateItemResponseBody struct {
	// id is the ID of the incident, must be unique in the project.
	ID string `form:"id" json:"id" xml:"id"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// url of the incident.
	URL string `form:"url" json:"url" xml:"url"`
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string `form:"resolved_at,omitempty" json:"resolved_at,omitempty" xml:"resolved_at,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	ResolvedBy *UserResponseBody `form:"resolved_by,omitempty" json:"resolved_by,omitempty" xml:"resolved_by,omitempty"`
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string `form:"resolution_message,omitempty" json:"resolution_message,omitempty" xml:"resolution_message,omitempty"`
	// state represents the current handling status of the incident.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// The number of items in violation data.
	ViolationDataCount *uint `form:"violation_data_count,omitempty" json:"violation_data_count,omitempty" xml:"violation_data_count,omitempty"`
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool `form:"action_failed,omitempty" json:"action_failed,omitempty" xml:"action_failed,omitempty"`
	// action_pending indicates whether any of the incident has any pending actions
	// such as approval requests.
	ActionPending *bool `form:"action_pending,omitempty" json:"action_pending,omitempty" xml:"action_pending,omitempty"`
	// kind is "gov#incident_aggregate_item".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// id is the Project ID
	ID uint `form:"id" json:"id" xml:"id"`
	// name is the Project Name
	Name string `form:"name" json:"name" xml:"name"`
	// org_id is the RightScale Organization ID
	OrgID uint `form:"org_id" json:"org_id" xml:"org_id"`
	// org_name is the RightScale Organization Name
	OrgName string `form:"org_name" json:"org_name" xml:"org_name"`
}

// PolicyAggregateResponseBodySource is used to define fields on response body
// types.
type PolicyAggregateResponseBodySource struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Org represents a RightScale org and provides some information about the org.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodySource `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PublishedTemplateResponseBodySource is used to define fields on response
// body types.
type PublishedTemplateResponseBodySource struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is published template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyAggregateNonCatalogResponseBodyLink is used to define fields on
// response body types.
type PolicyAggregateNonCatalogResponseBodyLink struct {
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// kind is "gov#policy_aggregate_non_catalog".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IncidentAggregateNonCatalogItemResponseBodyCollection is used to define
// fields on response body types.
type IncidentAggregateNonCatalogItemResponseBodyCollection []*IncidentAggregateNonCatalogItemResponseBody

// IncidentAggregateNonCatalogItemResponseBody is used to define fields on
// response body types.
type IncidentAggregateNonCatalogItemResponseBody struct {
	// id is the ID of the incident, must be unique in the project.
	ID string `form:"id" json:"id" xml:"id"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// url of the incident.
	URL string `form:"url" json:"url" xml:"url"`
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyResponseBodyLink `form:"applied_policy,omitempty" json:"applied_policy,omitempty" xml:"applied_policy,omitempty"`
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string `form:"resolved_at,omitempty" json:"resolved_at,omitempty" xml:"resolved_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	ResolvedBy *UserResponseBody `form:"resolved_by,omitempty" json:"resolved_by,omitempty" xml:"resolved_by,omitempty"`
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string `form:"resolution_message,omitempty" json:"resolution_message,omitempty" xml:"resolution_message,omitempty"`
	// state represents the current handling status of the incident.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// The number of items in violation data.
	ViolationDataCount *uint `form:"violation_data_count,omitempty" json:"violation_data_count,omitempty" xml:"violation_data_count,omitempty"`
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool `form:"action_failed,omitempty" json:"action_failed,omitempty" xml:"action_failed,omitempty"`
	// action_pending indicates whether any of the incident has any pending actions
	// such as approval requests.
	ActionPending *bool `form:"action_pending,omitempty" json:"action_pending,omitempty" xml:"action_pending,omitempty"`
	// severity defines the severity level of the incident_aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident_aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident_aggregate should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// kind is "gov#incident_aggregate_non_catalog_item".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// AppliedPolicyResponseBodyLink is used to define fields on response body
// types.
type AppliedPolicyResponseBodyLink struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyTemplateResponseBodyLink is used to define fields on response body
// types.
type PolicyTemplateResponseBodyLink struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IncidentAggregateResponseBodyIndexCollection is used to define fields on
// response body types.
type IncidentAggregateResponseBodyIndexCollection []*IncidentAggregateResponseBodyIndex

// IncidentAggregateResponseBodyIndex is used to define fields on response body
// types.
type IncidentAggregateResponseBodyIndex struct {
	// id is the ID of the incident_aggregate, must be unique in the org.
	ID string `form:"id" json:"id" xml:"id"`
	// Org represents a RightScale org and provides some information about the org.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the incident_aggregate.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_aggregate links to key attributes of the applied policy that
	// initiated the incident_aggregate.
	PolicyAggregate *PolicyAggregateResponseBodyLink `form:"policy_aggregate,omitempty" json:"policy_aggregate,omitempty" xml:"policy_aggregate,omitempty"`
	// created_at is the incident_aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident_aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The number of incidents across all projects.
	Count           *uint                        `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	IncidentSummary *IncidentSummaryResponseBody `form:"incident_summary,omitempty" json:"incident_summary,omitempty" xml:"incident_summary,omitempty"`
	ActionSummary   *ActionSummaryResponseBody   `form:"action_summary,omitempty" json:"action_summary,omitempty" xml:"action_summary,omitempty"`
	// state represents the current handling status of the incident_aggregate.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// severity defines the severity level of the incident_aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident_aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident_aggregate should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// kind is "gov#incident_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// etag is an HTTP ETag for the incident_aggregate.
	Etag string `form:"etag" json:"etag" xml:"etag"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// NewShowOKResponseBodyIndex builds the HTTP response body from the result of
// the "show" endpoint of the "IncidentAggregate" service.
func NewShowOKResponseBodyIndex(res *incidentaggregateviews.IncidentAggregateView) *ShowOKResponseBodyIndex {
	body := &ShowOKResponseBodyIndex{
		ID:          *res.ID,
		Href:        res.Href,
		Count:       res.Count,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		State:       res.State,
		Severity:    res.Severity,
		Category:    res.Category,
		DryRun:      res.DryRun,
		Kind:        *res.Kind,
		NotModified: res.NotModified,
	}
	if res.Org != nil {
		body.Org = marshalIncidentaggregateviewsOrgViewToOrgResponseBody(res.Org)
	}
	if res.PolicyAggregate != nil {
		body.PolicyAggregate = marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink(res.PolicyAggregate)
	}
	if res.IncidentSummary != nil {
		body.IncidentSummary = marshalIncidentaggregateviewsIncidentSummaryViewToIncidentSummaryResponseBody(res.IncidentSummary)
	}
	if res.ActionSummary != nil {
		body.ActionSummary = marshalIncidentaggregateviewsActionSummaryViewToActionSummaryResponseBody(res.ActionSummary)
	}
	return body
}

// NewShowOKResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "IncidentAggregate" service.
func NewShowOKResponseBody(res *incidentaggregateviews.IncidentAggregateView) *ShowOKResponseBody {
	body := &ShowOKResponseBody{
		ID:          *res.ID,
		Href:        res.Href,
		Count:       res.Count,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		State:       res.State,
		Severity:    res.Severity,
		Category:    res.Category,
		DryRun:      res.DryRun,
		Kind:        *res.Kind,
		NotModified: res.NotModified,
	}
	if res.Org != nil {
		body.Org = marshalIncidentaggregateviewsOrgViewToOrgResponseBody(res.Org)
	}
	if res.PolicyAggregate != nil {
		body.PolicyAggregate = marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink(res.PolicyAggregate)
	}
	if res.IncidentSummary != nil {
		body.IncidentSummary = marshalIncidentaggregateviewsIncidentSummaryViewToIncidentSummaryResponseBody(res.IncidentSummary)
	}
	if res.ActionSummary != nil {
		body.ActionSummary = marshalIncidentaggregateviewsActionSummaryViewToActionSummaryResponseBody(res.ActionSummary)
	}
	if res.Items != nil {
		body.Items = make([]*IncidentAggregateItemResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalIncidentaggregateviewsIncidentAggregateItemViewToIncidentAggregateItemResponseBody(val)
		}
	}
	return body
}

// NewShowOKResponseBodySource builds the HTTP response body from the result of
// the "show" endpoint of the "IncidentAggregate" service.
func NewShowOKResponseBodySource(res *incidentaggregateviews.IncidentAggregateView) *ShowOKResponseBodySource {
	body := &ShowOKResponseBodySource{
		ID:          *res.ID,
		Href:        res.Href,
		Kind:        *res.Kind,
		NotModified: res.NotModified,
	}
	if res.Org != nil {
		body.Org = marshalIncidentaggregateviewsOrgViewToOrgResponseBody(res.Org)
	}
	if res.PolicyAggregate != nil {
		body.PolicyAggregate = marshalIncidentaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodySource(res.PolicyAggregate)
	}
	return body
}

// NewShowNonCatalogOKResponseBodyIndex builds the HTTP response body from the
// result of the "show_non_catalog" endpoint of the "IncidentAggregate" service.
func NewShowNonCatalogOKResponseBodyIndex(res *incidentaggregateviews.IncidentAggregateNonCatalogView) *ShowNonCatalogOKResponseBodyIndex {
	body := &ShowNonCatalogOKResponseBodyIndex{
		Href:        res.Href,
		Count:       res.Count,
		UpdatedAt:   res.UpdatedAt,
		Kind:        *res.Kind,
		NotModified: res.NotModified,
	}
	if res.PolicyAggregate != nil {
		body.PolicyAggregate = marshalIncidentaggregateviewsPolicyAggregateNonCatalogViewToPolicyAggregateNonCatalogResponseBodyLink(res.PolicyAggregate)
	}
	if res.IncidentSummary != nil {
		body.IncidentSummary = marshalIncidentaggregateviewsIncidentSummaryViewToIncidentSummaryResponseBody(res.IncidentSummary)
	}
	if res.ActionSummary != nil {
		body.ActionSummary = marshalIncidentaggregateviewsActionSummaryViewToActionSummaryResponseBody(res.ActionSummary)
	}
	return body
}

// NewShowNonCatalogOKResponseBody builds the HTTP response body from the
// result of the "show_non_catalog" endpoint of the "IncidentAggregate" service.
func NewShowNonCatalogOKResponseBody(res *incidentaggregateviews.IncidentAggregateNonCatalogView) *ShowNonCatalogOKResponseBody {
	body := &ShowNonCatalogOKResponseBody{
		Href:        res.Href,
		Count:       res.Count,
		UpdatedAt:   res.UpdatedAt,
		Kind:        *res.Kind,
		NotModified: res.NotModified,
	}
	if res.PolicyAggregate != nil {
		body.PolicyAggregate = marshalIncidentaggregateviewsPolicyAggregateNonCatalogViewToPolicyAggregateNonCatalogResponseBodyLink(res.PolicyAggregate)
	}
	if res.IncidentSummary != nil {
		body.IncidentSummary = marshalIncidentaggregateviewsIncidentSummaryViewToIncidentSummaryResponseBody(res.IncidentSummary)
	}
	if res.ActionSummary != nil {
		body.ActionSummary = marshalIncidentaggregateviewsActionSummaryViewToActionSummaryResponseBody(res.ActionSummary)
	}
	if res.Items != nil {
		body.Items = make([]*IncidentAggregateNonCatalogItemResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalIncidentaggregateviewsIncidentAggregateNonCatalogItemViewToIncidentAggregateNonCatalogItemResponseBody(val)
		}
	}
	return body
}

// NewIndexOKResponseBody builds the HTTP response body from the result of the
// "index" endpoint of the "IncidentAggregate" service.
func NewIndexOKResponseBody(res *incidentaggregateviews.IncidentAggregateListView) *IndexOKResponseBody {
	body := &IndexOKResponseBody{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*IncidentAggregateResponseBodyIndex, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalIncidentaggregateviewsIncidentAggregateViewToIncidentAggregateResponseBodyIndex(val)
		}
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "IncidentAggregate" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "IncidentAggregate" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "IncidentAggregate" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "IncidentAggregate" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "IncidentAggregate" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "IncidentAggregate" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogUnauthorizedResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "IncidentAggregate"
// service.
func NewShowNonCatalogUnauthorizedResponseBody(res *goa.ServiceError) *ShowNonCatalogUnauthorizedResponseBody {
	body := &ShowNonCatalogUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogForbiddenResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "IncidentAggregate"
// service.
func NewShowNonCatalogForbiddenResponseBody(res *goa.ServiceError) *ShowNonCatalogForbiddenResponseBody {
	body := &ShowNonCatalogForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogBadRequestResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "IncidentAggregate"
// service.
func NewShowNonCatalogBadRequestResponseBody(res *goa.ServiceError) *ShowNonCatalogBadRequestResponseBody {
	body := &ShowNonCatalogBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogBadGatewayResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "IncidentAggregate"
// service.
func NewShowNonCatalogBadGatewayResponseBody(res *goa.ServiceError) *ShowNonCatalogBadGatewayResponseBody {
	body := &ShowNonCatalogBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogInternalErrorResponseBody builds the HTTP response body
// from the result of the "show_non_catalog" endpoint of the
// "IncidentAggregate" service.
func NewShowNonCatalogInternalErrorResponseBody(res *goa.ServiceError) *ShowNonCatalogInternalErrorResponseBody {
	body := &ShowNonCatalogInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexUnauthorizedResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "IncidentAggregate" service.
func NewIndexUnauthorizedResponseBody(res *goa.ServiceError) *IndexUnauthorizedResponseBody {
	body := &IndexUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexForbiddenResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "IncidentAggregate" service.
func NewIndexForbiddenResponseBody(res *goa.ServiceError) *IndexForbiddenResponseBody {
	body := &IndexForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadRequestResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "IncidentAggregate" service.
func NewIndexBadRequestResponseBody(res *goa.ServiceError) *IndexBadRequestResponseBody {
	body := &IndexBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadGatewayResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "IncidentAggregate" service.
func NewIndexBadGatewayResponseBody(res *goa.ServiceError) *IndexBadGatewayResponseBody {
	body := &IndexBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexInternalErrorResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "IncidentAggregate" service.
func NewIndexInternalErrorResponseBody(res *goa.ServiceError) *IndexInternalErrorResponseBody {
	body := &IndexInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowPayload builds a IncidentAggregate service show endpoint payload.
func NewShowPayload(orgID uint, incidentAggregateID string, view *string, apiVersion string, etag *string, token *string) *incidentaggregate.ShowPayload {
	v := &incidentaggregate.ShowPayload{}
	v.OrgID = orgID
	v.IncidentAggregateID = incidentAggregateID
	v.View = view
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewShowNonCatalogPayload builds a IncidentAggregate service show_non_catalog
// endpoint payload.
func NewShowNonCatalogPayload(orgID uint, view *string, apiVersion string, etag *string, token *string) *incidentaggregate.ShowNonCatalogPayload {
	v := &incidentaggregate.ShowNonCatalogPayload{}
	v.OrgID = orgID
	v.View = view
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewIndexPayload builds a IncidentAggregate service index endpoint payload.
func NewIndexPayload(orgID uint, view *string, apiVersion string, etag *string, token *string) *incidentaggregate.IndexPayload {
	v := &incidentaggregate.IndexPayload{}
	v.OrgID = orgID
	v.View = view
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}
