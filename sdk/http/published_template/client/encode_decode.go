// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PublishedTemplate HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	publishedtemplate "github.com/flexera-public/policy_sdk/sdk/published_template"
	publishedtemplateviews "github.com/flexera-public/policy_sdk/sdk/published_template/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "PublishedTemplate" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID uint
	)
	{
		p, ok := v.(*publishedtemplate.CreatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PublishedTemplate", "create", "*publishedtemplate.CreatePayload", v)
		}
		orgID = p.OrgID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePublishedTemplatePath(orgID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PublishedTemplate", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the
// PublishedTemplate create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publishedtemplate.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("PublishedTemplate", "create", "*publishedtemplate.CreatePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("PublishedTemplate", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// PublishedTemplate create endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "conflict" (type *publishedtemplate.ConflictError): http.StatusConflict
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			res := NewCreateResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body CreateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			return nil, NewCreateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			return nil, NewCreateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			return nil, NewCreateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body CreateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			return nil, NewCreateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			return nil, NewCreateInternalError(&body)
		case http.StatusConflict:
			var (
				body CreateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "create", err)
			}
			err = ValidateCreateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			var (
				location string
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Location", "header"))
			}
			location = locationRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "create", err)
			}
			return nil, NewCreateConflict(&body, location)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PublishedTemplate", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "PublishedTemplate" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID      uint
		templateID string
	)
	{
		p, ok := v.(*publishedtemplate.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PublishedTemplate", "update", "*publishedtemplate.UpdatePayload", v)
		}
		orgID = p.OrgID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdatePublishedTemplatePath(orgID, templateID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PublishedTemplate", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the
// PublishedTemplate update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publishedtemplate.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("PublishedTemplate", "update", "*publishedtemplate.UpdatePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("PublishedTemplate", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// PublishedTemplate update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body UpdateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "update", err)
			}
			err = ValidateUpdateBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "update", err)
			}
			return nil, NewUpdateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "update", err)
			}
			err = ValidateUpdateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "update", err)
			}
			return nil, NewUpdateInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PublishedTemplate", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildHideRequest instantiates a HTTP request object with method and path set
// to call the "PublishedTemplate" service "hide" endpoint
func (c *Client) BuildHideRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID      uint
		templateID string
	)
	{
		p, ok := v.(*publishedtemplate.HidePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PublishedTemplate", "hide", "*publishedtemplate.HidePayload", v)
		}
		orgID = p.OrgID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HidePublishedTemplatePath(orgID, templateID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PublishedTemplate", "hide", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeHideRequest returns an encoder for requests sent to the
// PublishedTemplate hide server.
func EncodeHideRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publishedtemplate.HidePayload)
		if !ok {
			return goahttp.ErrInvalidType("PublishedTemplate", "hide", "*publishedtemplate.HidePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeHideResponse returns a decoder for responses returned by the
// PublishedTemplate hide endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeHideResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeHideResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body HideNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "hide", err)
			}
			err = ValidateHideNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "hide", err)
			}
			return nil, NewHideNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body HideUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "hide", err)
			}
			err = ValidateHideUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "hide", err)
			}
			return nil, NewHideUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body HideForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "hide", err)
			}
			err = ValidateHideForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "hide", err)
			}
			return nil, NewHideForbidden(&body)
		case http.StatusBadRequest:
			var (
				body HideBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "hide", err)
			}
			err = ValidateHideBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "hide", err)
			}
			return nil, NewHideBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body HideBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "hide", err)
			}
			err = ValidateHideBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "hide", err)
			}
			return nil, NewHideBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body HideInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "hide", err)
			}
			err = ValidateHideInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "hide", err)
			}
			return nil, NewHideInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PublishedTemplate", "hide", resp.StatusCode, string(body))
		}
	}
}

// BuildUnhideRequest instantiates a HTTP request object with method and path
// set to call the "PublishedTemplate" service "unhide" endpoint
func (c *Client) BuildUnhideRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID      uint
		templateID string
	)
	{
		p, ok := v.(*publishedtemplate.UnhidePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PublishedTemplate", "unhide", "*publishedtemplate.UnhidePayload", v)
		}
		orgID = p.OrgID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnhidePublishedTemplatePath(orgID, templateID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PublishedTemplate", "unhide", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnhideRequest returns an encoder for requests sent to the
// PublishedTemplate unhide server.
func EncodeUnhideRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publishedtemplate.UnhidePayload)
		if !ok {
			return goahttp.ErrInvalidType("PublishedTemplate", "unhide", "*publishedtemplate.UnhidePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeUnhideResponse returns a decoder for responses returned by the
// PublishedTemplate unhide endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUnhideResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeUnhideResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UnhideNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "unhide", err)
			}
			err = ValidateUnhideNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "unhide", err)
			}
			return nil, NewUnhideNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UnhideUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "unhide", err)
			}
			err = ValidateUnhideUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "unhide", err)
			}
			return nil, NewUnhideUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UnhideForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "unhide", err)
			}
			err = ValidateUnhideForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "unhide", err)
			}
			return nil, NewUnhideForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UnhideBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "unhide", err)
			}
			err = ValidateUnhideBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "unhide", err)
			}
			return nil, NewUnhideBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body UnhideBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "unhide", err)
			}
			err = ValidateUnhideBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "unhide", err)
			}
			return nil, NewUnhideBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body UnhideInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "unhide", err)
			}
			err = ValidateUnhideInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "unhide", err)
			}
			return nil, NewUnhideInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PublishedTemplate", "unhide", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "PublishedTemplate" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID      uint
		templateID string
	)
	{
		p, ok := v.(*publishedtemplate.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PublishedTemplate", "delete", "*publishedtemplate.DeletePayload", v)
		}
		orgID = p.OrgID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeletePublishedTemplatePath(orgID, templateID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PublishedTemplate", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the
// PublishedTemplate delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publishedtemplate.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("PublishedTemplate", "delete", "*publishedtemplate.DeletePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// PublishedTemplate delete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body DeleteBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "delete", err)
			}
			err = ValidateDeleteBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "delete", err)
			}
			return nil, NewDeleteBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "delete", err)
			}
			err = ValidateDeleteInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "delete", err)
			}
			return nil, NewDeleteInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PublishedTemplate", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "PublishedTemplate" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID      uint
		templateID string
	)
	{
		p, ok := v.(*publishedtemplate.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PublishedTemplate", "show", "*publishedtemplate.ShowPayload", v)
		}
		orgID = p.OrgID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowPublishedTemplatePath(orgID, templateID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PublishedTemplate", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the
// PublishedTemplate show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publishedtemplate.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("PublishedTemplate", "show", "*publishedtemplate.ShowPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// PublishedTemplate show endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "show", err)
			}
			p := NewShowPublishedTemplateOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &publishedtemplateviews.PublishedTemplate{Projected: p, View: view}
			if err = publishedtemplateviews.ValidatePublishedTemplate(vres); err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "show", err)
			}
			res := publishedtemplate.NewPublishedTemplate(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "show", err)
			}
			err = ValidateShowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "show", err)
			}
			err = ValidateShowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "show", err)
			}
			err = ValidateShowBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PublishedTemplate", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "PublishedTemplate" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orgID uint
	)
	{
		p, ok := v.(*publishedtemplate.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PublishedTemplate", "index", "*publishedtemplate.IndexPayload", v)
		}
		orgID = p.OrgID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexPublishedTemplatePath(orgID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PublishedTemplate", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the
// PublishedTemplate index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publishedtemplate.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("PublishedTemplate", "index", "*publishedtemplate.IndexPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		if p.ShowHidden != nil {
			values.Add("show_hidden", fmt.Sprintf("%v", *p.ShowHidden))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// PublishedTemplate index endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			p := NewIndexPublishedTemplateListNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &publishedtemplateviews.PublishedTemplateList{Projected: p, View: view}
			res := publishedtemplate.NewPublishedTemplateList(vres)
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "index", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			p := NewIndexPublishedTemplateListOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &publishedtemplateviews.PublishedTemplateList{Projected: p, View: view}
			if err = publishedtemplateviews.ValidatePublishedTemplateList(vres); err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			res := publishedtemplate.NewPublishedTemplateList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "index", err)
			}
			err = ValidateIndexUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "index", err)
			}
			err = ValidateIndexForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PublishedTemplate", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("PublishedTemplate", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PublishedTemplate", "index", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseBodyToPublishedtemplateviewsUserView builds a value of
// type *publishedtemplateviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToPublishedtemplateviewsUserView(v *UserResponseBody) *publishedtemplateviews.UserView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalPermissionResponseBodyToPublishedtemplateviewsPermissionView builds
// a value of type *publishedtemplateviews.PermissionView from a value of type
// *PermissionResponseBody.
func unmarshalPermissionResponseBodyToPublishedtemplateviewsPermissionView(v *PermissionResponseBody) *publishedtemplateviews.PermissionView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.PermissionView{
		Name:  v.Name,
		Label: v.Label,
	}
	res.Resources = make([]string, len(v.Resources))
	for i, val := range v.Resources {
		res.Resources[i] = val
	}
	res.Actions = make([]string, len(v.Actions))
	for i, val := range v.Actions {
		res.Actions[i] = val
	}

	return res
}

// unmarshalParameterResponseBodyToPublishedtemplateviewsParameterView builds a
// value of type *publishedtemplateviews.ParameterView from a value of type
// *ParameterResponseBody.
func unmarshalParameterResponseBodyToPublishedtemplateviewsParameterView(v *ParameterResponseBody) *publishedtemplateviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.ParameterView{
		Name:                  v.Name,
		Type:                  v.Type,
		Label:                 v.Label,
		Index:                 v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = unmarshalRegexpResponseBodyToPublishedtemplateviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// unmarshalRegexpResponseBodyToPublishedtemplateviewsRegexpView builds a value
// of type *publishedtemplateviews.RegexpView from a value of type
// *RegexpResponseBody.
func unmarshalRegexpResponseBodyToPublishedtemplateviewsRegexpView(v *RegexpResponseBody) *publishedtemplateviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.RegexpView{
		Pattern: v.Pattern,
		Options: v.Options,
	}

	return res
}

// unmarshalCredentialsResponseBodyToPublishedtemplateviewsCredentialsView
// builds a value of type *publishedtemplateviews.CredentialsView from a value
// of type *CredentialsResponseBody.
func unmarshalCredentialsResponseBodyToPublishedtemplateviewsCredentialsView(v *CredentialsResponseBody) *publishedtemplateviews.CredentialsView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.CredentialsView{
		Name:        v.Name,
		Label:       v.Label,
		Description: v.Description,
	}
	res.Schemes = make([]string, len(v.Schemes))
	for i, val := range v.Schemes {
		res.Schemes[i] = val
	}
	if v.Tags != nil {
		res.Tags = make([]*publishedtemplateviews.CredentialsTagView, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = unmarshalCredentialsTagResponseBodyToPublishedtemplateviewsCredentialsTagView(val)
		}
	}

	return res
}

// unmarshalCredentialsTagResponseBodyToPublishedtemplateviewsCredentialsTagView
// builds a value of type *publishedtemplateviews.CredentialsTagView from a
// value of type *CredentialsTagResponseBody.
func unmarshalCredentialsTagResponseBodyToPublishedtemplateviewsCredentialsTagView(v *CredentialsTagResponseBody) *publishedtemplateviews.CredentialsTagView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.CredentialsTagView{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// unmarshalPublishedTemplateResponseBodyToPublishedtemplateviewsPublishedTemplateView
// builds a value of type *publishedtemplateviews.PublishedTemplateView from a
// value of type *PublishedTemplateResponseBody.
func unmarshalPublishedTemplateResponseBodyToPublishedtemplateviewsPublishedTemplateView(v *PublishedTemplateResponseBody) *publishedtemplateviews.PublishedTemplateView {
	if v == nil {
		return nil
	}
	res := &publishedtemplateviews.PublishedTemplateView{
		ID:                        v.ID,
		Name:                      v.Name,
		OrgID:                     v.OrgID,
		ProjectID:                 v.ProjectID,
		PolicyTemplateID:          v.PolicyTemplateID,
		PolicyTemplateURL:         v.PolicyTemplateURL,
		PolicyTemplateFingerprint: v.PolicyTemplateFingerprint,
		RsPtVer:                   v.RsPtVer,
		ShortDescription:          v.ShortDescription,
		LongDescription:           v.LongDescription,
		DocLink:                   v.DocLink,
		DefaultFrequency:          v.DefaultFrequency,
		Href:                      v.Href,
		Filename:                  v.Filename,
		Source:                    v.Source,
		Fingerprint:               v.Fingerprint,
		Category:                  v.Category,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
		Severity:                  v.Severity,
		BuiltIn:                   v.BuiltIn,
		Hidden:                    v.Hidden,
		HiddenAt:                  v.HiddenAt,
		Tenancy:                   v.Tenancy,
		Kind:                      v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToPublishedtemplateviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToPublishedtemplateviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*publishedtemplateviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = unmarshalPermissionResponseBodyToPublishedtemplateviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*publishedtemplateviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToPublishedtemplateviewsParameterView(val)
		}
	}
	if v.HiddenBy != nil {
		res.HiddenBy = unmarshalUserResponseBodyToPublishedtemplateviewsUserView(v.HiddenBy)
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*publishedtemplateviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = unmarshalCredentialsResponseBodyToPublishedtemplateviewsCredentialsView(val)
		}
	}

	return res
}
