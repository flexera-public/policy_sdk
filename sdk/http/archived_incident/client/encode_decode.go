// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ArchivedIncident HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	archivedincident "github.com/rightscale/policy_sdk/sdk/archived_incident"
	archivedincidentviews "github.com/rightscale/policy_sdk/sdk/archived_incident/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "ArchivedIncident" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		incidentID string
	)
	{
		p, ok := v.(*archivedincident.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ArchivedIncident", "show", "*archivedincident.ShowPayload", v)
		}
		projectID = p.ProjectID
		incidentID = p.IncidentID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowArchivedIncidentPath(projectID, incidentID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ArchivedIncident", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the
// ArchivedIncident show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*archivedincident.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("ArchivedIncident", "show", "*archivedincident.ShowPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// ArchivedIncident show endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			p := NewShowArchivedIncidentNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &archivedincidentviews.ArchivedIncident{Projected: p, View: view}
			res := archivedincident.NewArchivedIncident(vres)
			return res, nil
		case http.StatusOK:
			var (
				body ShowOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "show", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			p := NewShowArchivedIncidentOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &archivedincidentviews.ArchivedIncident{Projected: p, View: view}
			if err = archivedincidentviews.ValidateArchivedIncident(vres); err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			res := archivedincident.NewArchivedIncident(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "show", err)
			}
			err = ValidateShowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "show", err)
			}
			err = ValidateShowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "show", err)
			}
			err = ValidateShowBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ArchivedIncident", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "ArchivedIncident" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*archivedincident.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ArchivedIncident", "index", "*archivedincident.IndexPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexArchivedIncidentPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ArchivedIncident", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the
// ArchivedIncident index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*archivedincident.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("ArchivedIncident", "index", "*archivedincident.IndexPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		for _, value := range p.State {
			values.Add("state", value)
		}
		if p.AppliedPolicyID != nil {
			values.Add("applied_policy_id", *p.AppliedPolicyID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// ArchivedIncident index endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			p := NewIndexArchivedIncidentListNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &archivedincidentviews.ArchivedIncidentList{Projected: p, View: view}
			res := archivedincident.NewArchivedIncidentList(vres)
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			p := NewIndexArchivedIncidentListOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &archivedincidentviews.ArchivedIncidentList{Projected: p, View: view}
			if err = archivedincidentviews.ValidateArchivedIncidentList(vres); err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			res := archivedincident.NewArchivedIncidentList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index", err)
			}
			err = ValidateIndexUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index", err)
			}
			err = ValidateIndexForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ArchivedIncident", "index", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexEscalationsRequest instantiates a HTTP request object with method
// and path set to call the "ArchivedIncident" service "index_escalations"
// endpoint
func (c *Client) BuildIndexEscalationsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		incidentID string
	)
	{
		p, ok := v.(*archivedincident.IndexEscalationsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ArchivedIncident", "index_escalations", "*archivedincident.IndexEscalationsPayload", v)
		}
		projectID = p.ProjectID
		incidentID = p.IncidentID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexEscalationsArchivedIncidentPath(projectID, incidentID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ArchivedIncident", "index_escalations", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexEscalationsRequest returns an encoder for requests sent to the
// ArchivedIncident index_escalations server.
func EncodeIndexEscalationsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*archivedincident.IndexEscalationsPayload)
		if !ok {
			return goahttp.ErrInvalidType("ArchivedIncident", "index_escalations", "*archivedincident.IndexEscalationsPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeIndexEscalationsResponse returns a decoder for responses returned by
// the ArchivedIncident index_escalations endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeIndexEscalationsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexEscalationsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IndexEscalationsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_escalations", err)
			}
			p := NewIndexEscalationsEscalationsOK(&body)
			view := "default"
			vres := &archivedincidentviews.Escalations{Projected: p, View: view}
			if err = archivedincidentviews.ValidateEscalations(vres); err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_escalations", err)
			}
			res := archivedincident.NewEscalations(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body IndexEscalationsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_escalations", err)
			}
			err = ValidateIndexEscalationsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body IndexEscalationsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_escalations", err)
			}
			err = ValidateIndexEscalationsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexEscalationsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_escalations", err)
			}
			err = ValidateIndexEscalationsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexEscalationsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_escalations", err)
			}
			err = ValidateIndexEscalationsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexEscalationsBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_escalations", err)
			}
			err = ValidateIndexEscalationsBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexEscalationsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_escalations", err)
			}
			err = ValidateIndexEscalationsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ArchivedIncident", "index_escalations", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexResolutionsRequest instantiates a HTTP request object with method
// and path set to call the "ArchivedIncident" service "index_resolutions"
// endpoint
func (c *Client) BuildIndexResolutionsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		incidentID string
	)
	{
		p, ok := v.(*archivedincident.IndexResolutionsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ArchivedIncident", "index_resolutions", "*archivedincident.IndexResolutionsPayload", v)
		}
		projectID = p.ProjectID
		incidentID = p.IncidentID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexResolutionsArchivedIncidentPath(projectID, incidentID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ArchivedIncident", "index_resolutions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexResolutionsRequest returns an encoder for requests sent to the
// ArchivedIncident index_resolutions server.
func EncodeIndexResolutionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*archivedincident.IndexResolutionsPayload)
		if !ok {
			return goahttp.ErrInvalidType("ArchivedIncident", "index_resolutions", "*archivedincident.IndexResolutionsPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeIndexResolutionsResponse returns a decoder for responses returned by
// the ArchivedIncident index_resolutions endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeIndexResolutionsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unprocessable_entity" (type *goa.ServiceError): http.StatusUnprocessableEntity
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResolutionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IndexResolutionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			p := NewIndexResolutionsResolutionsOK(&body)
			view := "default"
			vres := &archivedincidentviews.Resolutions{Projected: p, View: view}
			if err = archivedincidentviews.ValidateResolutions(vres); err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			res := archivedincident.NewResolutions(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body IndexResolutionsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			err = ValidateIndexResolutionsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsNotFound(&body)
		case http.StatusUnprocessableEntity:
			var (
				body IndexResolutionsUnprocessableEntityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			err = ValidateIndexResolutionsUnprocessableEntityResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsUnprocessableEntity(&body)
		case http.StatusUnauthorized:
			var (
				body IndexResolutionsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			err = ValidateIndexResolutionsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexResolutionsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			err = ValidateIndexResolutionsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexResolutionsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			err = ValidateIndexResolutionsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexResolutionsBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			err = ValidateIndexResolutionsBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexResolutionsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ArchivedIncident", "index_resolutions", err)
			}
			err = ValidateIndexResolutionsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ArchivedIncident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ArchivedIncident", "index_resolutions", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProjectResponseBodyToArchivedincidentviewsProjectView builds a
// value of type *archivedincidentviews.ProjectView from a value of type
// *ProjectResponseBody.
func unmarshalProjectResponseBodyToArchivedincidentviewsProjectView(v *ProjectResponseBody) *archivedincidentviews.ProjectView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ProjectView{
		ID:      v.ID,
		Name:    v.Name,
		OrgID:   v.OrgID,
		OrgName: v.OrgName,
	}

	return res
}

// unmarshalAppliedPolicyResponseBodyToArchivedincidentviewsAppliedPolicyView
// builds a value of type *archivedincidentviews.AppliedPolicyView from a value
// of type *AppliedPolicyResponseBody.
func unmarshalAppliedPolicyResponseBodyToArchivedincidentviewsAppliedPolicyView(v *AppliedPolicyResponseBody) *archivedincidentviews.AppliedPolicyView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.AppliedPolicyView{
		ID:                  v.ID,
		PolicyAggregateID:   v.PolicyAggregateID,
		IncidentAggregateID: v.IncidentAggregateID,
		Name:                v.Name,
		Href:                v.Href,
		Description:         v.Description,
		DocLink:             v.DocLink,
		CreatedAt:           v.CreatedAt,
		UpdatedAt:           v.UpdatedAt,
		Severity:            v.Severity,
		Category:            v.Category,
		Frequency:           v.Frequency,
		DryRun:              v.DryRun,
		SkipApprovals:       v.SkipApprovals,
		Status:              v.Status,
		Error:               v.Error,
		ErroredAt:           v.ErroredAt,
		Scope:               v.Scope,
		Kind:                v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToArchivedincidentviewsProjectView(v.Project)
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = unmarshalPolicyTemplateResponseBodyToArchivedincidentviewsPolicyTemplateView(v.PolicyTemplate)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = unmarshalPublishedTemplateResponseBodyToArchivedincidentviewsPublishedTemplateView(v.PublishedTemplate)
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.CreatedBy)
	}
	if v.Options != nil {
		res.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]string, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}

	return res
}

// unmarshalPolicyTemplateResponseBodyToArchivedincidentviewsPolicyTemplateView
// builds a value of type *archivedincidentviews.PolicyTemplateView from a
// value of type *PolicyTemplateResponseBody.
func unmarshalPolicyTemplateResponseBodyToArchivedincidentviewsPolicyTemplateView(v *PolicyTemplateResponseBody) *archivedincidentviews.PolicyTemplateView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.PolicyTemplateView{
		ID:               v.ID,
		Name:             v.Name,
		ProjectID:        v.ProjectID,
		RsPtVer:          v.RsPtVer,
		ShortDescription: v.ShortDescription,
		LongDescription:  v.LongDescription,
		DocLink:          v.DocLink,
		DefaultFrequency: v.DefaultFrequency,
		Href:             v.Href,
		Filename:         v.Filename,
		Source:           v.Source,
		Fingerprint:      v.Fingerprint,
		Category:         v.Category,
		CreatedAt:        v.CreatedAt,
		UpdatedAt:        v.UpdatedAt,
		Severity:         v.Severity,
		Tenancy:          v.Tenancy,
		Kind:             v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*archivedincidentviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = unmarshalPermissionResponseBodyToArchivedincidentviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToArchivedincidentviewsParameterView(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*archivedincidentviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = unmarshalCredentialsResponseBodyToArchivedincidentviewsCredentialsView(val)
		}
	}

	return res
}

// unmarshalUserResponseBodyToArchivedincidentviewsUserView builds a value of
// type *archivedincidentviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToArchivedincidentviewsUserView(v *UserResponseBody) *archivedincidentviews.UserView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalPermissionResponseBodyToArchivedincidentviewsPermissionView builds
// a value of type *archivedincidentviews.PermissionView from a value of type
// *PermissionResponseBody.
func unmarshalPermissionResponseBodyToArchivedincidentviewsPermissionView(v *PermissionResponseBody) *archivedincidentviews.PermissionView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.PermissionView{
		Name:  v.Name,
		Label: v.Label,
	}
	res.Resources = make([]string, len(v.Resources))
	for i, val := range v.Resources {
		res.Resources[i] = val
	}
	res.Actions = make([]string, len(v.Actions))
	for i, val := range v.Actions {
		res.Actions[i] = val
	}

	return res
}

// unmarshalParameterResponseBodyToArchivedincidentviewsParameterView builds a
// value of type *archivedincidentviews.ParameterView from a value of type
// *ParameterResponseBody.
func unmarshalParameterResponseBodyToArchivedincidentviewsParameterView(v *ParameterResponseBody) *archivedincidentviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ParameterView{
		Name:                  v.Name,
		Type:                  v.Type,
		Label:                 v.Label,
		Index:                 v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = unmarshalRegexpResponseBodyToArchivedincidentviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// unmarshalRegexpResponseBodyToArchivedincidentviewsRegexpView builds a value
// of type *archivedincidentviews.RegexpView from a value of type
// *RegexpResponseBody.
func unmarshalRegexpResponseBodyToArchivedincidentviewsRegexpView(v *RegexpResponseBody) *archivedincidentviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.RegexpView{
		Pattern: v.Pattern,
		Options: v.Options,
	}

	return res
}

// unmarshalCredentialsResponseBodyToArchivedincidentviewsCredentialsView
// builds a value of type *archivedincidentviews.CredentialsView from a value
// of type *CredentialsResponseBody.
func unmarshalCredentialsResponseBodyToArchivedincidentviewsCredentialsView(v *CredentialsResponseBody) *archivedincidentviews.CredentialsView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.CredentialsView{
		Name:        v.Name,
		Label:       v.Label,
		Description: v.Description,
	}
	res.Schemes = make([]string, len(v.Schemes))
	for i, val := range v.Schemes {
		res.Schemes[i] = val
	}
	if v.Tags != nil {
		res.Tags = make([]*archivedincidentviews.CredentialsTagView, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = unmarshalCredentialsTagResponseBodyToArchivedincidentviewsCredentialsTagView(val)
		}
	}

	return res
}

// unmarshalCredentialsTagResponseBodyToArchivedincidentviewsCredentialsTagView
// builds a value of type *archivedincidentviews.CredentialsTagView from a
// value of type *CredentialsTagResponseBody.
func unmarshalCredentialsTagResponseBodyToArchivedincidentviewsCredentialsTagView(v *CredentialsTagResponseBody) *archivedincidentviews.CredentialsTagView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.CredentialsTagView{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// unmarshalPublishedTemplateResponseBodyToArchivedincidentviewsPublishedTemplateView
// builds a value of type *archivedincidentviews.PublishedTemplateView from a
// value of type *PublishedTemplateResponseBody.
func unmarshalPublishedTemplateResponseBodyToArchivedincidentviewsPublishedTemplateView(v *PublishedTemplateResponseBody) *archivedincidentviews.PublishedTemplateView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.PublishedTemplateView{
		ID:                        v.ID,
		Name:                      v.Name,
		OrgID:                     v.OrgID,
		ProjectID:                 v.ProjectID,
		PolicyTemplateID:          v.PolicyTemplateID,
		PolicyTemplateURL:         v.PolicyTemplateURL,
		PolicyTemplateFingerprint: v.PolicyTemplateFingerprint,
		RsPtVer:                   v.RsPtVer,
		ShortDescription:          v.ShortDescription,
		LongDescription:           v.LongDescription,
		DocLink:                   v.DocLink,
		DefaultFrequency:          v.DefaultFrequency,
		Href:                      v.Href,
		Filename:                  v.Filename,
		Source:                    v.Source,
		Fingerprint:               v.Fingerprint,
		Category:                  v.Category,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
		Severity:                  v.Severity,
		BuiltIn:                   v.BuiltIn,
		Hidden:                    v.Hidden,
		HiddenAt:                  v.HiddenAt,
		Tenancy:                   v.Tenancy,
		Kind:                      v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*archivedincidentviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = unmarshalPermissionResponseBodyToArchivedincidentviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToArchivedincidentviewsParameterView(val)
		}
	}
	if v.HiddenBy != nil {
		res.HiddenBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.HiddenBy)
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*archivedincidentviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = unmarshalCredentialsResponseBodyToArchivedincidentviewsCredentialsView(val)
		}
	}

	return res
}

// unmarshalConfigurationOptionResponseBodyToArchivedincidentviewsConfigurationOptionView
// builds a value of type *archivedincidentviews.ConfigurationOptionView from a
// value of type *ConfigurationOptionResponseBody.
func unmarshalConfigurationOptionResponseBodyToArchivedincidentviewsConfigurationOptionView(v *ConfigurationOptionResponseBody) *archivedincidentviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ConfigurationOptionView{
		Name:   v.Name,
		Label:  v.Label,
		Type:   v.Type,
		Value:  v.Value,
		NoEcho: v.NoEcho,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}

	return res
}

// unmarshalArchivedIncidentResponseBodyToArchivedincidentviewsArchivedIncidentView
// builds a value of type *archivedincidentviews.ArchivedIncidentView from a
// value of type *ArchivedIncidentResponseBody.
func unmarshalArchivedIncidentResponseBodyToArchivedincidentviewsArchivedIncidentView(v *ArchivedIncidentResponseBody) *archivedincidentviews.ArchivedIncidentView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ArchivedIncidentView{
		ID:                 v.ID,
		Href:               v.Href,
		Summary:            v.Summary,
		Detail:             v.Detail,
		Data:               v.Data,
		ViolationDataCount: v.ViolationDataCount,
		CreatedAt:          v.CreatedAt,
		UpdatedAt:          v.UpdatedAt,
		ResolvedAt:         v.ResolvedAt,
		ResolutionMessage:  v.ResolutionMessage,
		State:              v.State,
		Severity:           v.Severity,
		Category:           v.Category,
		DryRun:             v.DryRun,
		ActionFailed:       v.ActionFailed,
		Kind:               v.Kind,
		Etag:               v.Etag,
		NotModified:        v.NotModified,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToArchivedincidentviewsProjectView(v.Project)
	}
	if v.AppliedPolicy != nil {
		res.AppliedPolicy = unmarshalAppliedPolicyResponseBodyToArchivedincidentviewsAppliedPolicyView(v.AppliedPolicy)
	}
	if v.ResolvedBy != nil {
		res.ResolvedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.ResolvedBy)
	}
	if v.Options != nil {
		res.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToArchivedincidentviewsConfigurationOptionView(val)
		}
	}

	return res
}

// unmarshalEscalationResponseBodyToArchivedincidentviewsEscalationView builds
// a value of type *archivedincidentviews.EscalationView from a value of type
// *EscalationResponseBody.
func unmarshalEscalationResponseBodyToArchivedincidentviewsEscalationView(v *EscalationResponseBody) *archivedincidentviews.EscalationView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.EscalationView{
		Status: v.Status,
		Name:   v.Name,
	}
	res.Actions = make([]*archivedincidentviews.EscalationActionView, len(v.Actions))
	for i, val := range v.Actions {
		res.Actions[i] = unmarshalEscalationActionResponseBodyToArchivedincidentviewsEscalationActionView(val)
	}

	return res
}

// unmarshalEscalationActionResponseBodyToArchivedincidentviewsEscalationActionView
// builds a value of type *archivedincidentviews.EscalationActionView from a
// value of type *EscalationActionResponseBody.
func unmarshalEscalationActionResponseBodyToArchivedincidentviewsEscalationActionView(v *EscalationActionResponseBody) *archivedincidentviews.EscalationActionView {
	res := &archivedincidentviews.EscalationActionView{
		Type:        v.Type,
		Status:      v.Status,
		StartedAt:   v.StartedAt,
		FinishedAt:  v.FinishedAt,
		Error:       v.Error,
		ProcessHref: v.ProcessHref,
	}
	if v.ApprovalRequest != nil {
		res.ApprovalRequest = unmarshalApprovalRequestResponseBodyToArchivedincidentviewsApprovalRequestView(v.ApprovalRequest)
	}

	return res
}

// unmarshalApprovalRequestResponseBodyToArchivedincidentviewsApprovalRequestView
// builds a value of type *archivedincidentviews.ApprovalRequestView from a
// value of type *ApprovalRequestResponseBody.
func unmarshalApprovalRequestResponseBodyToArchivedincidentviewsApprovalRequestView(v *ApprovalRequestResponseBody) *archivedincidentviews.ApprovalRequestView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ApprovalRequestView{
		ID:            v.ID,
		ProjectID:     v.ProjectID,
		Href:          v.Href,
		Label:         v.Label,
		Description:   v.Description,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
		Status:        v.Status,
		ApprovedAt:    v.ApprovedAt,
		DenialComment: v.DenialComment,
		DeniedAt:      v.DeniedAt,
		Kind:          v.Kind,
	}
	res.Subject = unmarshalApprovalSubjectToArchivedincidentviewsApprovalSubject(v.Subject)
	if v.Parameters != nil {
		res.Parameters = make(map[string]*archivedincidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToArchivedincidentviewsParameterView(val)
		}
	}
	if v.Options != nil {
		res.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	if v.ApprovedBy != nil {
		res.ApprovedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.ApprovedBy)
	}
	if v.DeniedBy != nil {
		res.DeniedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(v.DeniedBy)
	}

	return res
}

// unmarshalApprovalSubjectToArchivedincidentviewsApprovalSubject builds a
// value of type *archivedincidentviews.ApprovalSubject from a value of type
// *ApprovalSubject.
func unmarshalApprovalSubjectToArchivedincidentviewsApprovalSubject(v *ApprovalSubject) *archivedincidentviews.ApprovalSubject {
	res := &archivedincidentviews.ApprovalSubject{
		Kind: v.Kind,
		Href: v.Href,
	}

	return res
}

// unmarshalResolutionResponseBodyToArchivedincidentviewsResolutionView builds
// a value of type *archivedincidentviews.ResolutionView from a value of type
// *ResolutionResponseBody.
func unmarshalResolutionResponseBodyToArchivedincidentviewsResolutionView(v *ResolutionResponseBody) *archivedincidentviews.ResolutionView {
	if v == nil {
		return nil
	}
	res := &archivedincidentviews.ResolutionView{
		Status: v.Status,
		Name:   v.Name,
	}
	res.Actions = make([]*archivedincidentviews.ResolutionActionView, len(v.Actions))
	for i, val := range v.Actions {
		res.Actions[i] = unmarshalResolutionActionResponseBodyToArchivedincidentviewsResolutionActionView(val)
	}

	return res
}

// unmarshalResolutionActionResponseBodyToArchivedincidentviewsResolutionActionView
// builds a value of type *archivedincidentviews.ResolutionActionView from a
// value of type *ResolutionActionResponseBody.
func unmarshalResolutionActionResponseBodyToArchivedincidentviewsResolutionActionView(v *ResolutionActionResponseBody) *archivedincidentviews.ResolutionActionView {
	res := &archivedincidentviews.ResolutionActionView{
		Type:        v.Type,
		Status:      v.Status,
		StartedAt:   v.StartedAt,
		FinishedAt:  v.FinishedAt,
		Error:       v.Error,
		ProcessHref: v.ProcessHref,
	}
	if v.ApprovalRequest != nil {
		res.ApprovalRequest = unmarshalApprovalRequestResponseBodyToArchivedincidentviewsApprovalRequestView(v.ApprovalRequest)
	}

	return res
}
