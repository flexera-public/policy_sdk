// Code generated by goa v3.1.3, DO NOT EDIT.
//
// ArchivedIncident HTTP client types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package client

import (
	archivedincidentviews "github.com/rightscale/policy_sdk/sdk/archived_incident/views"
	goa "goa.design/goa/v3/pkg"
)

// ShowOKResponseBody is the type of the "ArchivedIncident" service "show"
// endpoint HTTP response body.
type ShowOKResponseBody struct {
	// id is the ID of the archived incident, must be unique in the project.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the archived incident.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyResponseBody `form:"applied_policy,omitempty" json:"applied_policy,omitempty" xml:"applied_policy,omitempty"`
	// summary is a summary of the incident.
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// message is a description of the incident.
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
	// data is the data about the resources that violate the policy.
	Data interface{} `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// The number of items in violation data.
	ViolationDataCount *uint `form:"violation_data_count,omitempty" json:"violation_data_count,omitempty" xml:"violation_data_count,omitempty"`
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string `form:"resolved_at,omitempty" json:"resolved_at,omitempty" xml:"resolved_at,omitempty"`
	// resolved_by is the RightScale user that resolved the incident if it was
	// resolved manually.
	ResolvedBy *UserResponseBody `form:"resolved_by,omitempty" json:"resolved_by,omitempty" xml:"resolved_by,omitempty"`
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string `form:"resolution_message,omitempty" json:"resolution_message,omitempty" xml:"resolution_message,omitempty"`
	// state represents the current handling status of the incident.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// severity defines the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// options lists the configuration options used to parameterize the policy that
	// created the incident.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool `form:"action_failed,omitempty" json:"action_failed,omitempty" xml:"action_failed,omitempty"`
	// kind is "gov#archived_incident".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// IndexOKResponseBody is the type of the "ArchivedIncident" service "index"
// endpoint HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of incidents in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of archived incidents.
	Items ArchivedIncidentCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#archived_incident_list".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// IndexEscalationsResponseBody is the type of the "ArchivedIncident" service
// "index_escalations" endpoint HTTP response body.
type IndexEscalationsResponseBody struct {
	// status is the status of all of the escalations.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// escalations is the set of escalations.
	Escalations []*EscalationResponseBody `form:"escalations,omitempty" json:"escalations,omitempty" xml:"escalations,omitempty"`
	// started_at is the time when the incident handling is started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
}

// IndexResolutionsResponseBody is the type of the "ArchivedIncident" service
// "index_resolutions" endpoint HTTP response body.
type IndexResolutionsResponseBody struct {
	// status is the status of all of the resolutions.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// resolutions is the set of resolutions.
	Resolutions []*ResolutionResponseBody `form:"resolutions,omitempty" json:"resolutions,omitempty" xml:"resolutions,omitempty"`
	// started_at is the time when the incident handling is started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the incident handling is finished. It exists
	// when the status is completed or failed.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "ArchivedIncident" service
// "show" endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowUnauthorizedResponseBody is the type of the "ArchivedIncident" service
// "show" endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowForbiddenResponseBody is the type of the "ArchivedIncident" service
// "show" endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBadRequestResponseBody is the type of the "ArchivedIncident" service
// "show" endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBadGatewayResponseBody is the type of the "ArchivedIncident" service
// "show" endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowInternalErrorResponseBody is the type of the "ArchivedIncident" service
// "show" endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexUnauthorizedResponseBody is the type of the "ArchivedIncident" service
// "index" endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexForbiddenResponseBody is the type of the "ArchivedIncident" service
// "index" endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexBadRequestResponseBody is the type of the "ArchivedIncident" service
// "index" endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexBadGatewayResponseBody is the type of the "ArchivedIncident" service
// "index" endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexInternalErrorResponseBody is the type of the "ArchivedIncident" service
// "index" endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexEscalationsNotFoundResponseBody is the type of the "ArchivedIncident"
// service "index_escalations" endpoint HTTP response body for the "not_found"
// error.
type IndexEscalationsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexEscalationsUnauthorizedResponseBody is the type of the
// "ArchivedIncident" service "index_escalations" endpoint HTTP response body
// for the "unauthorized" error.
type IndexEscalationsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexEscalationsForbiddenResponseBody is the type of the "ArchivedIncident"
// service "index_escalations" endpoint HTTP response body for the "forbidden"
// error.
type IndexEscalationsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexEscalationsBadRequestResponseBody is the type of the "ArchivedIncident"
// service "index_escalations" endpoint HTTP response body for the
// "bad_request" error.
type IndexEscalationsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexEscalationsBadGatewayResponseBody is the type of the "ArchivedIncident"
// service "index_escalations" endpoint HTTP response body for the
// "bad_gateway" error.
type IndexEscalationsBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexEscalationsInternalErrorResponseBody is the type of the
// "ArchivedIncident" service "index_escalations" endpoint HTTP response body
// for the "internal_error" error.
type IndexEscalationsInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexResolutionsNotFoundResponseBody is the type of the "ArchivedIncident"
// service "index_resolutions" endpoint HTTP response body for the "not_found"
// error.
type IndexResolutionsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexResolutionsUnprocessableEntityResponseBody is the type of the
// "ArchivedIncident" service "index_resolutions" endpoint HTTP response body
// for the "unprocessable_entity" error.
type IndexResolutionsUnprocessableEntityResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexResolutionsUnauthorizedResponseBody is the type of the
// "ArchivedIncident" service "index_resolutions" endpoint HTTP response body
// for the "unauthorized" error.
type IndexResolutionsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexResolutionsForbiddenResponseBody is the type of the "ArchivedIncident"
// service "index_resolutions" endpoint HTTP response body for the "forbidden"
// error.
type IndexResolutionsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexResolutionsBadRequestResponseBody is the type of the "ArchivedIncident"
// service "index_resolutions" endpoint HTTP response body for the
// "bad_request" error.
type IndexResolutionsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexResolutionsBadGatewayResponseBody is the type of the "ArchivedIncident"
// service "index_resolutions" endpoint HTTP response body for the
// "bad_gateway" error.
type IndexResolutionsBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexResolutionsInternalErrorResponseBody is the type of the
// "ArchivedIncident" service "index_resolutions" endpoint HTTP response body
// for the "internal_error" error.
type IndexResolutionsInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// id is the Project ID
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name is the Project Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// org_id is the RightScale Organization ID
	OrgID *uint `form:"org_id,omitempty" json:"org_id,omitempty" xml:"org_id,omitempty"`
	// org_name is the RightScale Organization Name
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
}

// AppliedPolicyResponseBody is used to define fields on response body types.
type AppliedPolicyResponseBody struct {
	// id identifies an applied policy by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBody `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBody `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// created_by is the RightScale user that applied the policy.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the applied policy.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// kind is "gov#applied_policy".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// PolicyTemplateResponseBody is used to define fields on response body types.
type PolicyTemplateResponseBody struct {
	// id identifies a policy template by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name is the unique name of the policy template in the project.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint *string `form:"fingerprint,omitempty" json:"fingerprint,omitempty" xml:"fingerprint,omitempty"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#policy_template".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// name of user, usually of the form 'First Last'
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// PermissionResponseBody is used to define fields on response body types.
type PermissionResponseBody struct {
	// Name of a permission
	Name *string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// ParameterResponseBody is used to define fields on response body types.
type ParameterResponseBody struct {
	// Name of the parameter
	Name *string `json:"name"`
	// Type of the parameter
	Type *string `json:"type"`
	// Label to show in the UI
	Label *string `json:"label"`
	// The index of this parameter in the list
	Index *uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho *bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpResponseBody `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpResponseBody is used to define fields on response body types.
type RegexpResponseBody struct {
	// Pattern is the regular expression pattern.
	Pattern *string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// Name in policy template source code
	Name *string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label *string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTagResponseBody `json:"tags"`
}

// CredentialsTagResponseBody is used to define fields on response body types.
type CredentialsTagResponseBody struct {
	// Key is the tag key.
	Key *string `json:"key"`
	// Value is the tag value.
	Value *string `json:"value"`
}

// PublishedTemplateResponseBody is used to define fields on response body
// types.
type PublishedTemplateResponseBody struct {
	// id identifies a published template by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name is the unique name of the published template in the organization.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// org_id is the ID of the organization that the published template belongs to.
	OrgID *uint `form:"org_id,omitempty" json:"org_id,omitempty" xml:"org_id,omitempty"`
	// project_id is the ID of the project that the published template is published
	// from.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// policy_template_id is the ID of the policy template from which the published
	// template originated.
	PolicyTemplateID *string `form:"policy_template_id,omitempty" json:"policy_template_id,omitempty" xml:"policy_template_id,omitempty"`
	// policy_template_url is the full URL to the policy template from which the
	// published template originated.
	PolicyTemplateURL *string `form:"policy_template_url,omitempty" json:"policy_template_url,omitempty" xml:"policy_template_url,omitempty"`
	// policy_template_fingerprint is fingerprint of the policy template. It is
	// used to determine if the policy template that this was published from is
	// outdated.
	PolicyTemplateFingerprint *string `form:"policy_template_fingerprint,omitempty" json:"policy_template_fingerprint,omitempty" xml:"policy_template_fingerprint,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the published template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the published template. The
	// content can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the self-referential href of the published template.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is published template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint *string `form:"fingerprint,omitempty" json:"fingerprint,omitempty" xml:"fingerprint,omitempty"`
	// category is the type categorization of the published template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the published template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this published
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool `form:"built_in,omitempty" json:"built_in,omitempty" xml:"built_in,omitempty"`
	// hidden is a flag to indicate whether the published template is hidden.
	Hidden *bool `form:"hidden,omitempty" json:"hidden,omitempty" xml:"hidden,omitempty"`
	// hidden_by is the RightScale user that marked the published template as
	// hidden.
	HiddenBy *UserResponseBody `form:"hidden_by,omitempty" json:"hidden_by,omitempty" xml:"hidden_by,omitempty"`
	// hidden_at is the hidden at timestamp in RFC3339 format.
	HiddenAt *string `form:"hidden_at,omitempty" json:"hidden_at,omitempty" xml:"hidden_at,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#published_template".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// label of option
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// type of option
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// value of option
	Value interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho *bool `form:"no_echo,omitempty" json:"no_echo,omitempty" xml:"no_echo,omitempty"`
}

// ArchivedIncidentCollectionResponseBody is used to define fields on response
// body types.
type ArchivedIncidentCollectionResponseBody []*ArchivedIncidentResponseBody

// ArchivedIncidentResponseBody is used to define fields on response body types.
type ArchivedIncidentResponseBody struct {
	// id is the ID of the archived incident, must be unique in the project.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the archived incident.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// applied_policy links to key attributes of the applied policy that initiated
	// the incident.
	AppliedPolicy *AppliedPolicyResponseBody `form:"applied_policy,omitempty" json:"applied_policy,omitempty" xml:"applied_policy,omitempty"`
	// summary is a summary of the incident.
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// message is a description of the incident.
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
	// data is the data about the resources that violate the policy.
	Data interface{} `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// The number of items in violation data.
	ViolationDataCount *uint `form:"violation_data_count,omitempty" json:"violation_data_count,omitempty" xml:"violation_data_count,omitempty"`
	// created_at is the incident creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the incident update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// resolved_at is the incident resolution timestamp in RFC3339 format.
	ResolvedAt *string `form:"resolved_at,omitempty" json:"resolved_at,omitempty" xml:"resolved_at,omitempty"`
	// resolved_by is the RightScale user that resolved the incident if it was
	// resolved manually.
	ResolvedBy *UserResponseBody `form:"resolved_by,omitempty" json:"resolved_by,omitempty" xml:"resolved_by,omitempty"`
	// resolution_message is an optional explaination of why the incident is
	// resolved.
	ResolutionMessage *string `form:"resolution_message,omitempty" json:"resolution_message,omitempty" xml:"resolution_message,omitempty"`
	// state represents the current handling status of the incident.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// severity defines the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the incident.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// options lists the configuration options used to parameterize the policy that
	// created the incident.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// dry_run is a flag used for testing a policy, that determines whether this
	// incident should trigger escalation actions.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// action_failed indicates whether any of the incident's actions failed during
	// execution.
	ActionFailed *bool `form:"action_failed,omitempty" json:"action_failed,omitempty" xml:"action_failed,omitempty"`
	// kind is "gov#archived_incident".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// etag is an HTTP ETag for the incident.
	Etag *string `form:"etag,omitempty" json:"etag,omitempty" xml:"etag,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
}

// EscalationResponseBody is used to define fields on response body types.
type EscalationResponseBody struct {
	// status is the status of the set of escalation actions.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// name is the name of the escalation.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// actions is the list of individual actions.
	Actions []*EscalationActionResponseBody `form:"actions,omitempty" json:"actions,omitempty" xml:"actions,omitempty"`
}

// EscalationActionResponseBody is used to define fields on response body types.
type EscalationActionResponseBody struct {
	// type is the type of the action.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// status is the status of the action.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// error is any error occurred when handling the action.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequestResponseBody `form:"approval_request,omitempty" json:"approval_request,omitempty" xml:"approval_request,omitempty"`
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string `form:"process_href,omitempty" json:"process_href,omitempty" xml:"process_href,omitempty"`
}

// ApprovalRequestResponseBody is used to define fields on response body types.
type ApprovalRequestResponseBody struct {
	// id identifies an approval request by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// href is the href of the approval request
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserResponseBody `form:"approved_by,omitempty" json:"approved_by,omitempty" xml:"approved_by,omitempty"`
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string `form:"approved_at,omitempty" json:"approved_at,omitempty" xml:"approved_at,omitempty"`
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string `form:"denial_comment,omitempty" json:"denial_comment,omitempty" xml:"denial_comment,omitempty"`
	// denied_by is the RightScale user that denied this approval request.
	DeniedBy *UserResponseBody `form:"denied_by,omitempty" json:"denied_by,omitempty" xml:"denied_by,omitempty"`
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string `form:"denied_at,omitempty" json:"denied_at,omitempty" xml:"denied_at,omitempty"`
	// kind is "gov#approval_request".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// ApprovalSubject is used to define fields on response body types.
type ApprovalSubject struct {
	// kind is the kind of subject
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// href is the href of the subject.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
}

// ResolutionResponseBody is used to define fields on response body types.
type ResolutionResponseBody struct {
	// status is the status of the set of resolution actions.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// name is the name of the resolution.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// actions is the list of individual actions.
	Actions []*ResolutionActionResponseBody `form:"actions,omitempty" json:"actions,omitempty" xml:"actions,omitempty"`
}

// ResolutionActionResponseBody is used to define fields on response body types.
type ResolutionActionResponseBody struct {
	// type is the type of the action.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// status is the status of the action.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// started_at is the time when the action was started.
	StartedAt *string `form:"started_at,omitempty" json:"started_at,omitempty" xml:"started_at,omitempty"`
	// finished_at is the time when the action was finished.
	FinishedAt *string `form:"finished_at,omitempty" json:"finished_at,omitempty" xml:"finished_at,omitempty"`
	// error is any error occurred when handling the action.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// approval_request is the approval request resource (if the type is
	// request_approval).
	ApprovalRequest *ApprovalRequestResponseBody `form:"approval_request,omitempty" json:"approval_request,omitempty" xml:"approval_request,omitempty"`
	// process_href is the href of a cloud workflow process. Required if the type
	// is cloud_workflow.
	ProcessHref *string `form:"process_href,omitempty" json:"process_href,omitempty" xml:"process_href,omitempty"`
}

// NewShowArchivedIncidentNotModified builds a "ArchivedIncident" service
// "show" endpoint result from a HTTP "NotModified" response.
func NewShowArchivedIncidentNotModified(etag string) *archivedincidentviews.ArchivedIncidentView {
	v := &archivedincidentviews.ArchivedIncidentView{}
	v.Etag = &etag

	return v
}

// NewShowArchivedIncidentOK builds a "ArchivedIncident" service "show"
// endpoint result from a HTTP "OK" response.
func NewShowArchivedIncidentOK(body *ShowOKResponseBody, etag string) *archivedincidentviews.ArchivedIncidentView {
	v := &archivedincidentviews.ArchivedIncidentView{
		ID:                 body.ID,
		Href:               body.Href,
		Summary:            body.Summary,
		Detail:             body.Detail,
		Data:               body.Data,
		ViolationDataCount: body.ViolationDataCount,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
		ResolvedAt:         body.ResolvedAt,
		ResolutionMessage:  body.ResolutionMessage,
		State:              body.State,
		Severity:           body.Severity,
		Category:           body.Category,
		DryRun:             body.DryRun,
		ActionFailed:       body.ActionFailed,
		Kind:               body.Kind,
		NotModified:        body.NotModified,
	}
	if body.Project != nil {
		v.Project = unmarshalProjectResponseBodyToArchivedincidentviewsProjectView(body.Project)
	}
	if body.AppliedPolicy != nil {
		v.AppliedPolicy = unmarshalAppliedPolicyResponseBodyToArchivedincidentviewsAppliedPolicyView(body.AppliedPolicy)
	}
	if body.ResolvedBy != nil {
		v.ResolvedBy = unmarshalUserResponseBodyToArchivedincidentviewsUserView(body.ResolvedBy)
	}
	if body.Options != nil {
		v.Options = make([]*archivedincidentviews.ConfigurationOptionView, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionResponseBodyToArchivedincidentviewsConfigurationOptionView(val)
		}
	}
	v.Etag = &etag

	return v
}

// NewShowNotFound builds a ArchivedIncident service show endpoint not_found
// error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowUnauthorized builds a ArchivedIncident service show endpoint
// unauthorized error.
func NewShowUnauthorized(body *ShowUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowForbidden builds a ArchivedIncident service show endpoint forbidden
// error.
func NewShowForbidden(body *ShowForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowBadRequest builds a ArchivedIncident service show endpoint
// bad_request error.
func NewShowBadRequest(body *ShowBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowBadGateway builds a ArchivedIncident service show endpoint
// bad_gateway error.
func NewShowBadGateway(body *ShowBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowInternalError builds a ArchivedIncident service show endpoint
// internal_error error.
func NewShowInternalError(body *ShowInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexArchivedIncidentListNotModified builds a "ArchivedIncident" service
// "index" endpoint result from a HTTP "NotModified" response.
func NewIndexArchivedIncidentListNotModified(etag string) *archivedincidentviews.ArchivedIncidentListView {
	v := &archivedincidentviews.ArchivedIncidentListView{}
	v.Etag = &etag

	return v
}

// NewIndexArchivedIncidentListOK builds a "ArchivedIncident" service "index"
// endpoint result from a HTTP "OK" response.
func NewIndexArchivedIncidentListOK(body *IndexOKResponseBody, etag string) *archivedincidentviews.ArchivedIncidentListView {
	v := &archivedincidentviews.ArchivedIncidentListView{
		Count:       body.Count,
		NotModified: body.NotModified,
		Kind:        body.Kind,
	}
	if body.Items != nil {
		v.Items = make([]*archivedincidentviews.ArchivedIncidentView, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = unmarshalArchivedIncidentResponseBodyToArchivedincidentviewsArchivedIncidentView(val)
		}
	}
	v.Etag = &etag

	return v
}

// NewIndexUnauthorized builds a ArchivedIncident service index endpoint
// unauthorized error.
func NewIndexUnauthorized(body *IndexUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexForbidden builds a ArchivedIncident service index endpoint forbidden
// error.
func NewIndexForbidden(body *IndexForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexBadRequest builds a ArchivedIncident service index endpoint
// bad_request error.
func NewIndexBadRequest(body *IndexBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexBadGateway builds a ArchivedIncident service index endpoint
// bad_gateway error.
func NewIndexBadGateway(body *IndexBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexInternalError builds a ArchivedIncident service index endpoint
// internal_error error.
func NewIndexInternalError(body *IndexInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexEscalationsEscalationsOK builds a "ArchivedIncident" service
// "index_escalations" endpoint result from a HTTP "OK" response.
func NewIndexEscalationsEscalationsOK(body *IndexEscalationsResponseBody) *archivedincidentviews.EscalationsView {
	v := &archivedincidentviews.EscalationsView{
		Status:     body.Status,
		StartedAt:  body.StartedAt,
		FinishedAt: body.FinishedAt,
	}
	if body.Escalations != nil {
		v.Escalations = make([]*archivedincidentviews.EscalationView, len(body.Escalations))
		for i, val := range body.Escalations {
			v.Escalations[i] = unmarshalEscalationResponseBodyToArchivedincidentviewsEscalationView(val)
		}
	}

	return v
}

// NewIndexEscalationsNotFound builds a ArchivedIncident service
// index_escalations endpoint not_found error.
func NewIndexEscalationsNotFound(body *IndexEscalationsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexEscalationsUnauthorized builds a ArchivedIncident service
// index_escalations endpoint unauthorized error.
func NewIndexEscalationsUnauthorized(body *IndexEscalationsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexEscalationsForbidden builds a ArchivedIncident service
// index_escalations endpoint forbidden error.
func NewIndexEscalationsForbidden(body *IndexEscalationsForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexEscalationsBadRequest builds a ArchivedIncident service
// index_escalations endpoint bad_request error.
func NewIndexEscalationsBadRequest(body *IndexEscalationsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexEscalationsBadGateway builds a ArchivedIncident service
// index_escalations endpoint bad_gateway error.
func NewIndexEscalationsBadGateway(body *IndexEscalationsBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexEscalationsInternalError builds a ArchivedIncident service
// index_escalations endpoint internal_error error.
func NewIndexEscalationsInternalError(body *IndexEscalationsInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexResolutionsResolutionsOK builds a "ArchivedIncident" service
// "index_resolutions" endpoint result from a HTTP "OK" response.
func NewIndexResolutionsResolutionsOK(body *IndexResolutionsResponseBody) *archivedincidentviews.ResolutionsView {
	v := &archivedincidentviews.ResolutionsView{
		Status:     body.Status,
		StartedAt:  body.StartedAt,
		FinishedAt: body.FinishedAt,
	}
	if body.Resolutions != nil {
		v.Resolutions = make([]*archivedincidentviews.ResolutionView, len(body.Resolutions))
		for i, val := range body.Resolutions {
			v.Resolutions[i] = unmarshalResolutionResponseBodyToArchivedincidentviewsResolutionView(val)
		}
	}

	return v
}

// NewIndexResolutionsNotFound builds a ArchivedIncident service
// index_resolutions endpoint not_found error.
func NewIndexResolutionsNotFound(body *IndexResolutionsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexResolutionsUnprocessableEntity builds a ArchivedIncident service
// index_resolutions endpoint unprocessable_entity error.
func NewIndexResolutionsUnprocessableEntity(body *IndexResolutionsUnprocessableEntityResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexResolutionsUnauthorized builds a ArchivedIncident service
// index_resolutions endpoint unauthorized error.
func NewIndexResolutionsUnauthorized(body *IndexResolutionsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexResolutionsForbidden builds a ArchivedIncident service
// index_resolutions endpoint forbidden error.
func NewIndexResolutionsForbidden(body *IndexResolutionsForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexResolutionsBadRequest builds a ArchivedIncident service
// index_resolutions endpoint bad_request error.
func NewIndexResolutionsBadRequest(body *IndexResolutionsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexResolutionsBadGateway builds a ArchivedIncident service
// index_resolutions endpoint bad_gateway error.
func NewIndexResolutionsBadGateway(body *IndexResolutionsBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexResolutionsInternalError builds a ArchivedIncident service
// index_resolutions endpoint internal_error error.
func NewIndexResolutionsInternalError(body *IndexResolutionsInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowUnauthorizedResponseBody runs the validations defined on
// show_unauthorized_response_body
func ValidateShowUnauthorizedResponseBody(body *ShowUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowForbiddenResponseBody runs the validations defined on
// show_forbidden_response_body
func ValidateShowForbiddenResponseBody(body *ShowForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowBadRequestResponseBody runs the validations defined on
// show_bad_request_response_body
func ValidateShowBadRequestResponseBody(body *ShowBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowBadGatewayResponseBody runs the validations defined on
// show_bad_gateway_response_body
func ValidateShowBadGatewayResponseBody(body *ShowBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowInternalErrorResponseBody runs the validations defined on
// show_internal_error_response_body
func ValidateShowInternalErrorResponseBody(body *ShowInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexUnauthorizedResponseBody runs the validations defined on
// index_unauthorized_response_body
func ValidateIndexUnauthorizedResponseBody(body *IndexUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexForbiddenResponseBody runs the validations defined on
// index_forbidden_response_body
func ValidateIndexForbiddenResponseBody(body *IndexForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexBadRequestResponseBody runs the validations defined on
// index_bad_request_response_body
func ValidateIndexBadRequestResponseBody(body *IndexBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexBadGatewayResponseBody runs the validations defined on
// index_bad_gateway_response_body
func ValidateIndexBadGatewayResponseBody(body *IndexBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexInternalErrorResponseBody runs the validations defined on
// index_internal_error_response_body
func ValidateIndexInternalErrorResponseBody(body *IndexInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexEscalationsNotFoundResponseBody runs the validations defined on
// index_escalations_not_found_response_body
func ValidateIndexEscalationsNotFoundResponseBody(body *IndexEscalationsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexEscalationsUnauthorizedResponseBody runs the validations
// defined on index_escalations_unauthorized_response_body
func ValidateIndexEscalationsUnauthorizedResponseBody(body *IndexEscalationsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexEscalationsForbiddenResponseBody runs the validations defined
// on index_escalations_forbidden_response_body
func ValidateIndexEscalationsForbiddenResponseBody(body *IndexEscalationsForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexEscalationsBadRequestResponseBody runs the validations defined
// on index_escalations_bad_request_response_body
func ValidateIndexEscalationsBadRequestResponseBody(body *IndexEscalationsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexEscalationsBadGatewayResponseBody runs the validations defined
// on index_escalations_bad_gateway_response_body
func ValidateIndexEscalationsBadGatewayResponseBody(body *IndexEscalationsBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexEscalationsInternalErrorResponseBody runs the validations
// defined on index_escalations_internal_error_response_body
func ValidateIndexEscalationsInternalErrorResponseBody(body *IndexEscalationsInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexResolutionsNotFoundResponseBody runs the validations defined on
// index_resolutions_not_found_response_body
func ValidateIndexResolutionsNotFoundResponseBody(body *IndexResolutionsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexResolutionsUnprocessableEntityResponseBody runs the validations
// defined on index_resolutions_unprocessable_entity_response_body
func ValidateIndexResolutionsUnprocessableEntityResponseBody(body *IndexResolutionsUnprocessableEntityResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexResolutionsUnauthorizedResponseBody runs the validations
// defined on index_resolutions_unauthorized_response_body
func ValidateIndexResolutionsUnauthorizedResponseBody(body *IndexResolutionsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexResolutionsForbiddenResponseBody runs the validations defined
// on index_resolutions_forbidden_response_body
func ValidateIndexResolutionsForbiddenResponseBody(body *IndexResolutionsForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexResolutionsBadRequestResponseBody runs the validations defined
// on index_resolutions_bad_request_response_body
func ValidateIndexResolutionsBadRequestResponseBody(body *IndexResolutionsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexResolutionsBadGatewayResponseBody runs the validations defined
// on index_resolutions_bad_gateway_response_body
func ValidateIndexResolutionsBadGatewayResponseBody(body *IndexResolutionsBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexResolutionsInternalErrorResponseBody runs the validations
// defined on index_resolutions_internal_error_response_body
func ValidateIndexResolutionsInternalErrorResponseBody(body *IndexResolutionsInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateProjectResponseBody runs the validations defined on
// ProjectResponseBody
func ValidateProjectResponseBody(body *ProjectResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OrgID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_id", "body"))
	}
	if body.OrgName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_name", "body"))
	}
	return
}

// ValidateAppliedPolicyResponseBody runs the validations defined on
// AppliedPolicyResponseBody
func ValidateAppliedPolicyResponseBody(body *AppliedPolicyResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Project != nil {
		if err2 := ValidateProjectResponseBody(body.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if body.PolicyTemplate != nil {
		if err2 := ValidatePolicyTemplateResponseBody(body.PolicyTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateResponseBody(body.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.doc_link", *body.DocLink, goa.FormatURI))
	}
	if body.CreatedBy != nil {
		if err2 := ValidateUserResponseBody(body.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if body.Frequency != nil {
		if !(*body.Frequency == "15 minutes" || *body.Frequency == "hourly" || *body.Frequency == "daily" || *body.Frequency == "weekly" || *body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", *body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Status != nil {
		if !(*body.Status == "active" || *body.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"active", "error"}))
		}
	}
	if body.ErroredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.errored_at", *body.ErroredAt, goa.FormatDateTime))
	}
	if body.Scope != nil {
		if !(*body.Scope == "project" || *body.Scope == "org") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.scope", *body.Scope, []interface{}{"project", "org"}))
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#applied_policy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#applied_policy"}))
		}
	}
	return
}

// ValidatePolicyTemplateResponseBody runs the validations defined on
// PolicyTemplateResponseBody
func ValidatePolicyTemplateResponseBody(body *PolicyTemplateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.doc_link", *body.DocLink, goa.FormatURI))
	}
	if body.DefaultFrequency != nil {
		if !(*body.DefaultFrequency == "15 minutes" || *body.DefaultFrequency == "hourly" || *body.DefaultFrequency == "daily" || *body.DefaultFrequency == "weekly" || *body.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.default_frequency", *body.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if body.CreatedBy != nil {
		if err2 := ValidateUserResponseBody(body.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedBy != nil {
		if err2 := ValidateUserResponseBody(body.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range body.Permissions {
		if v != nil {
			if err2 := ValidatePermissionResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range body.Parameters {
		if v != nil {
			if err2 := ValidateParameterResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if body.Tenancy != nil {
		if !(*body.Tenancy == "multi" || *body.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.tenancy", *body.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range body.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidatePermissionResponseBody runs the validations defined on
// PermissionResponseBody
func ValidatePermissionResponseBody(body *PermissionResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	if body.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "body"))
	}
	return
}

// ValidateParameterResponseBody runs the validations defined on
// ParameterResponseBody
func ValidateParameterResponseBody(body *ParameterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "string" || *body.Type == "list" || *body.Type == "number") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"string", "list", "number"}))
		}
	}
	if body.AllowedPattern != nil {
		if err2 := ValidateRegexpResponseBody(body.AllowedPattern); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRegexpResponseBody runs the validations defined on RegexpResponseBody
func ValidateRegexpResponseBody(body *RegexpResponseBody) (err error) {
	if body.Pattern == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pattern", "body"))
	}
	return
}

// ValidateCredentialsResponseBody runs the validations defined on
// CredentialsResponseBody
func ValidateCredentialsResponseBody(body *CredentialsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Schemes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schemes", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	for _, e := range body.Tags {
		if e != nil {
			if err2 := ValidateCredentialsTagResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCredentialsTagResponseBody runs the validations defined on
// CredentialsTagResponseBody
func ValidateCredentialsTagResponseBody(body *CredentialsTagResponseBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}

// ValidatePublishedTemplateResponseBody runs the validations defined on
// PublishedTemplateResponseBody
func ValidatePublishedTemplateResponseBody(body *PublishedTemplateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.PolicyTemplateURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.policy_template_url", *body.PolicyTemplateURL, goa.FormatURI))
	}
	if body.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.doc_link", *body.DocLink, goa.FormatURI))
	}
	if body.DefaultFrequency != nil {
		if !(*body.DefaultFrequency == "15 minutes" || *body.DefaultFrequency == "hourly" || *body.DefaultFrequency == "daily" || *body.DefaultFrequency == "weekly" || *body.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.default_frequency", *body.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if body.CreatedBy != nil {
		if err2 := ValidateUserResponseBody(body.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedBy != nil {
		if err2 := ValidateUserResponseBody(body.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range body.Permissions {
		if v != nil {
			if err2 := ValidatePermissionResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range body.Parameters {
		if v != nil {
			if err2 := ValidateParameterResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if body.HiddenBy != nil {
		if err2 := ValidateUserResponseBody(body.HiddenBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.HiddenAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.hidden_at", *body.HiddenAt, goa.FormatDateTime))
	}
	if body.Tenancy != nil {
		if !(*body.Tenancy == "multi" || *body.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.tenancy", *body.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range body.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidateConfigurationOptionResponseBody runs the validations defined on
// ConfigurationOptionResponseBody
func ValidateConfigurationOptionResponseBody(body *ConfigurationOptionResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "string" || *body.Type == "number" || *body.Type == "list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"string", "number", "list"}))
		}
	}
	return
}

// ValidateArchivedIncidentCollectionResponseBody runs the validations defined
// on ArchivedIncidentCollectionResponseBody
func ValidateArchivedIncidentCollectionResponseBody(body ArchivedIncidentCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateArchivedIncidentResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateArchivedIncidentResponseBody runs the validations defined on
// ArchivedIncidentResponseBody
func ValidateArchivedIncidentResponseBody(body *ArchivedIncidentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "body"))
	}
	if body.Project != nil {
		if err2 := ValidateProjectResponseBody(body.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/projects/[0-9]+/archived_incidents/[0-9a-f]+$"))
	}
	if body.AppliedPolicy != nil {
		if err2 := ValidateAppliedPolicyResponseBody(body.AppliedPolicy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.ResolvedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.resolved_at", *body.ResolvedAt, goa.FormatDateTime))
	}
	if body.ResolvedBy != nil {
		if err2 := ValidateUserResponseBody(body.ResolvedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.State != nil {
		if !(*body.State == "resolved" || *body.State == "terminated") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.state", *body.State, []interface{}{"resolved", "terminated"}))
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#archived_incident") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#archived_incident"}))
		}
	}
	if body.NotModified != nil {
		if !(*body.NotModified == "true" || *body.NotModified == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.not_modified", *body.NotModified, []interface{}{"true", "false"}))
		}
	}
	return
}

// ValidateEscalationResponseBody runs the validations defined on
// EscalationResponseBody
func ValidateEscalationResponseBody(body *EscalationResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "queued" || *body.Status == "aborted" || *body.Status == "pending" || *body.Status == "running" || *body.Status == "completed" || *body.Status == "failed" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "failed", "denied"}))
		}
	}
	for _, e := range body.Actions {
		if e != nil {
			if err2 := ValidateEscalationActionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEscalationActionResponseBody runs the validations defined on
// EscalationActionResponseBody
func ValidateEscalationActionResponseBody(body *EscalationActionResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "email" || *body.Type == "cloud_workflow" || *body.Type == "resolve_incident" || *body.Type == "request_approval") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"email", "cloud_workflow", "resolve_incident", "request_approval"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "queued" || *body.Status == "aborted" || *body.Status == "pending" || *body.Status == "running" || *body.Status == "completed" || *body.Status == "skipped" || *body.Status == "failed" || *body.Status == "approved" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "skipped", "failed", "approved", "denied"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.finished_at", *body.FinishedAt, goa.FormatDateTime))
	}
	if body.ApprovalRequest != nil {
		if err2 := ValidateApprovalRequestResponseBody(body.ApprovalRequest); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateApprovalRequestResponseBody runs the validations defined on
// ApprovalRequestResponseBody
func ValidateApprovalRequestResponseBody(body *ApprovalRequestResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	}
	if body.Subject != nil {
		if err2 := ValidateApprovalSubject(body.Subject); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range body.Parameters {
		if v != nil {
			if err2 := ValidateParameterResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Status != nil {
		if !(*body.Status == "pending" || *body.Status == "approved" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.ApprovedBy != nil {
		if err2 := ValidateUserResponseBody(body.ApprovedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ApprovedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.approved_at", *body.ApprovedAt, goa.FormatDateTime))
	}
	if body.DeniedBy != nil {
		if err2 := ValidateUserResponseBody(body.DeniedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DeniedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.denied_at", *body.DeniedAt, goa.FormatDateTime))
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#approval_request") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#approval_request"}))
		}
	}
	return
}

// ValidateApprovalSubject runs the validations defined on ApprovalSubject
func ValidateApprovalSubject(body *ApprovalSubject) (err error) {
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	return
}

// ValidateResolutionResponseBody runs the validations defined on
// ResolutionResponseBody
func ValidateResolutionResponseBody(body *ResolutionResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "queued" || *body.Status == "aborted" || *body.Status == "pending" || *body.Status == "running" || *body.Status == "completed" || *body.Status == "failed" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "failed", "denied"}))
		}
	}
	for _, e := range body.Actions {
		if e != nil {
			if err2 := ValidateResolutionActionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResolutionActionResponseBody runs the validations defined on
// ResolutionActionResponseBody
func ValidateResolutionActionResponseBody(body *ResolutionActionResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "email" || *body.Type == "cloud_workflow" || *body.Type == "request_approval") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"email", "cloud_workflow", "request_approval"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "queued" || *body.Status == "aborted" || *body.Status == "pending" || *body.Status == "running" || *body.Status == "completed" || *body.Status == "skipped" || *body.Status == "failed" || *body.Status == "approved" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"queued", "aborted", "pending", "running", "completed", "skipped", "failed", "approved", "denied"}))
		}
	}
	if body.StartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.started_at", *body.StartedAt, goa.FormatDateTime))
	}
	if body.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.finished_at", *body.FinishedAt, goa.FormatDateTime))
	}
	if body.ApprovalRequest != nil {
		if err2 := ValidateApprovalRequestResponseBody(body.ApprovalRequest); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
