// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PolicyAggregate HTTP server types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	policyaggregate "github.com/rightscale/policy_sdk/sdk/policy_aggregate"
	policyaggregateviews "github.com/rightscale/policy_sdk/sdk/policy_aggregate/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "PolicyAggregate" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// template_href is the href of the published template that is applied.
	TemplateHref *string `form:"template_href,omitempty" json:"template_href,omitempty" xml:"template_href,omitempty"`
	// A list of project ids to include in this aggregate.
	ProjectIds []uint `form:"project_ids,omitempty" json:"project_ids,omitempty" xml:"project_ids,omitempty"`
	// all_projects is a flag to specify the policy should be run on all projects
	// in the org.
	AllProjects *bool `form:"all_projects,omitempty" json:"all_projects,omitempty" xml:"all_projects,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// severity is the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials is the map of name to credential used to launch the policy.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
}

// UpdateRequestBody is the type of the "PolicyAggregate" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// project_ids is a the list of projects in this aggregate. If empty, applies
	// to all projects, minus excluded projects
	ProjectIds []uint `form:"project_ids,omitempty" json:"project_ids,omitempty" xml:"project_ids,omitempty"`
	// excluded_project_ids is a list of project ids to exclude from this aggregate.
	ExcludedProjectIds []uint `form:"excluded_project_ids,omitempty" json:"excluded_project_ids,omitempty" xml:"excluded_project_ids,omitempty"`
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
}

// ShowResponseBody is the type of the "PolicyAggregate" service "show"
// endpoint HTTP response body.
type ShowResponseBody struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Org represents a RightScale organization.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// project_ids is a the list of projects in this aggregate. If empty, applies
	// to all projects, minus excluded projects
	ProjectIds []uint `form:"project_ids,omitempty" json:"project_ids,omitempty" xml:"project_ids,omitempty"`
	// excluded_project_ids is a list of projects to exclude form this aggregate.
	ExcludedProjectIds []uint `form:"excluded_project_ids,omitempty" json:"excluded_project_ids,omitempty" xml:"excluded_project_ids,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the policy aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials is the map of name to credential used to launch the policy.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the policy aggregate.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint `form:"running_project_ids,omitempty" json:"running_project_ids,omitempty" xml:"running_project_ids,omitempty"`
	// The number of applied policies running across all projects.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// The number of applied policies in an active state.
	ActiveCount *uint `form:"active_count,omitempty" json:"active_count,omitempty" xml:"active_count,omitempty"`
	// The number of applied policies in an error state.
	ErrorCount *uint `form:"error_count,omitempty" json:"error_count,omitempty" xml:"error_count,omitempty"`
	// errors captures the errors occurred while applying aggregate to individual
	// projects.
	Errors map[string]string `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
	// An array of the individual applied policies and their statuses.
	Items PolicyAggregateItemResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodyIndex is the type of the "PolicyAggregate" service "show"
// endpoint HTTP response body.
type ShowResponseBodyIndex struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Org represents a RightScale organization.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the policy aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials is the map of name to credential used to launch the policy.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the policy aggregate.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint `form:"running_project_ids,omitempty" json:"running_project_ids,omitempty" xml:"running_project_ids,omitempty"`
	// The number of applied policies running across all projects.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// The number of applied policies in an active state.
	ActiveCount *uint `form:"active_count,omitempty" json:"active_count,omitempty" xml:"active_count,omitempty"`
	// The number of applied policies in an error state.
	ErrorCount *uint `form:"error_count,omitempty" json:"error_count,omitempty" xml:"error_count,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodySource is the type of the "PolicyAggregate" service "show"
// endpoint HTTP response body.
type ShowResponseBodySource struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Org represents a RightScale organization.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodySource `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodyLink is the type of the "PolicyAggregate" service "show"
// endpoint HTTP response body.
type ShowResponseBodyLink struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowNonCatalogResponseBody is the type of the "PolicyAggregate" service
// "show_non_catalog" endpoint HTTP response body.
type ShowNonCatalogResponseBody struct {
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint `form:"running_project_ids,omitempty" json:"running_project_ids,omitempty" xml:"running_project_ids,omitempty"`
	// The number of applied policies running across all projects.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// The number of applied policies in an active state.
	ActiveCount *uint `form:"active_count,omitempty" json:"active_count,omitempty" xml:"active_count,omitempty"`
	// The number of applied policies in an error state.
	ErrorCount *uint `form:"error_count,omitempty" json:"error_count,omitempty" xml:"error_count,omitempty"`
	// An array of the individual applied policies and their statuses.
	Items PolicyAggregateNonCatalogItemResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// kind is "gov#policy_aggregate_non_catalog".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowNonCatalogResponseBodyIndex is the type of the "PolicyAggregate" service
// "show_non_catalog" endpoint HTTP response body.
type ShowNonCatalogResponseBodyIndex struct {
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint `form:"running_project_ids,omitempty" json:"running_project_ids,omitempty" xml:"running_project_ids,omitempty"`
	// The number of applied policies running across all projects.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// The number of applied policies in an active state.
	ActiveCount *uint `form:"active_count,omitempty" json:"active_count,omitempty" xml:"active_count,omitempty"`
	// The number of applied policies in an error state.
	ErrorCount *uint `form:"error_count,omitempty" json:"error_count,omitempty" xml:"error_count,omitempty"`
	// kind is "gov#policy_aggregate_non_catalog".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowNonCatalogResponseBodyLink is the type of the "PolicyAggregate" service
// "show_non_catalog" endpoint HTTP response body.
type ShowNonCatalogResponseBodyLink struct {
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// kind is "gov#policy_aggregate_non_catalog".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBody is the type of the "PolicyAggregate" service "index"
// endpoint HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of policy aggregates in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of policy aggregates.
	Items PolicyAggregateResponseBodyIndexCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#policy_aggregate_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBodyLink is the type of the "PolicyAggregate" service "index"
// endpoint HTTP response body.
type IndexOKResponseBodyLink struct {
	// count is the number of policy aggregates in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of policy aggregates.
	Items PolicyAggregateResponseBodyLinkCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#policy_aggregate_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// CreateUnprocessableEntityResponseBody is the type of the "PolicyAggregate"
// service "create" endpoint HTTP response body for the "unprocessable_entity"
// error.
type CreateUnprocessableEntityResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateUnauthorizedResponseBody is the type of the "PolicyAggregate" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateForbiddenResponseBody is the type of the "PolicyAggregate" service
// "create" endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBadRequestResponseBody is the type of the "PolicyAggregate" service
// "create" endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBadGatewayResponseBody is the type of the "PolicyAggregate" service
// "create" endpoint HTTP response body for the "bad_gateway" error.
type CreateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInternalErrorResponseBody is the type of the "PolicyAggregate" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUnauthorizedResponseBody is the type of the "PolicyAggregate" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateForbiddenResponseBody is the type of the "PolicyAggregate" service
// "update" endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "PolicyAggregate" service
// "update" endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadGatewayResponseBody is the type of the "PolicyAggregate" service
// "update" endpoint HTTP response body for the "bad_gateway" error.
type UpdateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalErrorResponseBody is the type of the "PolicyAggregate" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "PolicyAggregate" service
// "delete" endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "PolicyAggregate" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "PolicyAggregate" service
// "delete" endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "PolicyAggregate" service
// "delete" endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadGatewayResponseBody is the type of the "PolicyAggregate" service
// "delete" endpoint HTTP response body for the "bad_gateway" error.
type DeleteBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalErrorResponseBody is the type of the "PolicyAggregate" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNotFoundResponseBody is the type of the "PolicyAggregate" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "PolicyAggregate" service
// "show" endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "PolicyAggregate" service
// "show" endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "PolicyAggregate" service
// "show" endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "PolicyAggregate" service
// "show" endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "PolicyAggregate" service
// "show" endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogUnauthorizedResponseBody is the type of the "PolicyAggregate"
// service "show_non_catalog" endpoint HTTP response body for the
// "unauthorized" error.
type ShowNonCatalogUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogForbiddenResponseBody is the type of the "PolicyAggregate"
// service "show_non_catalog" endpoint HTTP response body for the "forbidden"
// error.
type ShowNonCatalogForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogBadRequestResponseBody is the type of the "PolicyAggregate"
// service "show_non_catalog" endpoint HTTP response body for the "bad_request"
// error.
type ShowNonCatalogBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogBadGatewayResponseBody is the type of the "PolicyAggregate"
// service "show_non_catalog" endpoint HTTP response body for the "bad_gateway"
// error.
type ShowNonCatalogBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNonCatalogInternalErrorResponseBody is the type of the "PolicyAggregate"
// service "show_non_catalog" endpoint HTTP response body for the
// "internal_error" error.
type ShowNonCatalogInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexUnauthorizedResponseBody is the type of the "PolicyAggregate" service
// "index" endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexForbiddenResponseBody is the type of the "PolicyAggregate" service
// "index" endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadRequestResponseBody is the type of the "PolicyAggregate" service
// "index" endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadGatewayResponseBody is the type of the "PolicyAggregate" service
// "index" endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexInternalErrorResponseBody is the type of the "PolicyAggregate" service
// "index" endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OrgResponseBody is used to define fields on response body types.
type OrgResponseBody struct {
	// id is the Org ID
	ID uint `form:"id" json:"id" xml:"id"`
	// name is the organization name
	Name string `form:"name" json:"name" xml:"name"`
}

// PublishedTemplateResponseBodyLink is used to define fields on response body
// types.
type PublishedTemplateResponseBodyLink struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool `form:"built_in,omitempty" json:"built_in,omitempty" xml:"built_in,omitempty"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID uint `form:"id" json:"id" xml:"id"`
	// email of user
	Email string `form:"email" json:"email" xml:"email"`
	// name of user, usually of the form 'First Last'
	Name string `form:"name" json:"name" xml:"name"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name string `form:"name" json:"name" xml:"name"`
	// label of option
	Label string `form:"label" json:"label" xml:"label"`
	// type of option
	Type string `form:"type" json:"type" xml:"type"`
	// value of option
	Value interface{} `form:"value" json:"value" xml:"value"`
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho bool `form:"no_echo,omitempty" json:"no_echo,omitempty" xml:"no_echo,omitempty"`
}

// PolicyAggregateItemResponseBodyCollection is used to define fields on
// response body types.
type PolicyAggregateItemResponseBodyCollection []*PolicyAggregateItemResponseBody

// PolicyAggregateItemResponseBody is used to define fields on response body
// types.
type PolicyAggregateItemResponseBody struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// url of the applied policy.
	URL string `form:"url" json:"url" xml:"url"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// kind is "gov#policy_aggregate_item".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// id is the Project ID
	ID uint `form:"id" json:"id" xml:"id"`
	// name is the Project Name
	Name string `form:"name" json:"name" xml:"name"`
	// org_id is the RightScale Organization ID
	OrgID uint `form:"org_id" json:"org_id" xml:"org_id"`
	// org_name is the RightScale Organization Name
	OrgName string `form:"org_name" json:"org_name" xml:"org_name"`
}

// PublishedTemplateResponseBodySource is used to define fields on response
// body types.
type PublishedTemplateResponseBodySource struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is published template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyAggregateNonCatalogItemResponseBodyCollection is used to define fields
// on response body types.
type PolicyAggregateNonCatalogItemResponseBodyCollection []*PolicyAggregateNonCatalogItemResponseBody

// PolicyAggregateNonCatalogItemResponseBody is used to define fields on
// response body types.
type PolicyAggregateNonCatalogItemResponseBody struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// url of the applied policy.
	URL string `form:"url" json:"url" xml:"url"`
	// policy_template links to key attributes of the template from which the item
	// originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the policy aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// kind is "gov#policy_aggregate_non_catalog_item".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyTemplateResponseBodyLink is used to define fields on response body
// types.
type PolicyTemplateResponseBodyLink struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyAggregateResponseBodyIndexCollection is used to define fields on
// response body types.
type PolicyAggregateResponseBodyIndexCollection []*PolicyAggregateResponseBodyIndex

// PolicyAggregateResponseBodyIndex is used to define fields on response body
// types.
type PolicyAggregateResponseBodyIndex struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Org represents a RightScale organization.
	Org *OrgResponseBody `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the policy aggregate update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// aggregate.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the policy aggregate.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which individual policy evaluations
	// run.
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials is the map of name to credential used to launch the policy.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the policy aggregate.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// running_project_ids is a the list of projects the policy aggregate is
	// currently running on.
	RunningProjectIds []uint `form:"running_project_ids,omitempty" json:"running_project_ids,omitempty" xml:"running_project_ids,omitempty"`
	// The number of applied policies running across all projects.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// The number of applied policies in an active state.
	ActiveCount *uint `form:"active_count,omitempty" json:"active_count,omitempty" xml:"active_count,omitempty"`
	// The number of applied policies in an error state.
	ErrorCount *uint `form:"error_count,omitempty" json:"error_count,omitempty" xml:"error_count,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyAggregateResponseBodyLinkCollection is used to define fields on
// response body types.
type PolicyAggregateResponseBodyLinkCollection []*PolicyAggregateResponseBodyLink

// PolicyAggregateResponseBodyLink is used to define fields on response body
// types.
type PolicyAggregateResponseBodyLink struct {
	// id identifies an policy aggregate by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy aggregate.
	Href string `form:"href" json:"href" xml:"href"`
	// incident_aggregate_href is the href of the incident aggregate.
	IncidentAggregateHref *string `form:"incident_aggregate_href,omitempty" json:"incident_aggregate_href,omitempty" xml:"incident_aggregate_href,omitempty"`
	// published_template links to key attributes of the published template from
	// which the policy aggregate originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy aggregate creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// kind is "gov#policy_aggregate".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ConfigurationOptionCreateTypeRequestBody is used to define fields on request
// body types.
type ConfigurationOptionCreateTypeRequestBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// value of option
	Value interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "PolicyAggregate" service.
func NewShowResponseBody(res *policyaggregateviews.PolicyAggregateView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:                    *res.ID,
		Name:                  *res.Name,
		Href:                  *res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Description:           res.Description,
		DocLink:               res.DocLink,
		CreatedAt:             res.CreatedAt,
		UpdatedAt:             res.UpdatedAt,
		Severity:              res.Severity,
		Category:              res.Category,
		Frequency:             res.Frequency,
		DryRun:                res.DryRun,
		SkipApprovals:         res.SkipApprovals,
		Status:                res.Status,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  *res.Kind,
	}
	if res.Org != nil {
		body.Org = marshalPolicyaggregateviewsOrgViewToOrgResponseBody(res.Org)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(res.PublishedTemplate)
	}
	if res.ProjectIds != nil {
		body.ProjectIds = make([]uint, len(res.ProjectIds))
		for i, val := range res.ProjectIds {
			body.ProjectIds[i] = val
		}
	}
	if res.ExcludedProjectIds != nil {
		body.ExcludedProjectIds = make([]uint, len(res.ExcludedProjectIds))
		for i, val := range res.ExcludedProjectIds {
			body.ExcludedProjectIds[i] = val
		}
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalPolicyaggregateviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if res.Credentials != nil {
		body.Credentials = make(map[string]string, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			tv := val
			body.Credentials[tk] = tv
		}
	}
	if res.RunningProjectIds != nil {
		body.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			body.RunningProjectIds[i] = val
		}
	}
	if res.Errors != nil {
		body.Errors = make(map[string]string, len(res.Errors))
		for key, val := range res.Errors {
			tk := key
			tv := val
			body.Errors[tk] = tv
		}
	}
	if res.Items != nil {
		body.Items = make([]*PolicyAggregateItemResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalPolicyaggregateviewsPolicyAggregateItemViewToPolicyAggregateItemResponseBody(val)
		}
	}
	return body
}

// NewShowResponseBodyIndex builds the HTTP response body from the result of
// the "show" endpoint of the "PolicyAggregate" service.
func NewShowResponseBodyIndex(res *policyaggregateviews.PolicyAggregateView) *ShowResponseBodyIndex {
	body := &ShowResponseBodyIndex{
		ID:                    *res.ID,
		Name:                  *res.Name,
		Href:                  *res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Description:           res.Description,
		DocLink:               res.DocLink,
		CreatedAt:             res.CreatedAt,
		UpdatedAt:             res.UpdatedAt,
		Severity:              res.Severity,
		Category:              res.Category,
		Frequency:             res.Frequency,
		DryRun:                res.DryRun,
		SkipApprovals:         res.SkipApprovals,
		Status:                res.Status,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  *res.Kind,
	}
	if res.Org != nil {
		body.Org = marshalPolicyaggregateviewsOrgViewToOrgResponseBody(res.Org)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(res.PublishedTemplate)
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalPolicyaggregateviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if res.Credentials != nil {
		body.Credentials = make(map[string]string, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			tv := val
			body.Credentials[tk] = tv
		}
	}
	if res.RunningProjectIds != nil {
		body.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			body.RunningProjectIds[i] = val
		}
	}
	return body
}

// NewShowResponseBodySource builds the HTTP response body from the result of
// the "show" endpoint of the "PolicyAggregate" service.
func NewShowResponseBodySource(res *policyaggregateviews.PolicyAggregateView) *ShowResponseBodySource {
	body := &ShowResponseBodySource{
		ID:   *res.ID,
		Name: *res.Name,
		Href: *res.Href,
		Kind: *res.Kind,
	}
	if res.Org != nil {
		body.Org = marshalPolicyaggregateviewsOrgViewToOrgResponseBody(res.Org)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodySource(res.PublishedTemplate)
	}
	return body
}

// NewShowResponseBodyLink builds the HTTP response body from the result of the
// "show" endpoint of the "PolicyAggregate" service.
func NewShowResponseBodyLink(res *policyaggregateviews.PolicyAggregateView) *ShowResponseBodyLink {
	body := &ShowResponseBodyLink{
		ID:                    *res.ID,
		Name:                  *res.Name,
		Href:                  *res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		CreatedAt:             res.CreatedAt,
		Kind:                  *res.Kind,
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(res.PublishedTemplate)
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	return body
}

// NewShowNonCatalogResponseBody builds the HTTP response body from the result
// of the "show_non_catalog" endpoint of the "PolicyAggregate" service.
func NewShowNonCatalogResponseBody(res *policyaggregateviews.PolicyAggregateNonCatalogView) *ShowNonCatalogResponseBody {
	body := &ShowNonCatalogResponseBody{
		Href:                  *res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  *res.Kind,
	}
	if res.RunningProjectIds != nil {
		body.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			body.RunningProjectIds[i] = val
		}
	}
	if res.Items != nil {
		body.Items = make([]*PolicyAggregateNonCatalogItemResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalPolicyaggregateviewsPolicyAggregateNonCatalogItemViewToPolicyAggregateNonCatalogItemResponseBody(val)
		}
	}
	return body
}

// NewShowNonCatalogResponseBodyIndex builds the HTTP response body from the
// result of the "show_non_catalog" endpoint of the "PolicyAggregate" service.
func NewShowNonCatalogResponseBodyIndex(res *policyaggregateviews.PolicyAggregateNonCatalogView) *ShowNonCatalogResponseBodyIndex {
	body := &ShowNonCatalogResponseBodyIndex{
		Href:                  *res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Count:                 res.Count,
		ActiveCount:           res.ActiveCount,
		ErrorCount:            res.ErrorCount,
		Kind:                  *res.Kind,
	}
	if res.RunningProjectIds != nil {
		body.RunningProjectIds = make([]uint, len(res.RunningProjectIds))
		for i, val := range res.RunningProjectIds {
			body.RunningProjectIds[i] = val
		}
	}
	return body
}

// NewShowNonCatalogResponseBodyLink builds the HTTP response body from the
// result of the "show_non_catalog" endpoint of the "PolicyAggregate" service.
func NewShowNonCatalogResponseBodyLink(res *policyaggregateviews.PolicyAggregateNonCatalogView) *ShowNonCatalogResponseBodyLink {
	body := &ShowNonCatalogResponseBodyLink{
		Href:                  *res.Href,
		IncidentAggregateHref: res.IncidentAggregateHref,
		Kind:                  *res.Kind,
	}
	return body
}

// NewIndexOKResponseBody builds the HTTP response body from the result of the
// "index" endpoint of the "PolicyAggregate" service.
func NewIndexOKResponseBody(res *policyaggregateviews.PolicyAggregateListView) *IndexOKResponseBody {
	body := &IndexOKResponseBody{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*PolicyAggregateResponseBodyIndex, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalPolicyaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyIndex(val)
		}
	}
	return body
}

// NewIndexOKResponseBodyLink builds the HTTP response body from the result of
// the "index" endpoint of the "PolicyAggregate" service.
func NewIndexOKResponseBodyLink(res *policyaggregateviews.PolicyAggregateListView) *IndexOKResponseBodyLink {
	body := &IndexOKResponseBodyLink{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*PolicyAggregateResponseBodyLink, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalPolicyaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink(val)
		}
	}
	return body
}

// NewCreateUnprocessableEntityResponseBody builds the HTTP response body from
// the result of the "create" endpoint of the "PolicyAggregate" service.
func NewCreateUnprocessableEntityResponseBody(res *goa.ServiceError) *CreateUnprocessableEntityResponseBody {
	body := &CreateUnprocessableEntityResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "PolicyAggregate" service.
func NewCreateUnauthorizedResponseBody(res *goa.ServiceError) *CreateUnauthorizedResponseBody {
	body := &CreateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateForbiddenResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "PolicyAggregate" service.
func NewCreateForbiddenResponseBody(res *goa.ServiceError) *CreateForbiddenResponseBody {
	body := &CreateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "PolicyAggregate" service.
func NewCreateBadRequestResponseBody(res *goa.ServiceError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBadGatewayResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "PolicyAggregate" service.
func NewCreateBadGatewayResponseBody(res *goa.ServiceError) *CreateBadGatewayResponseBody {
	body := &CreateBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInternalErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "PolicyAggregate" service.
func NewCreateInternalErrorResponseBody(res *goa.ServiceError) *CreateInternalErrorResponseBody {
	body := &CreateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyAggregate" service.
func NewUpdateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "PolicyAggregate" service.
func NewUpdateForbiddenResponseBody(res *goa.ServiceError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyAggregate" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadGatewayResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyAggregate" service.
func NewUpdateBadGatewayResponseBody(res *goa.ServiceError) *UpdateBadGatewayResponseBody {
	body := &UpdateBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyAggregate" service.
func NewUpdateInternalErrorResponseBody(res *goa.ServiceError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "PolicyAggregate" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyAggregate" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "PolicyAggregate" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyAggregate" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadGatewayResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyAggregate" service.
func NewDeleteBadGatewayResponseBody(res *goa.ServiceError) *DeleteBadGatewayResponseBody {
	body := &DeleteBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyAggregate" service.
func NewDeleteInternalErrorResponseBody(res *goa.ServiceError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "PolicyAggregate" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "PolicyAggregate" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "PolicyAggregate" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "PolicyAggregate" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "PolicyAggregate" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "PolicyAggregate" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogUnauthorizedResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "PolicyAggregate"
// service.
func NewShowNonCatalogUnauthorizedResponseBody(res *goa.ServiceError) *ShowNonCatalogUnauthorizedResponseBody {
	body := &ShowNonCatalogUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogForbiddenResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "PolicyAggregate"
// service.
func NewShowNonCatalogForbiddenResponseBody(res *goa.ServiceError) *ShowNonCatalogForbiddenResponseBody {
	body := &ShowNonCatalogForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogBadRequestResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "PolicyAggregate"
// service.
func NewShowNonCatalogBadRequestResponseBody(res *goa.ServiceError) *ShowNonCatalogBadRequestResponseBody {
	body := &ShowNonCatalogBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogBadGatewayResponseBody builds the HTTP response body from
// the result of the "show_non_catalog" endpoint of the "PolicyAggregate"
// service.
func NewShowNonCatalogBadGatewayResponseBody(res *goa.ServiceError) *ShowNonCatalogBadGatewayResponseBody {
	body := &ShowNonCatalogBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNonCatalogInternalErrorResponseBody builds the HTTP response body
// from the result of the "show_non_catalog" endpoint of the "PolicyAggregate"
// service.
func NewShowNonCatalogInternalErrorResponseBody(res *goa.ServiceError) *ShowNonCatalogInternalErrorResponseBody {
	body := &ShowNonCatalogInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexUnauthorizedResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "PolicyAggregate" service.
func NewIndexUnauthorizedResponseBody(res *goa.ServiceError) *IndexUnauthorizedResponseBody {
	body := &IndexUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexForbiddenResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "PolicyAggregate" service.
func NewIndexForbiddenResponseBody(res *goa.ServiceError) *IndexForbiddenResponseBody {
	body := &IndexForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadRequestResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "PolicyAggregate" service.
func NewIndexBadRequestResponseBody(res *goa.ServiceError) *IndexBadRequestResponseBody {
	body := &IndexBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadGatewayResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "PolicyAggregate" service.
func NewIndexBadGatewayResponseBody(res *goa.ServiceError) *IndexBadGatewayResponseBody {
	body := &IndexBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexInternalErrorResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "PolicyAggregate" service.
func NewIndexInternalErrorResponseBody(res *goa.ServiceError) *IndexInternalErrorResponseBody {
	body := &IndexInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePayload builds a PolicyAggregate service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, orgID uint, apiVersion string, token *string) *policyaggregate.CreatePayload {
	v := &policyaggregate.CreatePayload{
		Name:         *body.Name,
		Description:  body.Description,
		TemplateHref: *body.TemplateHref,
		Severity:     body.Severity,
	}
	if body.AllProjects != nil {
		v.AllProjects = *body.AllProjects
	}
	if body.Frequency != nil {
		v.Frequency = *body.Frequency
	}
	if body.DryRun != nil {
		v.DryRun = *body.DryRun
	}
	if body.SkipApprovals != nil {
		v.SkipApprovals = *body.SkipApprovals
	}
	if body.ProjectIds != nil {
		v.ProjectIds = make([]uint, len(body.ProjectIds))
		for i, val := range body.ProjectIds {
			v.ProjectIds[i] = val
		}
	}
	if body.AllProjects == nil {
		v.AllProjects = false
	}
	if body.Frequency == nil {
		v.Frequency = "15 minutes"
	}
	if body.DryRun == nil {
		v.DryRun = false
	}
	if body.SkipApprovals == nil {
		v.SkipApprovals = false
	}
	if body.Options != nil {
		v.Options = make([]*policyaggregate.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionCreateTypeRequestBodyToPolicyaggregateConfigurationOptionCreateType(val)
		}
	}
	if body.Credentials != nil {
		v.Credentials = make(map[string]string, len(body.Credentials))
		for key, val := range body.Credentials {
			tk := key
			tv := val
			v.Credentials[tk] = tv
		}
	}
	v.OrgID = orgID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewUpdatePayload builds a PolicyAggregate service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, orgID uint, policyAggregateID string, apiVersion string, token *string) *policyaggregate.UpdatePayload {
	v := &policyaggregate.UpdatePayload{
		Name:          body.Name,
		Description:   body.Description,
		Frequency:     body.Frequency,
		DryRun:        body.DryRun,
		SkipApprovals: body.SkipApprovals,
		Severity:      body.Severity,
	}
	if body.ProjectIds != nil {
		v.ProjectIds = make([]uint, len(body.ProjectIds))
		for i, val := range body.ProjectIds {
			v.ProjectIds[i] = val
		}
	}
	if body.ExcludedProjectIds != nil {
		v.ExcludedProjectIds = make([]uint, len(body.ExcludedProjectIds))
		for i, val := range body.ExcludedProjectIds {
			v.ExcludedProjectIds[i] = val
		}
	}
	if body.Options != nil {
		v.Options = make([]*policyaggregate.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionCreateTypeRequestBodyToPolicyaggregateConfigurationOptionCreateType(val)
		}
	}
	v.OrgID = orgID
	v.PolicyAggregateID = policyAggregateID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewDeletePayload builds a PolicyAggregate service delete endpoint payload.
func NewDeletePayload(orgID uint, policyAggregateID string, apiVersion string, token *string) *policyaggregate.DeletePayload {
	v := &policyaggregate.DeletePayload{}
	v.OrgID = orgID
	v.PolicyAggregateID = policyAggregateID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewShowPayload builds a PolicyAggregate service show endpoint payload.
func NewShowPayload(orgID uint, policyAggregateID string, view *string, apiVersion string, token *string) *policyaggregate.ShowPayload {
	v := &policyaggregate.ShowPayload{}
	v.OrgID = orgID
	v.PolicyAggregateID = policyAggregateID
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewShowNonCatalogPayload builds a PolicyAggregate service show_non_catalog
// endpoint payload.
func NewShowNonCatalogPayload(orgID uint, view *string, apiVersion string, token *string) *policyaggregate.ShowNonCatalogPayload {
	v := &policyaggregate.ShowNonCatalogPayload{}
	v.OrgID = orgID
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewIndexPayload builds a PolicyAggregate service index endpoint payload.
func NewIndexPayload(orgID uint, view *string, name []string, apiVersion string, etag *string, token *string) *policyaggregate.IndexPayload {
	v := &policyaggregate.IndexPayload{}
	v.OrgID = orgID
	v.View = view
	v.Name = name
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TemplateHref == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("template_href", "body"))
	}
	if body.TemplateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.template_href", *body.TemplateHref, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if body.Frequency != nil {
		if !(*body.Frequency == "15 minutes" || *body.Frequency == "hourly" || *body.Frequency == "daily" || *body.Frequency == "weekly" || *body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", *body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionCreateTypeRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Frequency != nil {
		if !(*body.Frequency == "15 minutes" || *body.Frequency == "hourly" || *body.Frequency == "daily" || *body.Frequency == "weekly" || *body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", *body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionCreateTypeRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	return
}

// ValidateConfigurationOptionCreateTypeRequestBody runs the validations
// defined on ConfigurationOptionCreateTypeRequestBody
func ValidateConfigurationOptionCreateTypeRequestBody(body *ConfigurationOptionCreateTypeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
