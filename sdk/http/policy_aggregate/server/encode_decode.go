// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PolicyAggregate HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"

	policyaggregate "github.com/rightscale/policy_sdk/sdk/policy_aggregate"
	policyaggregateviews "github.com/rightscale/policy_sdk/sdk/policy_aggregate/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResponse returns an encoder for responses returned by the
// PolicyAggregate create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*policyaggregate.CreateResult)
		w.Header().Set("Location", res.Location)
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the
// PolicyAggregate create endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			orgID      uint
			apiVersion string
			token      *string

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreatePayload(&body, orgID, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateError returns an encoder for errors returned by the create
// PolicyAggregate endpoint.
func EncodeCreateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unprocessable_entity":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateUnprocessableEntityResponseBody(res)
			}
			w.Header().Set("goa-error", "unprocessable_entity")
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the
// PolicyAggregate update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the
// PolicyAggregate update endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			orgID             uint
			policyAggregateID string
			apiVersion        string
			token             *string

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		policyAggregateID = params["policy_aggregate_id"]
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdatePayload(&body, orgID, policyAggregateID, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateError returns an encoder for errors returned by the update
// PolicyAggregate endpoint.
func EncodeUpdateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the
// PolicyAggregate delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the
// PolicyAggregate delete endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orgID             uint
			policyAggregateID string
			apiVersion        string
			token             *string
			err               error

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		policyAggregateID = params["policy_aggregate_id"]
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeletePayload(orgID, policyAggregateID, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteError returns an encoder for errors returned by the delete
// PolicyAggregate endpoint.
func EncodeDeleteError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeShowResponse returns an encoder for responses returned by the
// PolicyAggregate show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*policyaggregateviews.PolicyAggregate)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewShowResponseBody(res.Projected)
		case "index":
			body = NewShowResponseBodyIndex(res.Projected)
		case "source":
			body = NewShowResponseBodySource(res.Projected)
		case "link":
			body = NewShowResponseBodyLink(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowRequest returns a decoder for requests sent to the PolicyAggregate
// show endpoint.
func DecodeShowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orgID             uint
			policyAggregateID string
			view              *string
			apiVersion        string
			token             *string
			err               error

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		policyAggregateID = params["policy_aggregate_id"]
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "source") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "source"}))
			}
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowPayload(orgID, policyAggregateID, view, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeShowError returns an encoder for errors returned by the show
// PolicyAggregate endpoint.
func EncodeShowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeShowNonCatalogResponse returns an encoder for responses returned by
// the PolicyAggregate show_non_catalog endpoint.
func EncodeShowNonCatalogResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*policyaggregateviews.PolicyAggregateNonCatalog)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewShowNonCatalogResponseBody(res.Projected)
		case "index":
			body = NewShowNonCatalogResponseBodyIndex(res.Projected)
		case "link":
			body = NewShowNonCatalogResponseBodyLink(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowNonCatalogRequest returns a decoder for requests sent to the
// PolicyAggregate show_non_catalog endpoint.
func DecodeShowNonCatalogRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orgID      uint
			view       *string
			apiVersion string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "index") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "index"}))
			}
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowNonCatalogPayload(orgID, view, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeShowNonCatalogError returns an encoder for errors returned by the
// show_non_catalog PolicyAggregate endpoint.
func EncodeShowNonCatalogError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNonCatalogInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeIndexResponse returns an encoder for responses returned by the
// PolicyAggregate index endpoint.
func EncodeIndexResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*policyaggregateviews.PolicyAggregateList)
		w.Header().Set("goa-view", res.View)
		if res.Projected.NotModified != nil && *res.Projected.NotModified == "true" {
			w.Header().Set("Etag", *res.Projected.Etag)
			w.WriteHeader(http.StatusNotModified)
			return nil
		}
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewIndexOKResponseBody(res.Projected)
		case "link":
			body = NewIndexOKResponseBodyLink(res.Projected)
		}
		if res.Projected.Etag != nil {
			w.Header().Set("Etag", *res.Projected.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIndexRequest returns a decoder for requests sent to the
// PolicyAggregate index endpoint.
func DecodeIndexRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			orgID      uint
			view       *string
			name       []string
			apiVersion string
			etag       *string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			orgIDRaw := params["org_id"]
			v, err2 := strconv.ParseUint(orgIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("orgID", orgIDRaw, "unsigned integer"))
			}
			orgID = uint(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default"}))
			}
		}
		name = r.URL.Query()["name"]
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-None-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIndexPayload(orgID, view, name, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeIndexError returns an encoder for errors returned by the index
// PolicyAggregate endpoint.
func EncodeIndexError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexBadGatewayResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewIndexInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalConfigurationOptionCreateTypeRequestBodyToPolicyaggregateConfigurationOptionCreateType
// builds a value of type *policyaggregate.ConfigurationOptionCreateType from a
// value of type *ConfigurationOptionCreateTypeRequestBody.
func unmarshalConfigurationOptionCreateTypeRequestBodyToPolicyaggregateConfigurationOptionCreateType(v *ConfigurationOptionCreateTypeRequestBody) *policyaggregate.ConfigurationOptionCreateType {
	if v == nil {
		return nil
	}
	res := &policyaggregate.ConfigurationOptionCreateType{
		Name:  *v.Name,
		Value: v.Value,
	}

	return res
}

// marshalPolicyaggregateviewsOrgViewToOrgResponseBody builds a value of type
// *OrgResponseBody from a value of type *policyaggregateviews.OrgView.
func marshalPolicyaggregateviewsOrgViewToOrgResponseBody(v *policyaggregateviews.OrgView) *OrgResponseBody {
	if v == nil {
		return nil
	}
	res := &OrgResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink
// builds a value of type *PublishedTemplateResponseBodyLink from a value of
// type *policyaggregateviews.PublishedTemplateView.
func marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(v *policyaggregateviews.PublishedTemplateView) *PublishedTemplateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PublishedTemplateResponseBodyLink{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Fingerprint: *v.Fingerprint,
		UpdatedAt:   v.UpdatedAt,
		BuiltIn:     v.BuiltIn,
		Kind:        *v.Kind,
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(v.UpdatedBy)
	}

	return res
}

// marshalPolicyaggregateviewsUserViewToUserResponseBody builds a value of type
// *UserResponseBody from a value of type *policyaggregateviews.UserView.
func marshalPolicyaggregateviewsUserViewToUserResponseBody(v *policyaggregateviews.UserView) *UserResponseBody {
	if v == nil {
		return nil
	}
	res := &UserResponseBody{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// marshalPolicyaggregateviewsConfigurationOptionViewToConfigurationOptionResponseBody
// builds a value of type *ConfigurationOptionResponseBody from a value of type
// *policyaggregateviews.ConfigurationOptionView.
func marshalPolicyaggregateviewsConfigurationOptionViewToConfigurationOptionResponseBody(v *policyaggregateviews.ConfigurationOptionView) *ConfigurationOptionResponseBody {
	if v == nil {
		return nil
	}
	res := &ConfigurationOptionResponseBody{
		Name:  *v.Name,
		Label: *v.Label,
		Type:  *v.Type,
		Value: v.Value,
	}
	if v.NoEcho != nil {
		res.NoEcho = *v.NoEcho
	}
	if v.NoEcho == nil {
		res.NoEcho = false
	}

	return res
}

// marshalPolicyaggregateviewsPolicyAggregateItemViewToPolicyAggregateItemResponseBody
// builds a value of type *PolicyAggregateItemResponseBody from a value of type
// *policyaggregateviews.PolicyAggregateItemView.
func marshalPolicyaggregateviewsPolicyAggregateItemViewToPolicyAggregateItemResponseBody(v *policyaggregateviews.PolicyAggregateItemView) *PolicyAggregateItemResponseBody {
	if v == nil {
		return nil
	}
	res := &PolicyAggregateItemResponseBody{
		ID:        *v.ID,
		URL:       *v.URL,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Status:    v.Status,
		Error:     v.Error,
		ErroredAt: v.ErroredAt,
		Kind:      *v.Kind,
	}
	if v.Project != nil {
		res.Project = marshalPolicyaggregateviewsProjectViewToProjectResponseBody(v.Project)
	}

	return res
}

// marshalPolicyaggregateviewsProjectViewToProjectResponseBody builds a value
// of type *ProjectResponseBody from a value of type
// *policyaggregateviews.ProjectView.
func marshalPolicyaggregateviewsProjectViewToProjectResponseBody(v *policyaggregateviews.ProjectView) *ProjectResponseBody {
	if v == nil {
		return nil
	}
	res := &ProjectResponseBody{
		ID:      *v.ID,
		Name:    *v.Name,
		OrgID:   *v.OrgID,
		OrgName: *v.OrgName,
	}

	return res
}

// marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodySource
// builds a value of type *PublishedTemplateResponseBodySource from a value of
// type *policyaggregateviews.PublishedTemplateView.
func marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodySource(v *policyaggregateviews.PublishedTemplateView) *PublishedTemplateResponseBodySource {
	if v == nil {
		return nil
	}
	res := &PublishedTemplateResponseBodySource{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Filename:    v.Filename,
		Source:      v.Source,
		Fingerprint: *v.Fingerprint,
		Kind:        *v.Kind,
	}

	return res
}

// marshalPolicyaggregateviewsPolicyAggregateNonCatalogItemViewToPolicyAggregateNonCatalogItemResponseBody
// builds a value of type *PolicyAggregateNonCatalogItemResponseBody from a
// value of type *policyaggregateviews.PolicyAggregateNonCatalogItemView.
func marshalPolicyaggregateviewsPolicyAggregateNonCatalogItemViewToPolicyAggregateNonCatalogItemResponseBody(v *policyaggregateviews.PolicyAggregateNonCatalogItemView) *PolicyAggregateNonCatalogItemResponseBody {
	if v == nil {
		return nil
	}
	res := &PolicyAggregateNonCatalogItemResponseBody{
		ID:          *v.ID,
		Name:        v.Name,
		Description: v.Description,
		URL:         *v.URL,
		Status:      v.Status,
		Error:       v.Error,
		ErroredAt:   v.ErroredAt,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		Severity:    v.Severity,
		Category:    v.Category,
		Frequency:   v.Frequency,
		DryRun:      v.DryRun,
		Kind:        *v.Kind,
	}
	if v.Project != nil {
		res.Project = marshalPolicyaggregateviewsProjectViewToProjectResponseBody(v.Project)
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = marshalPolicyaggregateviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(v.PolicyTemplate)
	}
	if v.CreatedBy != nil {
		res.CreatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(v.CreatedBy)
	}

	return res
}

// marshalPolicyaggregateviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink
// builds a value of type *PolicyTemplateResponseBodyLink from a value of type
// *policyaggregateviews.PolicyTemplateView.
func marshalPolicyaggregateviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(v *policyaggregateviews.PolicyTemplateView) *PolicyTemplateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PolicyTemplateResponseBodyLink{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Fingerprint: *v.Fingerprint,
		UpdatedAt:   v.UpdatedAt,
		Kind:        *v.Kind,
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(v.UpdatedBy)
	}

	return res
}

// marshalPolicyaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyIndex
// builds a value of type *PolicyAggregateResponseBodyIndex from a value of
// type *policyaggregateviews.PolicyAggregateView.
func marshalPolicyaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyIndex(v *policyaggregateviews.PolicyAggregateView) *PolicyAggregateResponseBodyIndex {
	if v == nil {
		return nil
	}
	res := &PolicyAggregateResponseBodyIndex{
		ID:                    *v.ID,
		Name:                  *v.Name,
		Href:                  *v.Href,
		IncidentAggregateHref: v.IncidentAggregateHref,
		Description:           v.Description,
		DocLink:               v.DocLink,
		CreatedAt:             v.CreatedAt,
		UpdatedAt:             v.UpdatedAt,
		Severity:              v.Severity,
		Category:              v.Category,
		Frequency:             v.Frequency,
		DryRun:                v.DryRun,
		SkipApprovals:         v.SkipApprovals,
		Status:                v.Status,
		Count:                 v.Count,
		ActiveCount:           v.ActiveCount,
		ErrorCount:            v.ErrorCount,
		Kind:                  *v.Kind,
	}
	if v.Org != nil {
		res.Org = marshalPolicyaggregateviewsOrgViewToOrgResponseBody(v.Org)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(v.PublishedTemplate)
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(v.CreatedBy)
	}
	if v.Options != nil {
		res.Options = make([]*ConfigurationOptionResponseBody, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = marshalPolicyaggregateviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]string, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}
	if v.RunningProjectIds != nil {
		res.RunningProjectIds = make([]uint, len(v.RunningProjectIds))
		for i, val := range v.RunningProjectIds {
			res.RunningProjectIds[i] = val
		}
	}

	return res
}

// marshalPolicyaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink
// builds a value of type *PolicyAggregateResponseBodyLink from a value of type
// *policyaggregateviews.PolicyAggregateView.
func marshalPolicyaggregateviewsPolicyAggregateViewToPolicyAggregateResponseBodyLink(v *policyaggregateviews.PolicyAggregateView) *PolicyAggregateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PolicyAggregateResponseBodyLink{
		ID:                    *v.ID,
		Name:                  *v.Name,
		Href:                  *v.Href,
		IncidentAggregateHref: v.IncidentAggregateHref,
		CreatedAt:             v.CreatedAt,
		Kind:                  *v.Kind,
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = marshalPolicyaggregateviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(v.PublishedTemplate)
	}
	if v.CreatedBy != nil {
		res.CreatedBy = marshalPolicyaggregateviewsUserViewToUserResponseBody(v.CreatedBy)
	}

	return res
}
