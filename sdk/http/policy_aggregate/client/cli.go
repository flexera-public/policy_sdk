// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PolicyAggregate HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	policyaggregate "github.com/rightscale/policy_sdk/sdk/policy_aggregate"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the PolicyAggregate create
// endpoint from CLI flags.
func BuildCreatePayload(policyAggregateCreateBody string, policyAggregateCreateOrgID string, policyAggregateCreateAPIVersion string, policyAggregateCreateToken string) (*policyaggregate.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(policyAggregateCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"all_projects\": false,\n      \"credentials\": {\n         \"Expedita ipsum iusto.\": \"Ab soluta qui quisquam.\"\n      },\n      \"description\": \"Delete unattached volumes after 24 hours.\",\n      \"dry_run\": false,\n      \"frequency\": \"daily\",\n      \"name\": \"unattached_volumes\",\n      \"options\": [\n         {\n            \"name\": \"cloud_vendor\",\n            \"value\": \"AWS\"\n         },\n         {\n            \"name\": \"email_list\",\n            \"value\": [\n               \"person1@domain.com\",\n               \"person2@domain.com\"\n            ]\n         }\n      ],\n      \"project_ids\": [\n         60072,\n         60073\n      ],\n      \"severity\": \"low\",\n      \"skip_approvals\": false,\n      \"template_href\": \"/api/governance/orgs/48673/published_templates/59\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.template_href", body.TemplateHref, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
		if !(body.Frequency == "15 minutes" || body.Frequency == "hourly" || body.Frequency == "daily" || body.Frequency == "weekly" || body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
		if body.Severity != nil {
			if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(policyAggregateCreateOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var apiVersion string
	{
		apiVersion = policyAggregateCreateAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if policyAggregateCreateToken != "" {
			token = &policyAggregateCreateToken
		}
	}
	v := &policyaggregate.CreatePayload{
		Name:          body.Name,
		Description:   body.Description,
		TemplateHref:  body.TemplateHref,
		AllProjects:   body.AllProjects,
		Frequency:     body.Frequency,
		DryRun:        body.DryRun,
		SkipApprovals: body.SkipApprovals,
		Severity:      body.Severity,
	}
	if body.ProjectIds != nil {
		v.ProjectIds = make([]uint, len(body.ProjectIds))
		for i, val := range body.ProjectIds {
			v.ProjectIds[i] = val
		}
	}
	if body.Options != nil {
		v.Options = make([]*policyaggregate.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = marshalConfigurationOptionCreateTypeRequestBodyToPolicyaggregateConfigurationOptionCreateType(val)
		}
	}
	if body.Credentials != nil {
		v.Credentials = make(map[string]string, len(body.Credentials))
		for key, val := range body.Credentials {
			tk := key
			tv := val
			v.Credentials[tk] = tv
		}
	}
	v.OrgID = orgID
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the PolicyAggregate update
// endpoint from CLI flags.
func BuildUpdatePayload(policyAggregateUpdateBody string, policyAggregateUpdateOrgID string, policyAggregateUpdatePolicyAggregateID string, policyAggregateUpdateAPIVersion string, policyAggregateUpdateToken string) (*policyaggregate.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(policyAggregateUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"description\": \"Delete unattached volumes after 24 hours.\",\n      \"dry_run\": false,\n      \"excluded_project_ids\": [\n         60073\n      ],\n      \"frequency\": \"daily\",\n      \"name\": \"unattached_volumes\",\n      \"options\": [\n         {\n            \"name\": \"cloud_vendor\",\n            \"value\": \"AWS\"\n         },\n         {\n            \"name\": \"email_list\",\n            \"value\": [\n               \"person1@domain.com\",\n               \"person2@domain.com\"\n            ]\n         }\n      ],\n      \"project_ids\": [\n         60072\n      ],\n      \"severity\": \"low\",\n      \"skip_approvals\": false\n   }'")
		}
		if body.Frequency != nil {
			if !(*body.Frequency == "15 minutes" || *body.Frequency == "hourly" || *body.Frequency == "daily" || *body.Frequency == "weekly" || *body.Frequency == "monthly") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", *body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
			}
		}
		if body.Severity != nil {
			if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(policyAggregateUpdateOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var policyAggregateID string
	{
		policyAggregateID = policyAggregateUpdatePolicyAggregateID
	}
	var apiVersion string
	{
		apiVersion = policyAggregateUpdateAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if policyAggregateUpdateToken != "" {
			token = &policyAggregateUpdateToken
		}
	}
	v := &policyaggregate.UpdatePayload{
		Name:          body.Name,
		Description:   body.Description,
		Frequency:     body.Frequency,
		DryRun:        body.DryRun,
		SkipApprovals: body.SkipApprovals,
		Severity:      body.Severity,
	}
	if body.ProjectIds != nil {
		v.ProjectIds = make([]uint, len(body.ProjectIds))
		for i, val := range body.ProjectIds {
			v.ProjectIds[i] = val
		}
	}
	if body.ExcludedProjectIds != nil {
		v.ExcludedProjectIds = make([]uint, len(body.ExcludedProjectIds))
		for i, val := range body.ExcludedProjectIds {
			v.ExcludedProjectIds[i] = val
		}
	}
	if body.Options != nil {
		v.Options = make([]*policyaggregate.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = marshalConfigurationOptionCreateTypeRequestBodyToPolicyaggregateConfigurationOptionCreateType(val)
		}
	}
	v.OrgID = orgID
	v.PolicyAggregateID = policyAggregateID
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the PolicyAggregate delete
// endpoint from CLI flags.
func BuildDeletePayload(policyAggregateDeleteOrgID string, policyAggregateDeletePolicyAggregateID string, policyAggregateDeleteAPIVersion string, policyAggregateDeleteToken string) (*policyaggregate.DeletePayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(policyAggregateDeleteOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var policyAggregateID string
	{
		policyAggregateID = policyAggregateDeletePolicyAggregateID
	}
	var apiVersion string
	{
		apiVersion = policyAggregateDeleteAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if policyAggregateDeleteToken != "" {
			token = &policyAggregateDeleteToken
		}
	}
	v := &policyaggregate.DeletePayload{}
	v.OrgID = orgID
	v.PolicyAggregateID = policyAggregateID
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}

// BuildShowPayload builds the payload for the PolicyAggregate show endpoint
// from CLI flags.
func BuildShowPayload(policyAggregateShowOrgID string, policyAggregateShowPolicyAggregateID string, policyAggregateShowView string, policyAggregateShowAPIVersion string, policyAggregateShowToken string) (*policyaggregate.ShowPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(policyAggregateShowOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var policyAggregateID string
	{
		policyAggregateID = policyAggregateShowPolicyAggregateID
	}
	var view *string
	{
		if policyAggregateShowView != "" {
			view = &policyAggregateShowView
			if view != nil {
				if !(*view == "default" || *view == "source") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "source"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var apiVersion string
	{
		apiVersion = policyAggregateShowAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if policyAggregateShowToken != "" {
			token = &policyAggregateShowToken
		}
	}
	v := &policyaggregate.ShowPayload{}
	v.OrgID = orgID
	v.PolicyAggregateID = policyAggregateID
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}

// BuildShowNonCatalogPayload builds the payload for the PolicyAggregate
// show_non_catalog endpoint from CLI flags.
func BuildShowNonCatalogPayload(policyAggregateShowNonCatalogOrgID string, policyAggregateShowNonCatalogView string, policyAggregateShowNonCatalogAPIVersion string, policyAggregateShowNonCatalogToken string) (*policyaggregate.ShowNonCatalogPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(policyAggregateShowNonCatalogOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var view *string
	{
		if policyAggregateShowNonCatalogView != "" {
			view = &policyAggregateShowNonCatalogView
			if view != nil {
				if !(*view == "default" || *view == "index") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "index"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var apiVersion string
	{
		apiVersion = policyAggregateShowNonCatalogAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if policyAggregateShowNonCatalogToken != "" {
			token = &policyAggregateShowNonCatalogToken
		}
	}
	v := &policyaggregate.ShowNonCatalogPayload{}
	v.OrgID = orgID
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v, nil
}

// BuildIndexPayload builds the payload for the PolicyAggregate index endpoint
// from CLI flags.
func BuildIndexPayload(policyAggregateIndexOrgID string, policyAggregateIndexView string, policyAggregateIndexName string, policyAggregateIndexAPIVersion string, policyAggregateIndexEtag string, policyAggregateIndexToken string) (*policyaggregate.IndexPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(policyAggregateIndexOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var view *string
	{
		if policyAggregateIndexView != "" {
			view = &policyAggregateIndexView
			if view != nil {
				if !(*view == "default") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var name []string
	{
		if policyAggregateIndexName != "" {
			err = json.Unmarshal([]byte(policyAggregateIndexName), &name)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for name, example of valid JSON:\n%s", "'[\n      \"Tag Checker Policy\"\n   ]'")
			}
		}
	}
	var apiVersion string
	{
		apiVersion = policyAggregateIndexAPIVersion
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var etag *string
	{
		if policyAggregateIndexEtag != "" {
			etag = &policyAggregateIndexEtag
		}
	}
	var token *string
	{
		if policyAggregateIndexToken != "" {
			token = &policyAggregateIndexToken
		}
	}
	v := &policyaggregate.IndexPayload{}
	v.OrgID = orgID
	v.View = view
	v.Name = name
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v, nil
}
