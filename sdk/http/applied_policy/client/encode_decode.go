// Code generated by goa v3.1.3, DO NOT EDIT.
//
// AppliedPolicy HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design -o .

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	appliedpolicy "github.com/rightscale/policy_sdk/sdk/applied_policy"
	appliedpolicyviews "github.com/rightscale/policy_sdk/sdk/applied_policy/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "AppliedPolicy" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*appliedpolicy.CreatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "create", "*appliedpolicy.CreatePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAppliedPolicyPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the
// AppliedPolicy create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "create", "*appliedpolicy.CreatePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("AppliedPolicy", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// AppliedPolicy create endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "unprocessable_entity" (type *goa.ServiceError): http.StatusUnprocessableEntity
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "create", err)
			}
			p := NewCreateAppliedPolicyOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &appliedpolicyviews.AppliedPolicy{Projected: p, View: view}
			if err = appliedpolicyviews.ValidateAppliedPolicy(vres); err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "create", err)
			}
			res := appliedpolicy.NewAppliedPolicy(vres)
			return res, nil
		case http.StatusUnprocessableEntity:
			var (
				body CreateUnprocessableEntityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "create", err)
			}
			err = ValidateCreateUnprocessableEntityResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "create", err)
			}
			return nil, NewCreateUnprocessableEntity(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "create", err)
			}
			err = ValidateCreateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "create", err)
			}
			return nil, NewCreateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "create", err)
			}
			err = ValidateCreateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "create", err)
			}
			return nil, NewCreateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body CreateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "create", err)
			}
			err = ValidateCreateBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "create", err)
			}
			return nil, NewCreateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "create", err)
			}
			err = ValidateCreateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "create", err)
			}
			return nil, NewCreateInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "AppliedPolicy" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
		policyID  string
	)
	{
		p, ok := v.(*appliedpolicy.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "delete", "*appliedpolicy.DeletePayload", v)
		}
		projectID = p.ProjectID
		policyID = p.PolicyID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteAppliedPolicyPath(projectID, policyID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the
// AppliedPolicy delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "delete", "*appliedpolicy.DeletePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// AppliedPolicy delete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body DeleteBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "delete", err)
			}
			err = ValidateDeleteBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "delete", err)
			}
			return nil, NewDeleteBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "delete", err)
			}
			err = ValidateDeleteInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "delete", err)
			}
			return nil, NewDeleteInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "AppliedPolicy" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
		policyID  string
	)
	{
		p, ok := v.(*appliedpolicy.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "show", "*appliedpolicy.ShowPayload", v)
		}
		projectID = p.ProjectID
		policyID = p.PolicyID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowAppliedPolicyPath(projectID, policyID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the AppliedPolicy
// show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "show", "*appliedpolicy.ShowPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// AppliedPolicy show endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show", err)
			}
			p := NewShowAppliedPolicyOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &appliedpolicyviews.AppliedPolicy{Projected: p, View: view}
			if err = appliedpolicyviews.ValidateAppliedPolicy(vres); err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show", err)
			}
			res := appliedpolicy.NewAppliedPolicy(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show", err)
			}
			err = ValidateShowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show", err)
			}
			err = ValidateShowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show", err)
			}
			err = ValidateShowBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildShowStatusRequest instantiates a HTTP request object with method and
// path set to call the "AppliedPolicy" service "show_status" endpoint
func (c *Client) BuildShowStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
		policyID  string
	)
	{
		p, ok := v.(*appliedpolicy.ShowStatusPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "show_status", "*appliedpolicy.ShowStatusPayload", v)
		}
		projectID = p.ProjectID
		policyID = p.PolicyID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowStatusAppliedPolicyPath(projectID, policyID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "show_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowStatusRequest returns an encoder for requests sent to the
// AppliedPolicy show_status server.
func EncodeShowStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.ShowStatusPayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "show_status", "*appliedpolicy.ShowStatusPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeShowStatusResponse returns a decoder for responses returned by the
// AppliedPolicy show_status endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeShowStatusResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_status", err)
			}
			p := NewShowStatusAppliedPolicyStatusOK(&body)
			view := "default"
			vres := &appliedpolicyviews.AppliedPolicyStatus{Projected: p, View: view}
			if err = appliedpolicyviews.ValidateAppliedPolicyStatus(vres); err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_status", err)
			}
			res := appliedpolicy.NewAppliedPolicyStatus(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowStatusNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_status", err)
			}
			err = ValidateShowStatusNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_status", err)
			}
			return nil, NewShowStatusNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowStatusUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_status", err)
			}
			err = ValidateShowStatusUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_status", err)
			}
			return nil, NewShowStatusUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowStatusForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_status", err)
			}
			err = ValidateShowStatusForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_status", err)
			}
			return nil, NewShowStatusForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowStatusBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_status", err)
			}
			err = ValidateShowStatusBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_status", err)
			}
			return nil, NewShowStatusBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowStatusBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_status", err)
			}
			err = ValidateShowStatusBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_status", err)
			}
			return nil, NewShowStatusBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowStatusInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_status", err)
			}
			err = ValidateShowStatusInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_status", err)
			}
			return nil, NewShowStatusInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "show_status", resp.StatusCode, string(body))
		}
	}
}

// BuildShowLogRequest instantiates a HTTP request object with method and path
// set to call the "AppliedPolicy" service "show_log" endpoint
func (c *Client) BuildShowLogRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
		policyID  string
	)
	{
		p, ok := v.(*appliedpolicy.ShowLogPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "show_log", "*appliedpolicy.ShowLogPayload", v)
		}
		projectID = p.ProjectID
		policyID = p.PolicyID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowLogAppliedPolicyPath(projectID, policyID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "show_log", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowLogRequest returns an encoder for requests sent to the
// AppliedPolicy show_log server.
func EncodeShowLogRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.ShowLogPayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "show_log", "*appliedpolicy.ShowLogPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeShowLogResponse returns a decoder for responses returned by the
// AppliedPolicy show_log endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeShowLogResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowLogResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_log", err)
			}
			var (
				etag         *string
				lastModified *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			lastModifiedRaw := resp.Header.Get("Last-Modified")
			if lastModifiedRaw != "" {
				lastModified = &lastModifiedRaw
			}
			if lastModified != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("lastModified", *lastModified, goa.FormatDateTime))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			p := NewShowLogAppliedPolicyLogOK(body, etag, lastModified)
			view := "default"
			vres := &appliedpolicyviews.AppliedPolicyLog{Projected: p, View: view}
			if err = appliedpolicyviews.ValidateAppliedPolicyLog(vres); err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			res := appliedpolicy.NewAppliedPolicyLog(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowLogNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_log", err)
			}
			err = ValidateShowLogNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			return nil, NewShowLogNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowLogUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_log", err)
			}
			err = ValidateShowLogUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			return nil, NewShowLogUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowLogForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_log", err)
			}
			err = ValidateShowLogForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			return nil, NewShowLogForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowLogBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_log", err)
			}
			err = ValidateShowLogBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			return nil, NewShowLogBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowLogBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_log", err)
			}
			err = ValidateShowLogBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			return nil, NewShowLogBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowLogInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "show_log", err)
			}
			err = ValidateShowLogInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "show_log", err)
			}
			return nil, NewShowLogInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "show_log", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "AppliedPolicy" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*appliedpolicy.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "index", "*appliedpolicy.IndexPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexAppliedPolicyPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the AppliedPolicy
// index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "index", "*appliedpolicy.IndexPayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("If-None-Match", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		for _, value := range p.Name {
			values.Add("name", value)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// AppliedPolicy index endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag string
				err  error
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			p := NewIndexAppliedPolicyListNotModified(etag)
			tmp := "true"
			p.NotModified = &tmp
			view := resp.Header.Get("goa-view")
			vres := &appliedpolicyviews.AppliedPolicyList{Projected: p, View: view}
			res := appliedpolicy.NewAppliedPolicyList(vres)
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "index", err)
			}
			var (
				etag string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			p := NewIndexAppliedPolicyListOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &appliedpolicyviews.AppliedPolicyList{Projected: p, View: view}
			if err = appliedpolicyviews.ValidateAppliedPolicyList(vres); err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			res := appliedpolicy.NewAppliedPolicyList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "index", err)
			}
			err = ValidateIndexUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "index", err)
			}
			err = ValidateIndexForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "index", resp.StatusCode, string(body))
		}
	}
}

// BuildEvaluateRequest instantiates a HTTP request object with method and path
// set to call the "AppliedPolicy" service "evaluate" endpoint
func (c *Client) BuildEvaluateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
		policyID  string
	)
	{
		p, ok := v.(*appliedpolicy.EvaluatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "evaluate", "*appliedpolicy.EvaluatePayload", v)
		}
		projectID = p.ProjectID
		policyID = p.PolicyID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EvaluateAppliedPolicyPath(projectID, policyID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "evaluate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEvaluateRequest returns an encoder for requests sent to the
// AppliedPolicy evaluate server.
func EncodeEvaluateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.EvaluatePayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "evaluate", "*appliedpolicy.EvaluatePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeEvaluateResponse returns a decoder for responses returned by the
// AppliedPolicy evaluate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeEvaluateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeEvaluateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body EvaluateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "evaluate", err)
			}
			err = ValidateEvaluateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "evaluate", err)
			}
			return nil, NewEvaluateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body EvaluateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "evaluate", err)
			}
			err = ValidateEvaluateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "evaluate", err)
			}
			return nil, NewEvaluateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body EvaluateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "evaluate", err)
			}
			err = ValidateEvaluateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "evaluate", err)
			}
			return nil, NewEvaluateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body EvaluateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "evaluate", err)
			}
			err = ValidateEvaluateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "evaluate", err)
			}
			return nil, NewEvaluateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body EvaluateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "evaluate", err)
			}
			err = ValidateEvaluateBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "evaluate", err)
			}
			return nil, NewEvaluateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body EvaluateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "evaluate", err)
			}
			err = ValidateEvaluateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "evaluate", err)
			}
			return nil, NewEvaluateInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "evaluate", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "AppliedPolicy" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
		policyID  string
	)
	{
		p, ok := v.(*appliedpolicy.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("AppliedPolicy", "update", "*appliedpolicy.UpdatePayload", v)
		}
		projectID = p.ProjectID
		policyID = p.PolicyID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateAppliedPolicyPath(projectID, policyID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("AppliedPolicy", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the
// AppliedPolicy update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*appliedpolicy.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("AppliedPolicy", "update", "*appliedpolicy.UpdatePayload", v)
		}
		{
			head := p.APIVersion
			req.Header.Set("Api-Version", head)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("AppliedPolicy", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// AppliedPolicy update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body UpdateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "update", err)
			}
			err = ValidateUpdateBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "update", err)
			}
			return nil, NewUpdateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("AppliedPolicy", "update", err)
			}
			err = ValidateUpdateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("AppliedPolicy", "update", err)
			}
			return nil, NewUpdateInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("AppliedPolicy", "update", resp.StatusCode, string(body))
		}
	}
}

// marshalAppliedpolicyConfigurationOptionCreateTypeToConfigurationOptionCreateTypeRequestBody
// builds a value of type *ConfigurationOptionCreateTypeRequestBody from a
// value of type *appliedpolicy.ConfigurationOptionCreateType.
func marshalAppliedpolicyConfigurationOptionCreateTypeToConfigurationOptionCreateTypeRequestBody(v *appliedpolicy.ConfigurationOptionCreateType) *ConfigurationOptionCreateTypeRequestBody {
	if v == nil {
		return nil
	}
	res := &ConfigurationOptionCreateTypeRequestBody{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// marshalConfigurationOptionCreateTypeRequestBodyToAppliedpolicyConfigurationOptionCreateType
// builds a value of type *appliedpolicy.ConfigurationOptionCreateType from a
// value of type *ConfigurationOptionCreateTypeRequestBody.
func marshalConfigurationOptionCreateTypeRequestBodyToAppliedpolicyConfigurationOptionCreateType(v *ConfigurationOptionCreateTypeRequestBody) *appliedpolicy.ConfigurationOptionCreateType {
	if v == nil {
		return nil
	}
	res := &appliedpolicy.ConfigurationOptionCreateType{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// unmarshalProjectResponseBodyToAppliedpolicyviewsProjectView builds a value
// of type *appliedpolicyviews.ProjectView from a value of type
// *ProjectResponseBody.
func unmarshalProjectResponseBodyToAppliedpolicyviewsProjectView(v *ProjectResponseBody) *appliedpolicyviews.ProjectView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.ProjectView{
		ID:      v.ID,
		Name:    v.Name,
		OrgID:   v.OrgID,
		OrgName: v.OrgName,
	}

	return res
}

// unmarshalPolicyTemplateResponseBodyToAppliedpolicyviewsPolicyTemplateView
// builds a value of type *appliedpolicyviews.PolicyTemplateView from a value
// of type *PolicyTemplateResponseBody.
func unmarshalPolicyTemplateResponseBodyToAppliedpolicyviewsPolicyTemplateView(v *PolicyTemplateResponseBody) *appliedpolicyviews.PolicyTemplateView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.PolicyTemplateView{
		ID:               v.ID,
		Name:             v.Name,
		ProjectID:        v.ProjectID,
		RsPtVer:          v.RsPtVer,
		ShortDescription: v.ShortDescription,
		LongDescription:  v.LongDescription,
		DocLink:          v.DocLink,
		DefaultFrequency: v.DefaultFrequency,
		Href:             v.Href,
		Filename:         v.Filename,
		Source:           v.Source,
		Fingerprint:      v.Fingerprint,
		Category:         v.Category,
		CreatedAt:        v.CreatedAt,
		UpdatedAt:        v.UpdatedAt,
		Severity:         v.Severity,
		Tenancy:          v.Tenancy,
		Kind:             v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*appliedpolicyviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = unmarshalPermissionResponseBodyToAppliedpolicyviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*appliedpolicyviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToAppliedpolicyviewsParameterView(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*appliedpolicyviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = unmarshalCredentialsResponseBodyToAppliedpolicyviewsCredentialsView(val)
		}
	}

	return res
}

// unmarshalUserResponseBodyToAppliedpolicyviewsUserView builds a value of type
// *appliedpolicyviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToAppliedpolicyviewsUserView(v *UserResponseBody) *appliedpolicyviews.UserView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalPermissionResponseBodyToAppliedpolicyviewsPermissionView builds a
// value of type *appliedpolicyviews.PermissionView from a value of type
// *PermissionResponseBody.
func unmarshalPermissionResponseBodyToAppliedpolicyviewsPermissionView(v *PermissionResponseBody) *appliedpolicyviews.PermissionView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.PermissionView{
		Name:  v.Name,
		Label: v.Label,
	}
	res.Resources = make([]string, len(v.Resources))
	for i, val := range v.Resources {
		res.Resources[i] = val
	}
	res.Actions = make([]string, len(v.Actions))
	for i, val := range v.Actions {
		res.Actions[i] = val
	}

	return res
}

// unmarshalParameterResponseBodyToAppliedpolicyviewsParameterView builds a
// value of type *appliedpolicyviews.ParameterView from a value of type
// *ParameterResponseBody.
func unmarshalParameterResponseBodyToAppliedpolicyviewsParameterView(v *ParameterResponseBody) *appliedpolicyviews.ParameterView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.ParameterView{
		Name:                  v.Name,
		Type:                  v.Type,
		Label:                 v.Label,
		Index:                 v.Index,
		Category:              v.Category,
		Description:           v.Description,
		Default:               v.Default,
		NoEcho:                v.NoEcho,
		MinLength:             v.MinLength,
		MaxLength:             v.MaxLength,
		MinValue:              v.MinValue,
		MaxValue:              v.MaxValue,
		ConstraintDescription: v.ConstraintDescription,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}
	if v.AllowedValues != nil {
		res.AllowedValues = make([]interface{}, len(v.AllowedValues))
		for i, val := range v.AllowedValues {
			res.AllowedValues[i] = val
		}
	}
	if v.AllowedPattern != nil {
		res.AllowedPattern = unmarshalRegexpResponseBodyToAppliedpolicyviewsRegexpView(v.AllowedPattern)
	}

	return res
}

// unmarshalRegexpResponseBodyToAppliedpolicyviewsRegexpView builds a value of
// type *appliedpolicyviews.RegexpView from a value of type *RegexpResponseBody.
func unmarshalRegexpResponseBodyToAppliedpolicyviewsRegexpView(v *RegexpResponseBody) *appliedpolicyviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.RegexpView{
		Pattern: v.Pattern,
		Options: v.Options,
	}

	return res
}

// unmarshalCredentialsResponseBodyToAppliedpolicyviewsCredentialsView builds a
// value of type *appliedpolicyviews.CredentialsView from a value of type
// *CredentialsResponseBody.
func unmarshalCredentialsResponseBodyToAppliedpolicyviewsCredentialsView(v *CredentialsResponseBody) *appliedpolicyviews.CredentialsView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.CredentialsView{
		Name:        v.Name,
		Label:       v.Label,
		Description: v.Description,
	}
	res.Schemes = make([]string, len(v.Schemes))
	for i, val := range v.Schemes {
		res.Schemes[i] = val
	}
	if v.Tags != nil {
		res.Tags = make([]*appliedpolicyviews.CredentialsTagView, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = unmarshalCredentialsTagResponseBodyToAppliedpolicyviewsCredentialsTagView(val)
		}
	}

	return res
}

// unmarshalCredentialsTagResponseBodyToAppliedpolicyviewsCredentialsTagView
// builds a value of type *appliedpolicyviews.CredentialsTagView from a value
// of type *CredentialsTagResponseBody.
func unmarshalCredentialsTagResponseBodyToAppliedpolicyviewsCredentialsTagView(v *CredentialsTagResponseBody) *appliedpolicyviews.CredentialsTagView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.CredentialsTagView{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// unmarshalPublishedTemplateResponseBodyToAppliedpolicyviewsPublishedTemplateView
// builds a value of type *appliedpolicyviews.PublishedTemplateView from a
// value of type *PublishedTemplateResponseBody.
func unmarshalPublishedTemplateResponseBodyToAppliedpolicyviewsPublishedTemplateView(v *PublishedTemplateResponseBody) *appliedpolicyviews.PublishedTemplateView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.PublishedTemplateView{
		ID:                        v.ID,
		Name:                      v.Name,
		OrgID:                     v.OrgID,
		ProjectID:                 v.ProjectID,
		PolicyTemplateID:          v.PolicyTemplateID,
		PolicyTemplateURL:         v.PolicyTemplateURL,
		PolicyTemplateFingerprint: v.PolicyTemplateFingerprint,
		RsPtVer:                   v.RsPtVer,
		ShortDescription:          v.ShortDescription,
		LongDescription:           v.LongDescription,
		DocLink:                   v.DocLink,
		DefaultFrequency:          v.DefaultFrequency,
		Href:                      v.Href,
		Filename:                  v.Filename,
		Source:                    v.Source,
		Fingerprint:               v.Fingerprint,
		Category:                  v.Category,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
		Severity:                  v.Severity,
		BuiltIn:                   v.BuiltIn,
		Hidden:                    v.Hidden,
		HiddenAt:                  v.HiddenAt,
		Tenancy:                   v.Tenancy,
		Kind:                      v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*appliedpolicyviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			res.Permissions[tk] = unmarshalPermissionResponseBodyToAppliedpolicyviewsPermissionView(val)
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*appliedpolicyviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			res.Parameters[tk] = unmarshalParameterResponseBodyToAppliedpolicyviewsParameterView(val)
		}
	}
	if v.HiddenBy != nil {
		res.HiddenBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(v.HiddenBy)
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]*appliedpolicyviews.CredentialsView, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			res.Credentials[tk] = unmarshalCredentialsResponseBodyToAppliedpolicyviewsCredentialsView(val)
		}
	}

	return res
}

// unmarshalConfigurationOptionResponseBodyToAppliedpolicyviewsConfigurationOptionView
// builds a value of type *appliedpolicyviews.ConfigurationOptionView from a
// value of type *ConfigurationOptionResponseBody.
func unmarshalConfigurationOptionResponseBodyToAppliedpolicyviewsConfigurationOptionView(v *ConfigurationOptionResponseBody) *appliedpolicyviews.ConfigurationOptionView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.ConfigurationOptionView{
		Name:   v.Name,
		Label:  v.Label,
		Type:   v.Type,
		Value:  v.Value,
		NoEcho: v.NoEcho,
	}
	if v.NoEcho == nil {
		var tmp bool = false
		res.NoEcho = &tmp
	}

	return res
}

// unmarshalAppliedPolicyResponseBodyToAppliedpolicyviewsAppliedPolicyView
// builds a value of type *appliedpolicyviews.AppliedPolicyView from a value of
// type *AppliedPolicyResponseBody.
func unmarshalAppliedPolicyResponseBodyToAppliedpolicyviewsAppliedPolicyView(v *AppliedPolicyResponseBody) *appliedpolicyviews.AppliedPolicyView {
	if v == nil {
		return nil
	}
	res := &appliedpolicyviews.AppliedPolicyView{
		ID:                  v.ID,
		PolicyAggregateID:   v.PolicyAggregateID,
		IncidentAggregateID: v.IncidentAggregateID,
		Name:                v.Name,
		Href:                v.Href,
		Description:         v.Description,
		DocLink:             v.DocLink,
		CreatedAt:           v.CreatedAt,
		UpdatedAt:           v.UpdatedAt,
		Severity:            v.Severity,
		Category:            v.Category,
		Frequency:           v.Frequency,
		DryRun:              v.DryRun,
		SkipApprovals:       v.SkipApprovals,
		Status:              v.Status,
		Error:               v.Error,
		ErroredAt:           v.ErroredAt,
		Scope:               v.Scope,
		Kind:                v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToAppliedpolicyviewsProjectView(v.Project)
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = unmarshalPolicyTemplateResponseBodyToAppliedpolicyviewsPolicyTemplateView(v.PolicyTemplate)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = unmarshalPublishedTemplateResponseBodyToAppliedpolicyviewsPublishedTemplateView(v.PublishedTemplate)
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(v.CreatedBy)
	}
	if v.Options != nil {
		res.Options = make([]*appliedpolicyviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = unmarshalConfigurationOptionResponseBodyToAppliedpolicyviewsConfigurationOptionView(val)
		}
	}
	if v.Credentials != nil {
		res.Credentials = make(map[string]string, len(v.Credentials))
		for key, val := range v.Credentials {
			tk := key
			tv := val
			res.Credentials[tk] = tv
		}
	}

	return res
}
