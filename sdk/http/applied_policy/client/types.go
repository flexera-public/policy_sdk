// Code generated by goa v3.1.3, DO NOT EDIT.
//
// AppliedPolicy HTTP client types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	appliedpolicy "github.com/rightscale/policy_sdk/sdk/applied_policy"
	appliedpolicyviews "github.com/rightscale/policy_sdk/sdk/applied_policy/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "AppliedPolicy" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// template_href is the href of the policy template or published template that
	// is applied.
	TemplateHref string `form:"template_href" json:"template_href" xml:"template_href"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// severity is the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
}

// UpdateRequestBody is the type of the "AppliedPolicy" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
}

// CreateResponseBody is the type of the "AppliedPolicy" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// id identifies an applied policy by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBody `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBody `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// created_by is the RightScale user that applied the policy.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the applied policy.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// kind is "gov#applied_policy".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// ShowResponseBody is the type of the "AppliedPolicy" service "show" endpoint
// HTTP response body.
type ShowResponseBody struct {
	// id identifies an applied policy by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBody `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBody `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// created_by is the RightScale user that applied the policy.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the applied policy.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// kind is "gov#applied_policy".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// ShowStatusResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body.
type ShowStatusResponseBody struct {
	// last_evaluation_start is the timestamp of the start of the last policy
	// evaluation.
	LastEvaluationStart *string `form:"last_evaluation_start,omitempty" json:"last_evaluation_start,omitempty" xml:"last_evaluation_start,omitempty"`
	// last_evaluation_finish is the timestamp of the finish of the last policy
	// evaluation. It is omitted if the policy is currently evaluating.
	LastEvaluationFinish *string `form:"last_evaluation_finish,omitempty" json:"last_evaluation_finish,omitempty" xml:"last_evaluation_finish,omitempty"`
	// next_evaluation_start is the timestamp of the next expected policy
	// evaluation start. It is omitted if the policy is currently evalutating.
	NextEvaluationStart *string `form:"next_evaluation_start,omitempty" json:"next_evaluation_start,omitempty" xml:"next_evaluation_start,omitempty"`
	// evaluation_error is the error message returned if the evaluation failed. On
	// success this attribute is empty.
	EvaluationError *string `form:"evaluation_error,omitempty" json:"evaluation_error,omitempty" xml:"evaluation_error,omitempty"`
	// evaluation_errored_at is the timestamp of the last evaluation error.
	EvaluationErroredAt *string `form:"evaluation_errored_at,omitempty" json:"evaluation_errored_at,omitempty" xml:"evaluation_errored_at,omitempty"`
}

// IndexOKResponseBody is the type of the "AppliedPolicy" service "index"
// endpoint HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of applied policies in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of applied policies.
	Items AppliedPolicyCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#applied_policy_list".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// CreateUnprocessableEntityResponseBody is the type of the "AppliedPolicy"
// service "create" endpoint HTTP response body for the "unprocessable_entity"
// error.
type CreateUnprocessableEntityResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "bad_gateway" error.
type CreateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "bad_gateway" error.
type DeleteBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "show" endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowForbiddenResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBadRequestResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBadGatewayResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "show" endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowStatusNotFoundResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "not_found" error.
type ShowStatusNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowStatusUnauthorizedResponseBody is the type of the "AppliedPolicy"
// service "show_status" endpoint HTTP response body for the "unauthorized"
// error.
type ShowStatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowStatusForbiddenResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "forbidden" error.
type ShowStatusForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowStatusBadRequestResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "bad_request" error.
type ShowStatusBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowStatusBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "bad_gateway" error.
type ShowStatusBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowStatusInternalErrorResponseBody is the type of the "AppliedPolicy"
// service "show_status" endpoint HTTP response body for the "internal_error"
// error.
type ShowStatusInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLogNotFoundResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "not_found" error.
type ShowLogNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLogUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "unauthorized" error.
type ShowLogUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLogForbiddenResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "forbidden" error.
type ShowLogForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLogBadRequestResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "bad_request" error.
type ShowLogBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLogBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "bad_gateway" error.
type ShowLogBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowLogInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "internal_error" error.
type ShowLogInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexForbiddenResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexBadRequestResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EvaluateNotFoundResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "not_found" error.
type EvaluateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EvaluateUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "unauthorized" error.
type EvaluateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EvaluateForbiddenResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "forbidden" error.
type EvaluateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EvaluateBadRequestResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "bad_request" error.
type EvaluateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EvaluateBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "bad_gateway" error.
type EvaluateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EvaluateInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "internal_error" error.
type EvaluateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "bad_gateway" error.
type UpdateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ConfigurationOptionCreateTypeRequestBody is used to define fields on request
// body types.
type ConfigurationOptionCreateTypeRequestBody struct {
	// name of option
	Name string `form:"name" json:"name" xml:"name"`
	// value of option
	Value interface{} `form:"value" json:"value" xml:"value"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// id is the Project ID
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name is the Project Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// org_id is the RightScale Organization ID
	OrgID *uint `form:"org_id,omitempty" json:"org_id,omitempty" xml:"org_id,omitempty"`
	// org_name is the RightScale Organization Name
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
}

// PolicyTemplateResponseBody is used to define fields on response body types.
type PolicyTemplateResponseBody struct {
	// id identifies a policy template by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name is the unique name of the policy template in the project.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint *string `form:"fingerprint,omitempty" json:"fingerprint,omitempty" xml:"fingerprint,omitempty"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#policy_template".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// name of user, usually of the form 'First Last'
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// PermissionResponseBody is used to define fields on response body types.
type PermissionResponseBody struct {
	// Name of a permission
	Name *string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// ParameterResponseBody is used to define fields on response body types.
type ParameterResponseBody struct {
	// Name of the parameter
	Name *string `json:"name"`
	// Type of the parameter
	Type *string `json:"type"`
	// Label to show in the UI
	Label *string `json:"label"`
	// The index of this parameter in the list
	Index *uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho *bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpResponseBody `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpResponseBody is used to define fields on response body types.
type RegexpResponseBody struct {
	// Pattern is the regular expression pattern.
	Pattern *string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// Name in policy template source code
	Name *string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label *string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTagResponseBody `json:"tags"`
}

// CredentialsTagResponseBody is used to define fields on response body types.
type CredentialsTagResponseBody struct {
	// Key is the tag key.
	Key *string `json:"key"`
	// Value is the tag value.
	Value *string `json:"value"`
}

// PublishedTemplateResponseBody is used to define fields on response body
// types.
type PublishedTemplateResponseBody struct {
	// id identifies a published template by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name is the unique name of the published template in the organization.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// org_id is the ID of the organization that the published template belongs to.
	OrgID *uint `form:"org_id,omitempty" json:"org_id,omitempty" xml:"org_id,omitempty"`
	// project_id is the ID of the project that the published template is published
	// from.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// policy_template_id is the ID of the policy template from which the published
	// template originated.
	PolicyTemplateID *string `form:"policy_template_id,omitempty" json:"policy_template_id,omitempty" xml:"policy_template_id,omitempty"`
	// policy_template_url is the full URL to the policy template from which the
	// published template originated.
	PolicyTemplateURL *string `form:"policy_template_url,omitempty" json:"policy_template_url,omitempty" xml:"policy_template_url,omitempty"`
	// policy_template_fingerprint is fingerprint of the policy template. It is
	// used to determine if the policy template that this was published from is
	// outdated.
	PolicyTemplateFingerprint *string `form:"policy_template_fingerprint,omitempty" json:"policy_template_fingerprint,omitempty" xml:"policy_template_fingerprint,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the published template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the published template. The
	// content can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the self-referential href of the published template.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is published template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint *string `form:"fingerprint,omitempty" json:"fingerprint,omitempty" xml:"fingerprint,omitempty"`
	// category is the type categorization of the published template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the published template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the published template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_by is the RightScale user that updated the published template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this published
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool `form:"built_in,omitempty" json:"built_in,omitempty" xml:"built_in,omitempty"`
	// hidden is a flag to indicate whether the published template is hidden.
	Hidden *bool `form:"hidden,omitempty" json:"hidden,omitempty" xml:"hidden,omitempty"`
	// hidden_by is the RightScale user that marked the published template as
	// hidden.
	HiddenBy *UserResponseBody `form:"hidden_by,omitempty" json:"hidden_by,omitempty" xml:"hidden_by,omitempty"`
	// hidden_at is the hidden at timestamp in RFC3339 format.
	HiddenAt *string `form:"hidden_at,omitempty" json:"hidden_at,omitempty" xml:"hidden_at,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#published_template".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// label of option
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// type of option
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// value of option
	Value interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho *bool `form:"no_echo,omitempty" json:"no_echo,omitempty" xml:"no_echo,omitempty"`
}

// AppliedPolicyCollectionResponseBody is used to define fields on response
// body types.
type AppliedPolicyCollectionResponseBody []*AppliedPolicyResponseBody

// AppliedPolicyResponseBody is used to define fields on response body types.
type AppliedPolicyResponseBody struct {
	// id identifies an applied policy by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBody `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBody `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// created_by is the RightScale user that applied the policy.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the applied policy.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// kind is "gov#applied_policy".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "AppliedPolicy" service.
func NewCreateRequestBody(p *appliedpolicy.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:          p.Name,
		Description:   p.Description,
		TemplateHref:  p.TemplateHref,
		Frequency:     p.Frequency,
		DryRun:        p.DryRun,
		SkipApprovals: p.SkipApprovals,
		Severity:      p.Severity,
	}
	if p.Options != nil {
		body.Options = make([]*ConfigurationOptionCreateTypeRequestBody, len(p.Options))
		for i, val := range p.Options {
			body.Options[i] = marshalAppliedpolicyConfigurationOptionCreateTypeToConfigurationOptionCreateTypeRequestBody(val)
		}
	}
	if p.Credentials != nil {
		body.Credentials = make(map[string]string, len(p.Credentials))
		for key, val := range p.Credentials {
			tk := key
			tv := val
			body.Credentials[tk] = tv
		}
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "AppliedPolicy" service.
func NewUpdateRequestBody(p *appliedpolicy.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:          p.Name,
		Description:   p.Description,
		Frequency:     p.Frequency,
		DryRun:        p.DryRun,
		SkipApprovals: p.SkipApprovals,
		Severity:      p.Severity,
	}
	if p.Options != nil {
		body.Options = make([]*ConfigurationOptionCreateTypeRequestBody, len(p.Options))
		for i, val := range p.Options {
			body.Options[i] = marshalAppliedpolicyConfigurationOptionCreateTypeToConfigurationOptionCreateTypeRequestBody(val)
		}
	}
	return body
}

// NewCreateAppliedPolicyOK builds a "AppliedPolicy" service "create" endpoint
// result from a HTTP "OK" response.
func NewCreateAppliedPolicyOK(body *CreateResponseBody) *appliedpolicyviews.AppliedPolicyView {
	v := &appliedpolicyviews.AppliedPolicyView{
		ID:                  body.ID,
		PolicyAggregateID:   body.PolicyAggregateID,
		IncidentAggregateID: body.IncidentAggregateID,
		Name:                body.Name,
		Href:                body.Href,
		Description:         body.Description,
		DocLink:             body.DocLink,
		CreatedAt:           body.CreatedAt,
		UpdatedAt:           body.UpdatedAt,
		Severity:            body.Severity,
		Category:            body.Category,
		Frequency:           body.Frequency,
		DryRun:              body.DryRun,
		SkipApprovals:       body.SkipApprovals,
		Status:              body.Status,
		Error:               body.Error,
		ErroredAt:           body.ErroredAt,
		Scope:               body.Scope,
		Kind:                body.Kind,
	}
	if body.Project != nil {
		v.Project = unmarshalProjectResponseBodyToAppliedpolicyviewsProjectView(body.Project)
	}
	if body.PolicyTemplate != nil {
		v.PolicyTemplate = unmarshalPolicyTemplateResponseBodyToAppliedpolicyviewsPolicyTemplateView(body.PolicyTemplate)
	}
	if body.PublishedTemplate != nil {
		v.PublishedTemplate = unmarshalPublishedTemplateResponseBodyToAppliedpolicyviewsPublishedTemplateView(body.PublishedTemplate)
	}
	if body.Info != nil {
		v.Info = make(map[string]string, len(body.Info))
		for key, val := range body.Info {
			tk := key
			tv := val
			v.Info[tk] = tv
		}
	}
	if body.CreatedBy != nil {
		v.CreatedBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(body.CreatedBy)
	}
	if body.Options != nil {
		v.Options = make([]*appliedpolicyviews.ConfigurationOptionView, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionResponseBodyToAppliedpolicyviewsConfigurationOptionView(val)
		}
	}
	if body.Credentials != nil {
		v.Credentials = make(map[string]string, len(body.Credentials))
		for key, val := range body.Credentials {
			tk := key
			tv := val
			v.Credentials[tk] = tv
		}
	}

	return v
}

// NewCreateUnprocessableEntity builds a AppliedPolicy service create endpoint
// unprocessable_entity error.
func NewCreateUnprocessableEntity(body *CreateUnprocessableEntityResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateUnauthorized builds a AppliedPolicy service create endpoint
// unauthorized error.
func NewCreateUnauthorized(body *CreateUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateForbidden builds a AppliedPolicy service create endpoint forbidden
// error.
func NewCreateForbidden(body *CreateForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBadRequest builds a AppliedPolicy service create endpoint
// bad_request error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBadGateway builds a AppliedPolicy service create endpoint
// bad_gateway error.
func NewCreateBadGateway(body *CreateBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateInternalError builds a AppliedPolicy service create endpoint
// internal_error error.
func NewCreateInternalError(body *CreateInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotFound builds a AppliedPolicy service delete endpoint not_found
// error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteUnauthorized builds a AppliedPolicy service delete endpoint
// unauthorized error.
func NewDeleteUnauthorized(body *DeleteUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteForbidden builds a AppliedPolicy service delete endpoint forbidden
// error.
func NewDeleteForbidden(body *DeleteForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteBadRequest builds a AppliedPolicy service delete endpoint
// bad_request error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteBadGateway builds a AppliedPolicy service delete endpoint
// bad_gateway error.
func NewDeleteBadGateway(body *DeleteBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteInternalError builds a AppliedPolicy service delete endpoint
// internal_error error.
func NewDeleteInternalError(body *DeleteInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowAppliedPolicyOK builds a "AppliedPolicy" service "show" endpoint
// result from a HTTP "OK" response.
func NewShowAppliedPolicyOK(body *ShowResponseBody) *appliedpolicyviews.AppliedPolicyView {
	v := &appliedpolicyviews.AppliedPolicyView{
		ID:                  body.ID,
		PolicyAggregateID:   body.PolicyAggregateID,
		IncidentAggregateID: body.IncidentAggregateID,
		Name:                body.Name,
		Href:                body.Href,
		Description:         body.Description,
		DocLink:             body.DocLink,
		CreatedAt:           body.CreatedAt,
		UpdatedAt:           body.UpdatedAt,
		Severity:            body.Severity,
		Category:            body.Category,
		Frequency:           body.Frequency,
		DryRun:              body.DryRun,
		SkipApprovals:       body.SkipApprovals,
		Status:              body.Status,
		Error:               body.Error,
		ErroredAt:           body.ErroredAt,
		Scope:               body.Scope,
		Kind:                body.Kind,
	}
	if body.Project != nil {
		v.Project = unmarshalProjectResponseBodyToAppliedpolicyviewsProjectView(body.Project)
	}
	if body.PolicyTemplate != nil {
		v.PolicyTemplate = unmarshalPolicyTemplateResponseBodyToAppliedpolicyviewsPolicyTemplateView(body.PolicyTemplate)
	}
	if body.PublishedTemplate != nil {
		v.PublishedTemplate = unmarshalPublishedTemplateResponseBodyToAppliedpolicyviewsPublishedTemplateView(body.PublishedTemplate)
	}
	if body.Info != nil {
		v.Info = make(map[string]string, len(body.Info))
		for key, val := range body.Info {
			tk := key
			tv := val
			v.Info[tk] = tv
		}
	}
	if body.CreatedBy != nil {
		v.CreatedBy = unmarshalUserResponseBodyToAppliedpolicyviewsUserView(body.CreatedBy)
	}
	if body.Options != nil {
		v.Options = make([]*appliedpolicyviews.ConfigurationOptionView, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionResponseBodyToAppliedpolicyviewsConfigurationOptionView(val)
		}
	}
	if body.Credentials != nil {
		v.Credentials = make(map[string]string, len(body.Credentials))
		for key, val := range body.Credentials {
			tk := key
			tv := val
			v.Credentials[tk] = tv
		}
	}

	return v
}

// NewShowNotFound builds a AppliedPolicy service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowUnauthorized builds a AppliedPolicy service show endpoint
// unauthorized error.
func NewShowUnauthorized(body *ShowUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowForbidden builds a AppliedPolicy service show endpoint forbidden
// error.
func NewShowForbidden(body *ShowForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowBadRequest builds a AppliedPolicy service show endpoint bad_request
// error.
func NewShowBadRequest(body *ShowBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowBadGateway builds a AppliedPolicy service show endpoint bad_gateway
// error.
func NewShowBadGateway(body *ShowBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowInternalError builds a AppliedPolicy service show endpoint
// internal_error error.
func NewShowInternalError(body *ShowInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowStatusAppliedPolicyStatusOK builds a "AppliedPolicy" service
// "show_status" endpoint result from a HTTP "OK" response.
func NewShowStatusAppliedPolicyStatusOK(body *ShowStatusResponseBody) *appliedpolicyviews.AppliedPolicyStatusView {
	v := &appliedpolicyviews.AppliedPolicyStatusView{
		LastEvaluationStart:  body.LastEvaluationStart,
		LastEvaluationFinish: body.LastEvaluationFinish,
		NextEvaluationStart:  body.NextEvaluationStart,
		EvaluationError:      body.EvaluationError,
		EvaluationErroredAt:  body.EvaluationErroredAt,
	}

	return v
}

// NewShowStatusNotFound builds a AppliedPolicy service show_status endpoint
// not_found error.
func NewShowStatusNotFound(body *ShowStatusNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowStatusUnauthorized builds a AppliedPolicy service show_status
// endpoint unauthorized error.
func NewShowStatusUnauthorized(body *ShowStatusUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowStatusForbidden builds a AppliedPolicy service show_status endpoint
// forbidden error.
func NewShowStatusForbidden(body *ShowStatusForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowStatusBadRequest builds a AppliedPolicy service show_status endpoint
// bad_request error.
func NewShowStatusBadRequest(body *ShowStatusBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowStatusBadGateway builds a AppliedPolicy service show_status endpoint
// bad_gateway error.
func NewShowStatusBadGateway(body *ShowStatusBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowStatusInternalError builds a AppliedPolicy service show_status
// endpoint internal_error error.
func NewShowStatusInternalError(body *ShowStatusInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowLogAppliedPolicyLogOK builds a "AppliedPolicy" service "show_log"
// endpoint result from a HTTP "OK" response.
func NewShowLogAppliedPolicyLogOK(body string, etag *string, lastModified *string) *appliedpolicyviews.AppliedPolicyLogView {
	v := body
	res := &appliedpolicyviews.AppliedPolicyLogView{
		ResponseBody: &v,
	}
	res.Etag = etag
	res.LastModified = lastModified

	return res
}

// NewShowLogNotFound builds a AppliedPolicy service show_log endpoint
// not_found error.
func NewShowLogNotFound(body *ShowLogNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowLogUnauthorized builds a AppliedPolicy service show_log endpoint
// unauthorized error.
func NewShowLogUnauthorized(body *ShowLogUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowLogForbidden builds a AppliedPolicy service show_log endpoint
// forbidden error.
func NewShowLogForbidden(body *ShowLogForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowLogBadRequest builds a AppliedPolicy service show_log endpoint
// bad_request error.
func NewShowLogBadRequest(body *ShowLogBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowLogBadGateway builds a AppliedPolicy service show_log endpoint
// bad_gateway error.
func NewShowLogBadGateway(body *ShowLogBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowLogInternalError builds a AppliedPolicy service show_log endpoint
// internal_error error.
func NewShowLogInternalError(body *ShowLogInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexAppliedPolicyListNotModified builds a "AppliedPolicy" service
// "index" endpoint result from a HTTP "NotModified" response.
func NewIndexAppliedPolicyListNotModified(etag string) *appliedpolicyviews.AppliedPolicyListView {
	v := &appliedpolicyviews.AppliedPolicyListView{}
	v.Etag = &etag

	return v
}

// NewIndexAppliedPolicyListOK builds a "AppliedPolicy" service "index"
// endpoint result from a HTTP "OK" response.
func NewIndexAppliedPolicyListOK(body *IndexOKResponseBody, etag string) *appliedpolicyviews.AppliedPolicyListView {
	v := &appliedpolicyviews.AppliedPolicyListView{
		Count:       body.Count,
		NotModified: body.NotModified,
		Kind:        body.Kind,
	}
	if body.Items != nil {
		v.Items = make([]*appliedpolicyviews.AppliedPolicyView, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = unmarshalAppliedPolicyResponseBodyToAppliedpolicyviewsAppliedPolicyView(val)
		}
	}
	v.Etag = &etag

	return v
}

// NewIndexUnauthorized builds a AppliedPolicy service index endpoint
// unauthorized error.
func NewIndexUnauthorized(body *IndexUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexForbidden builds a AppliedPolicy service index endpoint forbidden
// error.
func NewIndexForbidden(body *IndexForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexBadRequest builds a AppliedPolicy service index endpoint bad_request
// error.
func NewIndexBadRequest(body *IndexBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexBadGateway builds a AppliedPolicy service index endpoint bad_gateway
// error.
func NewIndexBadGateway(body *IndexBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewIndexInternalError builds a AppliedPolicy service index endpoint
// internal_error error.
func NewIndexInternalError(body *IndexInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEvaluateNotFound builds a AppliedPolicy service evaluate endpoint
// not_found error.
func NewEvaluateNotFound(body *EvaluateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEvaluateUnauthorized builds a AppliedPolicy service evaluate endpoint
// unauthorized error.
func NewEvaluateUnauthorized(body *EvaluateUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEvaluateForbidden builds a AppliedPolicy service evaluate endpoint
// forbidden error.
func NewEvaluateForbidden(body *EvaluateForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEvaluateBadRequest builds a AppliedPolicy service evaluate endpoint
// bad_request error.
func NewEvaluateBadRequest(body *EvaluateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEvaluateBadGateway builds a AppliedPolicy service evaluate endpoint
// bad_gateway error.
func NewEvaluateBadGateway(body *EvaluateBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEvaluateInternalError builds a AppliedPolicy service evaluate endpoint
// internal_error error.
func NewEvaluateInternalError(body *EvaluateInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateNotFound builds a AppliedPolicy service update endpoint not_found
// error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateUnauthorized builds a AppliedPolicy service update endpoint
// unauthorized error.
func NewUpdateUnauthorized(body *UpdateUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateForbidden builds a AppliedPolicy service update endpoint forbidden
// error.
func NewUpdateForbidden(body *UpdateForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBadRequest builds a AppliedPolicy service update endpoint
// bad_request error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBadGateway builds a AppliedPolicy service update endpoint
// bad_gateway error.
func NewUpdateBadGateway(body *UpdateBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateInternalError builds a AppliedPolicy service update endpoint
// internal_error error.
func NewUpdateInternalError(body *UpdateInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateUnprocessableEntityResponseBody runs the validations defined
// on create_unprocessable_entity_response_body
func ValidateCreateUnprocessableEntityResponseBody(body *CreateUnprocessableEntityResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateUnauthorizedResponseBody runs the validations defined on
// create_unauthorized_response_body
func ValidateCreateUnauthorizedResponseBody(body *CreateUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateForbiddenResponseBody runs the validations defined on
// create_forbidden_response_body
func ValidateCreateForbiddenResponseBody(body *CreateForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBadGatewayResponseBody runs the validations defined on
// create_bad_gateway_response_body
func ValidateCreateBadGatewayResponseBody(body *CreateBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateInternalErrorResponseBody runs the validations defined on
// create_internal_error_response_body
func ValidateCreateInternalErrorResponseBody(body *CreateInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteUnauthorizedResponseBody runs the validations defined on
// delete_unauthorized_response_body
func ValidateDeleteUnauthorizedResponseBody(body *DeleteUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteForbiddenResponseBody runs the validations defined on
// delete_forbidden_response_body
func ValidateDeleteForbiddenResponseBody(body *DeleteForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_bad_request_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteBadGatewayResponseBody runs the validations defined on
// delete_bad_gateway_response_body
func ValidateDeleteBadGatewayResponseBody(body *DeleteBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteInternalErrorResponseBody runs the validations defined on
// delete_internal_error_response_body
func ValidateDeleteInternalErrorResponseBody(body *DeleteInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowUnauthorizedResponseBody runs the validations defined on
// show_unauthorized_response_body
func ValidateShowUnauthorizedResponseBody(body *ShowUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowForbiddenResponseBody runs the validations defined on
// show_forbidden_response_body
func ValidateShowForbiddenResponseBody(body *ShowForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowBadRequestResponseBody runs the validations defined on
// show_bad_request_response_body
func ValidateShowBadRequestResponseBody(body *ShowBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowBadGatewayResponseBody runs the validations defined on
// show_bad_gateway_response_body
func ValidateShowBadGatewayResponseBody(body *ShowBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowInternalErrorResponseBody runs the validations defined on
// show_internal_error_response_body
func ValidateShowInternalErrorResponseBody(body *ShowInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowStatusNotFoundResponseBody runs the validations defined on
// show_status_not_found_response_body
func ValidateShowStatusNotFoundResponseBody(body *ShowStatusNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowStatusUnauthorizedResponseBody runs the validations defined on
// show_status_unauthorized_response_body
func ValidateShowStatusUnauthorizedResponseBody(body *ShowStatusUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowStatusForbiddenResponseBody runs the validations defined on
// show_status_forbidden_response_body
func ValidateShowStatusForbiddenResponseBody(body *ShowStatusForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowStatusBadRequestResponseBody runs the validations defined on
// show_status_bad_request_response_body
func ValidateShowStatusBadRequestResponseBody(body *ShowStatusBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowStatusBadGatewayResponseBody runs the validations defined on
// show_status_bad_gateway_response_body
func ValidateShowStatusBadGatewayResponseBody(body *ShowStatusBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowStatusInternalErrorResponseBody runs the validations defined on
// show_status_internal_error_response_body
func ValidateShowStatusInternalErrorResponseBody(body *ShowStatusInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLogNotFoundResponseBody runs the validations defined on
// show_log_not_found_response_body
func ValidateShowLogNotFoundResponseBody(body *ShowLogNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLogUnauthorizedResponseBody runs the validations defined on
// show_log_unauthorized_response_body
func ValidateShowLogUnauthorizedResponseBody(body *ShowLogUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLogForbiddenResponseBody runs the validations defined on
// show_log_forbidden_response_body
func ValidateShowLogForbiddenResponseBody(body *ShowLogForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLogBadRequestResponseBody runs the validations defined on
// show_log_bad_request_response_body
func ValidateShowLogBadRequestResponseBody(body *ShowLogBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLogBadGatewayResponseBody runs the validations defined on
// show_log_bad_gateway_response_body
func ValidateShowLogBadGatewayResponseBody(body *ShowLogBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowLogInternalErrorResponseBody runs the validations defined on
// show_log_internal_error_response_body
func ValidateShowLogInternalErrorResponseBody(body *ShowLogInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexUnauthorizedResponseBody runs the validations defined on
// index_unauthorized_response_body
func ValidateIndexUnauthorizedResponseBody(body *IndexUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexForbiddenResponseBody runs the validations defined on
// index_forbidden_response_body
func ValidateIndexForbiddenResponseBody(body *IndexForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexBadRequestResponseBody runs the validations defined on
// index_bad_request_response_body
func ValidateIndexBadRequestResponseBody(body *IndexBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexBadGatewayResponseBody runs the validations defined on
// index_bad_gateway_response_body
func ValidateIndexBadGatewayResponseBody(body *IndexBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIndexInternalErrorResponseBody runs the validations defined on
// index_internal_error_response_body
func ValidateIndexInternalErrorResponseBody(body *IndexInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEvaluateNotFoundResponseBody runs the validations defined on
// evaluate_not_found_response_body
func ValidateEvaluateNotFoundResponseBody(body *EvaluateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEvaluateUnauthorizedResponseBody runs the validations defined on
// evaluate_unauthorized_response_body
func ValidateEvaluateUnauthorizedResponseBody(body *EvaluateUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEvaluateForbiddenResponseBody runs the validations defined on
// evaluate_forbidden_response_body
func ValidateEvaluateForbiddenResponseBody(body *EvaluateForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEvaluateBadRequestResponseBody runs the validations defined on
// evaluate_bad_request_response_body
func ValidateEvaluateBadRequestResponseBody(body *EvaluateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEvaluateBadGatewayResponseBody runs the validations defined on
// evaluate_bad_gateway_response_body
func ValidateEvaluateBadGatewayResponseBody(body *EvaluateBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEvaluateInternalErrorResponseBody runs the validations defined on
// evaluate_internal_error_response_body
func ValidateEvaluateInternalErrorResponseBody(body *EvaluateInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateUnauthorizedResponseBody runs the validations defined on
// update_unauthorized_response_body
func ValidateUpdateUnauthorizedResponseBody(body *UpdateUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateForbiddenResponseBody runs the validations defined on
// update_forbidden_response_body
func ValidateUpdateForbiddenResponseBody(body *UpdateForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_bad_request_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBadGatewayResponseBody runs the validations defined on
// update_bad_gateway_response_body
func ValidateUpdateBadGatewayResponseBody(body *UpdateBadGatewayResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInternalErrorResponseBody runs the validations defined on
// update_internal_error_response_body
func ValidateUpdateInternalErrorResponseBody(body *UpdateInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateConfigurationOptionCreateTypeRequestBody runs the validations
// defined on ConfigurationOptionCreateTypeRequestBody
func ValidateConfigurationOptionCreateTypeRequestBody(body *ConfigurationOptionCreateTypeRequestBody) (err error) {
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}

// ValidateProjectResponseBody runs the validations defined on
// ProjectResponseBody
func ValidateProjectResponseBody(body *ProjectResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OrgID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_id", "body"))
	}
	if body.OrgName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org_name", "body"))
	}
	return
}

// ValidatePolicyTemplateResponseBody runs the validations defined on
// PolicyTemplateResponseBody
func ValidatePolicyTemplateResponseBody(body *PolicyTemplateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.doc_link", *body.DocLink, goa.FormatURI))
	}
	if body.DefaultFrequency != nil {
		if !(*body.DefaultFrequency == "15 minutes" || *body.DefaultFrequency == "hourly" || *body.DefaultFrequency == "daily" || *body.DefaultFrequency == "weekly" || *body.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.default_frequency", *body.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
	}
	if body.CreatedBy != nil {
		if err2 := ValidateUserResponseBody(body.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedBy != nil {
		if err2 := ValidateUserResponseBody(body.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range body.Permissions {
		if v != nil {
			if err2 := ValidatePermissionResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range body.Parameters {
		if v != nil {
			if err2 := ValidateParameterResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if body.Tenancy != nil {
		if !(*body.Tenancy == "multi" || *body.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.tenancy", *body.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range body.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#policy_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#policy_template"}))
		}
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidatePermissionResponseBody runs the validations defined on
// PermissionResponseBody
func ValidatePermissionResponseBody(body *PermissionResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	if body.Actions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actions", "body"))
	}
	return
}

// ValidateParameterResponseBody runs the validations defined on
// ParameterResponseBody
func ValidateParameterResponseBody(body *ParameterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "string" || *body.Type == "list" || *body.Type == "number") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"string", "list", "number"}))
		}
	}
	if body.AllowedPattern != nil {
		if err2 := ValidateRegexpResponseBody(body.AllowedPattern); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRegexpResponseBody runs the validations defined on RegexpResponseBody
func ValidateRegexpResponseBody(body *RegexpResponseBody) (err error) {
	if body.Pattern == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pattern", "body"))
	}
	return
}

// ValidateCredentialsResponseBody runs the validations defined on
// CredentialsResponseBody
func ValidateCredentialsResponseBody(body *CredentialsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Schemes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schemes", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	for _, e := range body.Tags {
		if e != nil {
			if err2 := ValidateCredentialsTagResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCredentialsTagResponseBody runs the validations defined on
// CredentialsTagResponseBody
func ValidateCredentialsTagResponseBody(body *CredentialsTagResponseBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}

// ValidatePublishedTemplateResponseBody runs the validations defined on
// PublishedTemplateResponseBody
func ValidatePublishedTemplateResponseBody(body *PublishedTemplateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Fingerprint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fingerprint", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.PolicyTemplateURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.policy_template_url", *body.PolicyTemplateURL, goa.FormatURI))
	}
	if body.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.doc_link", *body.DocLink, goa.FormatURI))
	}
	if body.DefaultFrequency != nil {
		if !(*body.DefaultFrequency == "15 minutes" || *body.DefaultFrequency == "hourly" || *body.DefaultFrequency == "daily" || *body.DefaultFrequency == "weekly" || *body.DefaultFrequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.default_frequency", *body.DefaultFrequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/orgs/[0-9]+/published_templates/[0-9a-f]+$"))
	}
	if body.CreatedBy != nil {
		if err2 := ValidateUserResponseBody(body.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedBy != nil {
		if err2 := ValidateUserResponseBody(body.UpdatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range body.Permissions {
		if v != nil {
			if err2 := ValidatePermissionResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range body.Parameters {
		if v != nil {
			if err2 := ValidateParameterResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if body.HiddenBy != nil {
		if err2 := ValidateUserResponseBody(body.HiddenBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.HiddenAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.hidden_at", *body.HiddenAt, goa.FormatDateTime))
	}
	if body.Tenancy != nil {
		if !(*body.Tenancy == "multi" || *body.Tenancy == "single") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.tenancy", *body.Tenancy, []interface{}{"multi", "single"}))
		}
	}
	for _, v := range body.Credentials {
		if v != nil {
			if err2 := ValidateCredentialsResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#published_template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#published_template"}))
		}
	}
	return
}

// ValidateConfigurationOptionResponseBody runs the validations defined on
// ConfigurationOptionResponseBody
func ValidateConfigurationOptionResponseBody(body *ConfigurationOptionResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "string" || *body.Type == "number" || *body.Type == "list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"string", "number", "list"}))
		}
	}
	return
}

// ValidateAppliedPolicyCollectionResponseBody runs the validations defined on
// AppliedPolicyCollectionResponseBody
func ValidateAppliedPolicyCollectionResponseBody(body AppliedPolicyCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateAppliedPolicyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAppliedPolicyResponseBody runs the validations defined on
// AppliedPolicyResponseBody
func ValidateAppliedPolicyResponseBody(body *AppliedPolicyResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Project != nil {
		if err2 := ValidateProjectResponseBody(body.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/projects/[0-9]+/applied_policies/[0-9a-f]+$"))
	}
	if body.PolicyTemplate != nil {
		if err2 := ValidatePolicyTemplateResponseBody(body.PolicyTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PublishedTemplate != nil {
		if err2 := ValidatePublishedTemplateResponseBody(body.PublishedTemplate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DocLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.doc_link", *body.DocLink, goa.FormatURI))
	}
	if body.CreatedBy != nil {
		if err2 := ValidateUserResponseBody(body.CreatedBy); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	if body.Frequency != nil {
		if !(*body.Frequency == "15 minutes" || *body.Frequency == "hourly" || *body.Frequency == "daily" || *body.Frequency == "weekly" || *body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", *body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Status != nil {
		if !(*body.Status == "active" || *body.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"active", "error"}))
		}
	}
	if body.ErroredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.errored_at", *body.ErroredAt, goa.FormatDateTime))
	}
	if body.Scope != nil {
		if !(*body.Scope == "project" || *body.Scope == "org") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.scope", *body.Scope, []interface{}{"project", "org"}))
		}
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#applied_policy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#applied_policy"}))
		}
	}
	return
}
