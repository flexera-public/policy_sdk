// Code generated by goa v3.1.3, DO NOT EDIT.
//
// AppliedPolicy HTTP server
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	"context"
	"net/http"
	"regexp"

	appliedpolicy "github.com/rightscale/policy_sdk/sdk/applied_policy"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the AppliedPolicy service endpoint HTTP handlers.
type Server struct {
	Mounts     []*MountPoint
	Create     http.Handler
	Delete     http.Handler
	Show       http.Handler
	ShowStatus http.Handler
	ShowLog    http.Handler
	Index      http.Handler
	Evaluate   http.Handler
	Update     http.Handler
	CORS       http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the AppliedPolicy service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *appliedpolicy.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Create", "POST", "/api/governance/projects/{project_id}/applied_policies"},
			{"Delete", "DELETE", "/api/governance/projects/{project_id}/applied_policies/{policy_id}"},
			{"Show", "GET", "/api/governance/projects/{project_id}/applied_policies/{policy_id}"},
			{"ShowStatus", "GET", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/status"},
			{"ShowLog", "GET", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/log"},
			{"Index", "GET", "/api/governance/projects/{project_id}/applied_policies"},
			{"Evaluate", "POST", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/evaluate"},
			{"Update", "PATCH", "/api/governance/projects/{project_id}/applied_policies/{policy_id}"},
			{"CORS", "OPTIONS", "/api/governance/projects/{project_id}/applied_policies"},
			{"CORS", "OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}"},
			{"CORS", "OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/status"},
			{"CORS", "OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/log"},
			{"CORS", "OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/evaluate"},
		},
		Create:     NewCreateHandler(e.Create, mux, decoder, encoder, errhandler, formatter),
		Delete:     NewDeleteHandler(e.Delete, mux, decoder, encoder, errhandler, formatter),
		Show:       NewShowHandler(e.Show, mux, decoder, encoder, errhandler, formatter),
		ShowStatus: NewShowStatusHandler(e.ShowStatus, mux, decoder, encoder, errhandler, formatter),
		ShowLog:    NewShowLogHandler(e.ShowLog, mux, decoder, encoder, errhandler, formatter),
		Index:      NewIndexHandler(e.Index, mux, decoder, encoder, errhandler, formatter),
		Evaluate:   NewEvaluateHandler(e.Evaluate, mux, decoder, encoder, errhandler, formatter),
		Update:     NewUpdateHandler(e.Update, mux, decoder, encoder, errhandler, formatter),
		CORS:       NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "AppliedPolicy" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Create = m(s.Create)
	s.Delete = m(s.Delete)
	s.Show = m(s.Show)
	s.ShowStatus = m(s.ShowStatus)
	s.ShowLog = m(s.ShowLog)
	s.Index = m(s.Index)
	s.Evaluate = m(s.Evaluate)
	s.Update = m(s.Update)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the AppliedPolicy endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateHandler(mux, h.Create)
	MountDeleteHandler(mux, h.Delete)
	MountShowHandler(mux, h.Show)
	MountShowStatusHandler(mux, h.ShowStatus)
	MountShowLogHandler(mux, h.ShowLog)
	MountIndexHandler(mux, h.Index)
	MountEvaluateHandler(mux, h.Evaluate)
	MountUpdateHandler(mux, h.Update)
	MountCORSHandler(mux, h.CORS)
}

// MountCreateHandler configures the mux to serve the "AppliedPolicy" service
// "create" endpoint.
func MountCreateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/governance/projects/{project_id}/applied_policies", f)
}

// NewCreateHandler creates a HTTP handler which loads the HTTP request and
// calls the "AppliedPolicy" service "create" endpoint.
func NewCreateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateRequest(mux, decoder)
		encodeResponse = EncodeCreateResponse(encoder)
		encodeError    = EncodeCreateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteHandler configures the mux to serve the "AppliedPolicy" service
// "delete" endpoint.
func MountDeleteHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/governance/projects/{project_id}/applied_policies/{policy_id}", f)
}

// NewDeleteHandler creates a HTTP handler which loads the HTTP request and
// calls the "AppliedPolicy" service "delete" endpoint.
func NewDeleteHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteRequest(mux, decoder)
		encodeResponse = EncodeDeleteResponse(encoder)
		encodeError    = EncodeDeleteError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountShowHandler configures the mux to serve the "AppliedPolicy" service
// "show" endpoint.
func MountShowHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/governance/projects/{project_id}/applied_policies/{policy_id}", f)
}

// NewShowHandler creates a HTTP handler which loads the HTTP request and calls
// the "AppliedPolicy" service "show" endpoint.
func NewShowHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeShowRequest(mux, decoder)
		encodeResponse = EncodeShowResponse(encoder)
		encodeError    = EncodeShowError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "show")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountShowStatusHandler configures the mux to serve the "AppliedPolicy"
// service "show_status" endpoint.
func MountShowStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/status", f)
}

// NewShowStatusHandler creates a HTTP handler which loads the HTTP request and
// calls the "AppliedPolicy" service "show_status" endpoint.
func NewShowStatusHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeShowStatusRequest(mux, decoder)
		encodeResponse = EncodeShowStatusResponse(encoder)
		encodeError    = EncodeShowStatusError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "show_status")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountShowLogHandler configures the mux to serve the "AppliedPolicy" service
// "show_log" endpoint.
func MountShowLogHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/log", f)
}

// NewShowLogHandler creates a HTTP handler which loads the HTTP request and
// calls the "AppliedPolicy" service "show_log" endpoint.
func NewShowLogHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeShowLogRequest(mux, decoder)
		encodeResponse = EncodeShowLogResponse(encoder)
		encodeError    = EncodeShowLogError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "show_log")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIndexHandler configures the mux to serve the "AppliedPolicy" service
// "index" endpoint.
func MountIndexHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/governance/projects/{project_id}/applied_policies", f)
}

// NewIndexHandler creates a HTTP handler which loads the HTTP request and
// calls the "AppliedPolicy" service "index" endpoint.
func NewIndexHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIndexRequest(mux, decoder)
		encodeResponse = EncodeIndexResponse(encoder)
		encodeError    = EncodeIndexError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "index")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountEvaluateHandler configures the mux to serve the "AppliedPolicy" service
// "evaluate" endpoint.
func MountEvaluateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/evaluate", f)
}

// NewEvaluateHandler creates a HTTP handler which loads the HTTP request and
// calls the "AppliedPolicy" service "evaluate" endpoint.
func NewEvaluateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEvaluateRequest(mux, decoder)
		encodeResponse = EncodeEvaluateResponse(encoder)
		encodeError    = EncodeEvaluateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "evaluate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateHandler configures the mux to serve the "AppliedPolicy" service
// "update" endpoint.
func MountUpdateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleAppliedPolicyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/api/governance/projects/{project_id}/applied_policies/{policy_id}", f)
}

// NewUpdateHandler creates a HTTP handler which loads the HTTP request and
// calls the "AppliedPolicy" service "update" endpoint.
func NewUpdateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateRequest(mux, decoder)
		encodeResponse = EncodeUpdateResponse(encoder)
		encodeError    = EncodeUpdateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update")
		ctx = context.WithValue(ctx, goa.ServiceKey, "AppliedPolicy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service AppliedPolicy.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleAppliedPolicyOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/api/governance/projects/{project_id}/applied_policies", f)
	mux.Handle("OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}", f)
	mux.Handle("OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/status", f)
	mux.Handle("OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/log", f)
	mux.Handle("OPTIONS", "/api/governance/projects/{project_id}/applied_policies/{policy_id}/evaluate", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleAppliedPolicyOrigin applies the CORS response headers corresponding to
// the origin for the service AppliedPolicy.
func handleAppliedPolicyOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile("([.]rightscale[.]com)|([.]flexera[.]com)|([.]flexeratest[.]com)$")
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "ETag, Location")
			w.Header().Set("Access-Control-Max-Age", "900")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "DELETE, GET, HEAD, POST, PATCH, PUT")
				w.Header().Set("Access-Control-Allow-Headers", "Api-Version, Authorization, Client-Name, Content-Type, Csrf-Token, Prefer, If-Modified-Since, If-None-Match, If-Unmodified-Since, If-Match, X-Api-Version, X-Csrf-Token, X-Requested-With")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
