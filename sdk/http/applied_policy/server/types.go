// Code generated by goa v3.1.3, DO NOT EDIT.
//
// AppliedPolicy HTTP server types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	appliedpolicy "github.com/rightscale/policy_sdk/sdk/applied_policy"
	appliedpolicyviews "github.com/rightscale/policy_sdk/sdk/applied_policy/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "AppliedPolicy" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// template_href is the href of the policy template or published template that
	// is applied.
	TemplateHref *string `form:"template_href,omitempty" json:"template_href,omitempty" xml:"template_href,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// severity is the severity level of the incident.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
}

// UpdateRequestBody is the type of the "AppliedPolicy" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// name provides a name for this specific application of the policy.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
}

// CreateResponseBody is the type of the "AppliedPolicy" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the applied policy.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// CreateResponseBodySource is the type of the "AppliedPolicy" service "create"
// endpoint HTTP response body.
type CreateResponseBodySource struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodySource `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodySource `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// CreateResponseBodyLink is the type of the "AppliedPolicy" service "create"
// endpoint HTTP response body.
type CreateResponseBodyLink struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBody is the type of the "AppliedPolicy" service "show" endpoint
// HTTP response body.
type ShowResponseBody struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the applied policy.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodySource is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body.
type ShowResponseBodySource struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodySource `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodySource `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodyLink is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body.
type ShowResponseBodyLink struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowStatusResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body.
type ShowStatusResponseBody struct {
	// last_evaluation_start is the timestamp of the start of the last policy
	// evaluation.
	LastEvaluationStart *string `form:"last_evaluation_start,omitempty" json:"last_evaluation_start,omitempty" xml:"last_evaluation_start,omitempty"`
	// last_evaluation_finish is the timestamp of the finish of the last policy
	// evaluation. It is omitted if the policy is currently evaluating.
	LastEvaluationFinish *string `form:"last_evaluation_finish,omitempty" json:"last_evaluation_finish,omitempty" xml:"last_evaluation_finish,omitempty"`
	// next_evaluation_start is the timestamp of the next expected policy
	// evaluation start. It is omitted if the policy is currently evalutating.
	NextEvaluationStart *string `form:"next_evaluation_start,omitempty" json:"next_evaluation_start,omitempty" xml:"next_evaluation_start,omitempty"`
	// evaluation_error is the error message returned if the evaluation failed. On
	// success this attribute is empty.
	EvaluationError *string `form:"evaluation_error,omitempty" json:"evaluation_error,omitempty" xml:"evaluation_error,omitempty"`
	// evaluation_errored_at is the timestamp of the last evaluation error.
	EvaluationErroredAt *string `form:"evaluation_errored_at,omitempty" json:"evaluation_errored_at,omitempty" xml:"evaluation_errored_at,omitempty"`
}

// IndexOKResponseBody is the type of the "AppliedPolicy" service "index"
// endpoint HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of applied policies in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of applied policies.
	Items AppliedPolicyResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#applied_policy_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBodyLink is the type of the "AppliedPolicy" service "index"
// endpoint HTTP response body.
type IndexOKResponseBodyLink struct {
	// count is the number of applied policies in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of applied policies.
	Items AppliedPolicyResponseBodyLinkCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#applied_policy_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// CreateUnprocessableEntityResponseBody is the type of the "AppliedPolicy"
// service "create" endpoint HTTP response body for the "unprocessable_entity"
// error.
type CreateUnprocessableEntityResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateForbiddenResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBadRequestResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "bad_gateway" error.
type CreateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "bad_gateway" error.
type DeleteBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNotFoundResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "show" endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "AppliedPolicy" service "show"
// endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "show" endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowStatusNotFoundResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "not_found" error.
type ShowStatusNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowStatusUnauthorizedResponseBody is the type of the "AppliedPolicy"
// service "show_status" endpoint HTTP response body for the "unauthorized"
// error.
type ShowStatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowStatusForbiddenResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "forbidden" error.
type ShowStatusForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowStatusBadRequestResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "bad_request" error.
type ShowStatusBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowStatusBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "show_status" endpoint HTTP response body for the "bad_gateway" error.
type ShowStatusBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowStatusInternalErrorResponseBody is the type of the "AppliedPolicy"
// service "show_status" endpoint HTTP response body for the "internal_error"
// error.
type ShowStatusInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowLogNotFoundResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "not_found" error.
type ShowLogNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowLogUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "unauthorized" error.
type ShowLogUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowLogForbiddenResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "forbidden" error.
type ShowLogForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowLogBadRequestResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "bad_request" error.
type ShowLogBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowLogBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "bad_gateway" error.
type ShowLogBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowLogInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "show_log" endpoint HTTP response body for the "internal_error" error.
type ShowLogInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexForbiddenResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadRequestResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "index" endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvaluateNotFoundResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "not_found" error.
type EvaluateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvaluateUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "unauthorized" error.
type EvaluateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvaluateForbiddenResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "forbidden" error.
type EvaluateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvaluateBadRequestResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "bad_request" error.
type EvaluateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvaluateBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "bad_gateway" error.
type EvaluateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EvaluateInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "evaluate" endpoint HTTP response body for the "internal_error" error.
type EvaluateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUnauthorizedResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateForbiddenResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadGatewayResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "bad_gateway" error.
type UpdateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalErrorResponseBody is the type of the "AppliedPolicy" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// id is the Project ID
	ID uint `form:"id" json:"id" xml:"id"`
	// name is the Project Name
	Name string `form:"name" json:"name" xml:"name"`
	// org_id is the RightScale Organization ID
	OrgID uint `form:"org_id" json:"org_id" xml:"org_id"`
	// org_name is the RightScale Organization Name
	OrgName string `form:"org_name" json:"org_name" xml:"org_name"`
}

// PolicyTemplateResponseBodyLink is used to define fields on response body
// types.
type PolicyTemplateResponseBodyLink struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID uint `form:"id" json:"id" xml:"id"`
	// email of user
	Email string `form:"email" json:"email" xml:"email"`
	// name of user, usually of the form 'First Last'
	Name string `form:"name" json:"name" xml:"name"`
}

// PublishedTemplateResponseBodyLink is used to define fields on response body
// types.
type PublishedTemplateResponseBodyLink struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the published template update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// built_in is a flag to indicate whether the published template is a
	// "built-in" RS-supplied template.
	BuiltIn *bool `form:"built_in,omitempty" json:"built_in,omitempty" xml:"built_in,omitempty"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name string `form:"name" json:"name" xml:"name"`
	// label of option
	Label string `form:"label" json:"label" xml:"label"`
	// type of option
	Type string `form:"type" json:"type" xml:"type"`
	// value of option
	Value interface{} `form:"value" json:"value" xml:"value"`
	// no_echo determines whether the value of the configuration option should be
	// hidden in UIs and API responses.
	NoEcho bool `form:"no_echo,omitempty" json:"no_echo,omitempty" xml:"no_echo,omitempty"`
}

// PolicyTemplateResponseBodySource is used to define fields on response body
// types.
type PolicyTemplateResponseBodySource struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PublishedTemplateResponseBodySource is used to define fields on response
// body types.
type PublishedTemplateResponseBodySource struct {
	// id identifies a published template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the published template in the organization.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the self-referential href of the published template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is published template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the policy template that this was published from is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#published_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// AppliedPolicyResponseBodyCollection is used to define fields on response
// body types.
type AppliedPolicyResponseBodyCollection []*AppliedPolicyResponseBody

// AppliedPolicyResponseBody is used to define fields on response body types.
type AppliedPolicyResponseBody struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// Project represents a RightScale project and provides some information about
	// the project.
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// description provides a human readable description for this specific
	// application of the policy.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// doc_link is a HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the applied policy update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// severity defines the severity level of incidents raised from this applied
	// policy.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// category is the type categorization of the applied policy.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// dry_run is a flag used for testing a policy so that an incident can be
	// raised without performing an action.
	DryRun *bool `form:"dry_run,omitempty" json:"dry_run,omitempty" xml:"dry_run,omitempty"`
	// skip_approvals means that any approval actions will be skipped and all
	// actions automatically run.
	SkipApprovals *bool `form:"skip_approvals,omitempty" json:"skip_approvals,omitempty" xml:"skip_approvals,omitempty"`
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials map of credentials to use. The key in the map is the credential
	// name from the PolicyTemplate and the value is the credential identifier from
	// the Credentials management page.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// status is used to identify the current status of the applied policy.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error is the error message returned if the evaluation failed. On success
	// this attribute is empty.
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// errored_at is the applied policy error timestamp in RFC3339 format. On
	// success this attribute is empty.
	ErroredAt *string `form:"errored_at,omitempty" json:"errored_at,omitempty" xml:"errored_at,omitempty"`
	// scope is whether the policy is managed at an org-wide or project level.
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// AppliedPolicyResponseBodyLinkCollection is used to define fields on response
// body types.
type AppliedPolicyResponseBodyLinkCollection []*AppliedPolicyResponseBodyLink

// AppliedPolicyResponseBodyLink is used to define fields on response body
// types.
type AppliedPolicyResponseBodyLink struct {
	// id identifies an applied policy by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// policy_aggregate_id is set if applied policy is part of an policy aggregate.
	PolicyAggregateID *string `form:"policy_aggregate_id,omitempty" json:"policy_aggregate_id,omitempty" xml:"policy_aggregate_id,omitempty"`
	// incident_aggregate_id is set if applied incident is part of an policy
	// aggregate.
	IncidentAggregateID *string `form:"incident_aggregate_id,omitempty" json:"incident_aggregate_id,omitempty" xml:"incident_aggregate_id,omitempty"`
	// name provides a name for this specific application of the policy.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the applied policy.
	Href string `form:"href" json:"href" xml:"href"`
	// policy_template links to key attributes of the policy template from which
	// the applied policy originated.
	PolicyTemplate *PolicyTemplateResponseBodyLink `form:"policy_template,omitempty" json:"policy_template,omitempty" xml:"policy_template,omitempty"`
	// published_template links to key attributes of the published template from
	// which the applied policy originated.
	PublishedTemplate *PublishedTemplateResponseBodyLink `form:"published_template,omitempty" json:"published_template,omitempty" xml:"published_template,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the applied policy creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// frequency specifies the frequency with which to run policy evaluations
	Frequency *string `form:"frequency,omitempty" json:"frequency,omitempty" xml:"frequency,omitempty"`
	// kind is "gov#applied_policy".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ConfigurationOptionCreateTypeRequestBody is used to define fields on request
// body types.
type ConfigurationOptionCreateTypeRequestBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// value of option
	Value interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "AppliedPolicy" service.
func NewCreateResponseBody(res *appliedpolicyviews.AppliedPolicyView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:                  *res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                *res.Name,
		Href:                *res.Href,
		Description:         res.Description,
		DocLink:             res.DocLink,
		CreatedAt:           res.CreatedAt,
		UpdatedAt:           res.UpdatedAt,
		Severity:            res.Severity,
		Category:            res.Category,
		Frequency:           res.Frequency,
		DryRun:              res.DryRun,
		SkipApprovals:       res.SkipApprovals,
		Status:              res.Status,
		Error:               res.Error,
		ErroredAt:           res.ErroredAt,
		Scope:               res.Scope,
		Kind:                *res.Kind,
	}
	if res.Project != nil {
		body.Project = marshalAppliedpolicyviewsProjectViewToProjectResponseBody(res.Project)
	}
	if res.PolicyTemplate != nil {
		body.PolicyTemplate = marshalAppliedpolicyviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(res.PolicyTemplate)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalAppliedpolicyviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(res.PublishedTemplate)
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalAppliedpolicyviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalAppliedpolicyviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if res.Credentials != nil {
		body.Credentials = make(map[string]string, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			tv := val
			body.Credentials[tk] = tv
		}
	}
	return body
}

// NewCreateResponseBodySource builds the HTTP response body from the result of
// the "create" endpoint of the "AppliedPolicy" service.
func NewCreateResponseBodySource(res *appliedpolicyviews.AppliedPolicyView) *CreateResponseBodySource {
	body := &CreateResponseBodySource{
		ID:                  *res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                *res.Name,
		Href:                *res.Href,
		Kind:                *res.Kind,
	}
	if res.Project != nil {
		body.Project = marshalAppliedpolicyviewsProjectViewToProjectResponseBody(res.Project)
	}
	if res.PolicyTemplate != nil {
		body.PolicyTemplate = marshalAppliedpolicyviewsPolicyTemplateViewToPolicyTemplateResponseBodySource(res.PolicyTemplate)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalAppliedpolicyviewsPublishedTemplateViewToPublishedTemplateResponseBodySource(res.PublishedTemplate)
	}
	return body
}

// NewCreateResponseBodyLink builds the HTTP response body from the result of
// the "create" endpoint of the "AppliedPolicy" service.
func NewCreateResponseBodyLink(res *appliedpolicyviews.AppliedPolicyView) *CreateResponseBodyLink {
	body := &CreateResponseBodyLink{
		ID:                  *res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                *res.Name,
		Href:                *res.Href,
		CreatedAt:           res.CreatedAt,
		Frequency:           res.Frequency,
		Kind:                *res.Kind,
	}
	if res.PolicyTemplate != nil {
		body.PolicyTemplate = marshalAppliedpolicyviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(res.PolicyTemplate)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalAppliedpolicyviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(res.PublishedTemplate)
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalAppliedpolicyviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "AppliedPolicy" service.
func NewShowResponseBody(res *appliedpolicyviews.AppliedPolicyView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:                  *res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                *res.Name,
		Href:                *res.Href,
		Description:         res.Description,
		DocLink:             res.DocLink,
		CreatedAt:           res.CreatedAt,
		UpdatedAt:           res.UpdatedAt,
		Severity:            res.Severity,
		Category:            res.Category,
		Frequency:           res.Frequency,
		DryRun:              res.DryRun,
		SkipApprovals:       res.SkipApprovals,
		Status:              res.Status,
		Error:               res.Error,
		ErroredAt:           res.ErroredAt,
		Scope:               res.Scope,
		Kind:                *res.Kind,
	}
	if res.Project != nil {
		body.Project = marshalAppliedpolicyviewsProjectViewToProjectResponseBody(res.Project)
	}
	if res.PolicyTemplate != nil {
		body.PolicyTemplate = marshalAppliedpolicyviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(res.PolicyTemplate)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalAppliedpolicyviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(res.PublishedTemplate)
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalAppliedpolicyviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = marshalAppliedpolicyviewsConfigurationOptionViewToConfigurationOptionResponseBody(val)
		}
	}
	if res.Credentials != nil {
		body.Credentials = make(map[string]string, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			tv := val
			body.Credentials[tk] = tv
		}
	}
	return body
}

// NewShowResponseBodySource builds the HTTP response body from the result of
// the "show" endpoint of the "AppliedPolicy" service.
func NewShowResponseBodySource(res *appliedpolicyviews.AppliedPolicyView) *ShowResponseBodySource {
	body := &ShowResponseBodySource{
		ID:                  *res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                *res.Name,
		Href:                *res.Href,
		Kind:                *res.Kind,
	}
	if res.Project != nil {
		body.Project = marshalAppliedpolicyviewsProjectViewToProjectResponseBody(res.Project)
	}
	if res.PolicyTemplate != nil {
		body.PolicyTemplate = marshalAppliedpolicyviewsPolicyTemplateViewToPolicyTemplateResponseBodySource(res.PolicyTemplate)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalAppliedpolicyviewsPublishedTemplateViewToPublishedTemplateResponseBodySource(res.PublishedTemplate)
	}
	return body
}

// NewShowResponseBodyLink builds the HTTP response body from the result of the
// "show" endpoint of the "AppliedPolicy" service.
func NewShowResponseBodyLink(res *appliedpolicyviews.AppliedPolicyView) *ShowResponseBodyLink {
	body := &ShowResponseBodyLink{
		ID:                  *res.ID,
		PolicyAggregateID:   res.PolicyAggregateID,
		IncidentAggregateID: res.IncidentAggregateID,
		Name:                *res.Name,
		Href:                *res.Href,
		CreatedAt:           res.CreatedAt,
		Frequency:           res.Frequency,
		Kind:                *res.Kind,
	}
	if res.PolicyTemplate != nil {
		body.PolicyTemplate = marshalAppliedpolicyviewsPolicyTemplateViewToPolicyTemplateResponseBodyLink(res.PolicyTemplate)
	}
	if res.PublishedTemplate != nil {
		body.PublishedTemplate = marshalAppliedpolicyviewsPublishedTemplateViewToPublishedTemplateResponseBodyLink(res.PublishedTemplate)
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalAppliedpolicyviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	return body
}

// NewShowStatusResponseBody builds the HTTP response body from the result of
// the "show_status" endpoint of the "AppliedPolicy" service.
func NewShowStatusResponseBody(res *appliedpolicyviews.AppliedPolicyStatusView) *ShowStatusResponseBody {
	body := &ShowStatusResponseBody{
		LastEvaluationStart:  res.LastEvaluationStart,
		LastEvaluationFinish: res.LastEvaluationFinish,
		NextEvaluationStart:  res.NextEvaluationStart,
		EvaluationError:      res.EvaluationError,
		EvaluationErroredAt:  res.EvaluationErroredAt,
	}
	return body
}

// NewIndexOKResponseBody builds the HTTP response body from the result of the
// "index" endpoint of the "AppliedPolicy" service.
func NewIndexOKResponseBody(res *appliedpolicyviews.AppliedPolicyListView) *IndexOKResponseBody {
	body := &IndexOKResponseBody{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*AppliedPolicyResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalAppliedpolicyviewsAppliedPolicyViewToAppliedPolicyResponseBody(val)
		}
	}
	return body
}

// NewIndexOKResponseBodyLink builds the HTTP response body from the result of
// the "index" endpoint of the "AppliedPolicy" service.
func NewIndexOKResponseBodyLink(res *appliedpolicyviews.AppliedPolicyListView) *IndexOKResponseBodyLink {
	body := &IndexOKResponseBodyLink{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*AppliedPolicyResponseBodyLink, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalAppliedpolicyviewsAppliedPolicyViewToAppliedPolicyResponseBodyLink(val)
		}
	}
	return body
}

// NewCreateUnprocessableEntityResponseBody builds the HTTP response body from
// the result of the "create" endpoint of the "AppliedPolicy" service.
func NewCreateUnprocessableEntityResponseBody(res *goa.ServiceError) *CreateUnprocessableEntityResponseBody {
	body := &CreateUnprocessableEntityResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "AppliedPolicy" service.
func NewCreateUnauthorizedResponseBody(res *goa.ServiceError) *CreateUnauthorizedResponseBody {
	body := &CreateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateForbiddenResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "AppliedPolicy" service.
func NewCreateForbiddenResponseBody(res *goa.ServiceError) *CreateForbiddenResponseBody {
	body := &CreateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "AppliedPolicy" service.
func NewCreateBadRequestResponseBody(res *goa.ServiceError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBadGatewayResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "AppliedPolicy" service.
func NewCreateBadGatewayResponseBody(res *goa.ServiceError) *CreateBadGatewayResponseBody {
	body := &CreateBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInternalErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "AppliedPolicy" service.
func NewCreateInternalErrorResponseBody(res *goa.ServiceError) *CreateInternalErrorResponseBody {
	body := &CreateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "AppliedPolicy" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "AppliedPolicy" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "AppliedPolicy" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "AppliedPolicy" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadGatewayResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "AppliedPolicy" service.
func NewDeleteBadGatewayResponseBody(res *goa.ServiceError) *DeleteBadGatewayResponseBody {
	body := &DeleteBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "AppliedPolicy" service.
func NewDeleteInternalErrorResponseBody(res *goa.ServiceError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "AppliedPolicy" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "AppliedPolicy" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "AppliedPolicy" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "AppliedPolicy" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "AppliedPolicy" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "AppliedPolicy" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowStatusNotFoundResponseBody builds the HTTP response body from the
// result of the "show_status" endpoint of the "AppliedPolicy" service.
func NewShowStatusNotFoundResponseBody(res *goa.ServiceError) *ShowStatusNotFoundResponseBody {
	body := &ShowStatusNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowStatusUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show_status" endpoint of the "AppliedPolicy" service.
func NewShowStatusUnauthorizedResponseBody(res *goa.ServiceError) *ShowStatusUnauthorizedResponseBody {
	body := &ShowStatusUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowStatusForbiddenResponseBody builds the HTTP response body from the
// result of the "show_status" endpoint of the "AppliedPolicy" service.
func NewShowStatusForbiddenResponseBody(res *goa.ServiceError) *ShowStatusForbiddenResponseBody {
	body := &ShowStatusForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowStatusBadRequestResponseBody builds the HTTP response body from the
// result of the "show_status" endpoint of the "AppliedPolicy" service.
func NewShowStatusBadRequestResponseBody(res *goa.ServiceError) *ShowStatusBadRequestResponseBody {
	body := &ShowStatusBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowStatusBadGatewayResponseBody builds the HTTP response body from the
// result of the "show_status" endpoint of the "AppliedPolicy" service.
func NewShowStatusBadGatewayResponseBody(res *goa.ServiceError) *ShowStatusBadGatewayResponseBody {
	body := &ShowStatusBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowStatusInternalErrorResponseBody builds the HTTP response body from
// the result of the "show_status" endpoint of the "AppliedPolicy" service.
func NewShowStatusInternalErrorResponseBody(res *goa.ServiceError) *ShowStatusInternalErrorResponseBody {
	body := &ShowStatusInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowLogNotFoundResponseBody builds the HTTP response body from the result
// of the "show_log" endpoint of the "AppliedPolicy" service.
func NewShowLogNotFoundResponseBody(res *goa.ServiceError) *ShowLogNotFoundResponseBody {
	body := &ShowLogNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowLogUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show_log" endpoint of the "AppliedPolicy" service.
func NewShowLogUnauthorizedResponseBody(res *goa.ServiceError) *ShowLogUnauthorizedResponseBody {
	body := &ShowLogUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowLogForbiddenResponseBody builds the HTTP response body from the
// result of the "show_log" endpoint of the "AppliedPolicy" service.
func NewShowLogForbiddenResponseBody(res *goa.ServiceError) *ShowLogForbiddenResponseBody {
	body := &ShowLogForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowLogBadRequestResponseBody builds the HTTP response body from the
// result of the "show_log" endpoint of the "AppliedPolicy" service.
func NewShowLogBadRequestResponseBody(res *goa.ServiceError) *ShowLogBadRequestResponseBody {
	body := &ShowLogBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowLogBadGatewayResponseBody builds the HTTP response body from the
// result of the "show_log" endpoint of the "AppliedPolicy" service.
func NewShowLogBadGatewayResponseBody(res *goa.ServiceError) *ShowLogBadGatewayResponseBody {
	body := &ShowLogBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowLogInternalErrorResponseBody builds the HTTP response body from the
// result of the "show_log" endpoint of the "AppliedPolicy" service.
func NewShowLogInternalErrorResponseBody(res *goa.ServiceError) *ShowLogInternalErrorResponseBody {
	body := &ShowLogInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexUnauthorizedResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "AppliedPolicy" service.
func NewIndexUnauthorizedResponseBody(res *goa.ServiceError) *IndexUnauthorizedResponseBody {
	body := &IndexUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexForbiddenResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "AppliedPolicy" service.
func NewIndexForbiddenResponseBody(res *goa.ServiceError) *IndexForbiddenResponseBody {
	body := &IndexForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadRequestResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "AppliedPolicy" service.
func NewIndexBadRequestResponseBody(res *goa.ServiceError) *IndexBadRequestResponseBody {
	body := &IndexBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadGatewayResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "AppliedPolicy" service.
func NewIndexBadGatewayResponseBody(res *goa.ServiceError) *IndexBadGatewayResponseBody {
	body := &IndexBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexInternalErrorResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "AppliedPolicy" service.
func NewIndexInternalErrorResponseBody(res *goa.ServiceError) *IndexInternalErrorResponseBody {
	body := &IndexInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvaluateNotFoundResponseBody builds the HTTP response body from the
// result of the "evaluate" endpoint of the "AppliedPolicy" service.
func NewEvaluateNotFoundResponseBody(res *goa.ServiceError) *EvaluateNotFoundResponseBody {
	body := &EvaluateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvaluateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "evaluate" endpoint of the "AppliedPolicy" service.
func NewEvaluateUnauthorizedResponseBody(res *goa.ServiceError) *EvaluateUnauthorizedResponseBody {
	body := &EvaluateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvaluateForbiddenResponseBody builds the HTTP response body from the
// result of the "evaluate" endpoint of the "AppliedPolicy" service.
func NewEvaluateForbiddenResponseBody(res *goa.ServiceError) *EvaluateForbiddenResponseBody {
	body := &EvaluateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvaluateBadRequestResponseBody builds the HTTP response body from the
// result of the "evaluate" endpoint of the "AppliedPolicy" service.
func NewEvaluateBadRequestResponseBody(res *goa.ServiceError) *EvaluateBadRequestResponseBody {
	body := &EvaluateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvaluateBadGatewayResponseBody builds the HTTP response body from the
// result of the "evaluate" endpoint of the "AppliedPolicy" service.
func NewEvaluateBadGatewayResponseBody(res *goa.ServiceError) *EvaluateBadGatewayResponseBody {
	body := &EvaluateBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEvaluateInternalErrorResponseBody builds the HTTP response body from the
// result of the "evaluate" endpoint of the "AppliedPolicy" service.
func NewEvaluateInternalErrorResponseBody(res *goa.ServiceError) *EvaluateInternalErrorResponseBody {
	body := &EvaluateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "AppliedPolicy" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "AppliedPolicy" service.
func NewUpdateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "AppliedPolicy" service.
func NewUpdateForbiddenResponseBody(res *goa.ServiceError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "AppliedPolicy" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadGatewayResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "AppliedPolicy" service.
func NewUpdateBadGatewayResponseBody(res *goa.ServiceError) *UpdateBadGatewayResponseBody {
	body := &UpdateBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "AppliedPolicy" service.
func NewUpdateInternalErrorResponseBody(res *goa.ServiceError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePayload builds a AppliedPolicy service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, projectID uint, apiVersion string, token *string) *appliedpolicy.CreatePayload {
	v := &appliedpolicy.CreatePayload{
		Name:         *body.Name,
		Description:  body.Description,
		TemplateHref: *body.TemplateHref,
		Severity:     body.Severity,
	}
	if body.Frequency != nil {
		v.Frequency = *body.Frequency
	}
	if body.DryRun != nil {
		v.DryRun = *body.DryRun
	}
	if body.SkipApprovals != nil {
		v.SkipApprovals = *body.SkipApprovals
	}
	if body.Frequency == nil {
		v.Frequency = "15 minutes"
	}
	if body.DryRun == nil {
		v.DryRun = false
	}
	if body.SkipApprovals == nil {
		v.SkipApprovals = false
	}
	if body.Options != nil {
		v.Options = make([]*appliedpolicy.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionCreateTypeRequestBodyToAppliedpolicyConfigurationOptionCreateType(val)
		}
	}
	if body.Credentials != nil {
		v.Credentials = make(map[string]string, len(body.Credentials))
		for key, val := range body.Credentials {
			tk := key
			tv := val
			v.Credentials[tk] = tv
		}
	}
	v.ProjectID = projectID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewDeletePayload builds a AppliedPolicy service delete endpoint payload.
func NewDeletePayload(projectID uint, policyID string, apiVersion string, token *string) *appliedpolicy.DeletePayload {
	v := &appliedpolicy.DeletePayload{}
	v.ProjectID = projectID
	v.PolicyID = policyID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewShowPayload builds a AppliedPolicy service show endpoint payload.
func NewShowPayload(projectID uint, policyID string, view *string, apiVersion string, token *string) *appliedpolicy.ShowPayload {
	v := &appliedpolicy.ShowPayload{}
	v.ProjectID = projectID
	v.PolicyID = policyID
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewShowStatusPayload builds a AppliedPolicy service show_status endpoint
// payload.
func NewShowStatusPayload(projectID uint, policyID string, apiVersion string, token *string) *appliedpolicy.ShowStatusPayload {
	v := &appliedpolicy.ShowStatusPayload{}
	v.ProjectID = projectID
	v.PolicyID = policyID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewShowLogPayload builds a AppliedPolicy service show_log endpoint payload.
func NewShowLogPayload(projectID uint, policyID string, apiVersion string, etag *string, token *string) *appliedpolicy.ShowLogPayload {
	v := &appliedpolicy.ShowLogPayload{}
	v.ProjectID = projectID
	v.PolicyID = policyID
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewIndexPayload builds a AppliedPolicy service index endpoint payload.
func NewIndexPayload(projectID uint, view *string, name []string, apiVersion string, etag *string, token *string) *appliedpolicy.IndexPayload {
	v := &appliedpolicy.IndexPayload{}
	v.ProjectID = projectID
	v.View = view
	v.Name = name
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewEvaluatePayload builds a AppliedPolicy service evaluate endpoint payload.
func NewEvaluatePayload(projectID uint, policyID string, apiVersion string, token *string) *appliedpolicy.EvaluatePayload {
	v := &appliedpolicy.EvaluatePayload{}
	v.ProjectID = projectID
	v.PolicyID = policyID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewUpdatePayload builds a AppliedPolicy service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, projectID uint, policyID string, apiVersion string, token *string) *appliedpolicy.UpdatePayload {
	v := &appliedpolicy.UpdatePayload{
		Name:          body.Name,
		Description:   body.Description,
		Frequency:     body.Frequency,
		DryRun:        body.DryRun,
		SkipApprovals: body.SkipApprovals,
		Severity:      body.Severity,
	}
	if body.Options != nil {
		v.Options = make([]*appliedpolicy.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionCreateTypeRequestBodyToAppliedpolicyConfigurationOptionCreateType(val)
		}
	}
	v.ProjectID = projectID
	v.PolicyID = policyID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TemplateHref == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("template_href", "body"))
	}
	if body.TemplateHref != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.template_href", *body.TemplateHref, "^/api/governance/(projects/[0-9]+/policy|orgs/[0-9]+/published)_templates/[0-9a-f]+$"))
	}
	if body.Frequency != nil {
		if !(*body.Frequency == "15 minutes" || *body.Frequency == "hourly" || *body.Frequency == "daily" || *body.Frequency == "weekly" || *body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", *body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionCreateTypeRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Frequency != nil {
		if !(*body.Frequency == "15 minutes" || *body.Frequency == "hourly" || *body.Frequency == "daily" || *body.Frequency == "weekly" || *body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", *body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionCreateTypeRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Severity != nil {
		if !(*body.Severity == "low" || *body.Severity == "medium" || *body.Severity == "high" || *body.Severity == "critical") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.severity", *body.Severity, []interface{}{"low", "medium", "high", "critical"}))
		}
	}
	return
}

// ValidateConfigurationOptionCreateTypeRequestBody runs the validations
// defined on ConfigurationOptionCreateTypeRequestBody
func ValidateConfigurationOptionCreateTypeRequestBody(body *ConfigurationOptionCreateTypeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
