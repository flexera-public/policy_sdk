// Code generated by goa v3.1.3, DO NOT EDIT.
//
// PolicyTemplate HTTP server types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	policytemplate "github.com/rightscale/policy_sdk/sdk/policy_template"
	policytemplateviews "github.com/rightscale/policy_sdk/sdk/policy_template/views"
	goa "goa.design/goa/v3/pkg"
)

// CompileRequestBody is the type of the "PolicyTemplate" service "compile"
// endpoint HTTP request body.
type CompileRequestBody struct {
	// filename is the name of the policy template source code file.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
}

// UploadRequestBody is the type of the "PolicyTemplate" service "upload"
// endpoint HTTP request body.
type UploadRequestBody struct {
	// filename is the name of the policy template source code file.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
}

// UpdateRequestBody is the type of the "PolicyTemplate" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// filename is the name of the policy template source code file.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
}

// RetrieveDataRequestBody is the type of the "PolicyTemplate" service
// "retrieve_data" endpoint HTTP request body.
type RetrieveDataRequestBody struct {
	// options lists the configuration options used to parameterize the policy.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// credentials is the map of name and credential used to launch the policy.
	Credentials map[string]string `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// names is a filter to only retrieve datasources or resources that match the
	// given names
	Names []string `form:"names,omitempty" json:"names,omitempty" xml:"names,omitempty"`
}

// UploadResponseBody is the type of the "PolicyTemplate" service "upload"
// endpoint HTTP response body.
type UploadResponseBody struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UploadResponseBodyExtended is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body.
type UploadResponseBodyExtended struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UploadResponseBodySource is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body.
type UploadResponseBodySource struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UploadResponseBodyLink is the type of the "PolicyTemplate" service "upload"
// endpoint HTTP response body.
type UploadResponseBodyLink struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UpdateResponseBody is the type of the "PolicyTemplate" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UpdateResponseBodyExtended is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body.
type UpdateResponseBodyExtended struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UpdateResponseBodySource is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body.
type UpdateResponseBodySource struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// UpdateResponseBodyLink is the type of the "PolicyTemplate" service "update"
// endpoint HTTP response body.
type UpdateResponseBodyLink struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// RetrieveDataResponseBody is the type of the "PolicyTemplate" service
// "retrieve_data" endpoint HTTP response body.
type RetrieveDataResponseBody []*DataResponse

// ShowResponseBody is the type of the "PolicyTemplate" service "show" endpoint
// HTTP response body.
type ShowResponseBody struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodyExtended is the type of the "PolicyTemplate" service "show"
// endpoint HTTP response body.
type ShowResponseBodyExtended struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodySource is the type of the "PolicyTemplate" service "show"
// endpoint HTTP response body.
type ShowResponseBodySource struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// filename is the name of the file that was uploaded to create the policy
	// template.
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// source is the policy template source code.
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodyLink is the type of the "PolicyTemplate" service "show"
// endpoint HTTP response body.
type ShowResponseBodyLink struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// updated_by is the RightScale user that updated the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBody is the type of the "PolicyTemplate" service "index"
// endpoint HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of policy templates in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of policy templates.
	Items PolicyTemplateResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#policy_template_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBodyExtended is the type of the "PolicyTemplate" service
// "index" endpoint HTTP response body.
type IndexOKResponseBodyExtended struct {
	// count is the number of policy templates in the list.
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of policy templates.
	Items PolicyTemplateResponseBodyExtendedCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#policy_template_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// CompileUnauthorizedResponseBody is the type of the "PolicyTemplate" service
// "compile" endpoint HTTP response body for the "unauthorized" error.
type CompileUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompileForbiddenResponseBody is the type of the "PolicyTemplate" service
// "compile" endpoint HTTP response body for the "forbidden" error.
type CompileForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompileBadRequestResponseBody is the type of the "PolicyTemplate" service
// "compile" endpoint HTTP response body for the "bad_request" error.
type CompileBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompileBadGatewayResponseBody is the type of the "PolicyTemplate" service
// "compile" endpoint HTTP response body for the "bad_gateway" error.
type CompileBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompileInternalErrorResponseBody is the type of the "PolicyTemplate" service
// "compile" endpoint HTTP response body for the "internal_error" error.
type CompileInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompileInvalidTemplateResponseBody is the type of the "PolicyTemplate"
// service "compile" endpoint HTTP response body for the "invalid_template"
// error.
type CompileInvalidTemplateResponseBody struct {
	// id is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// errors is a JSON Array of compilation errors.
	Errors []*CompilationErrorResponseBody `form:"errors" json:"errors" xml:"errors"`
	// name of error
	Name string `form:"name" json:"name" xml:"name"`
}

// UploadUnauthorizedResponseBody is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body for the "unauthorized" error.
type UploadUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadForbiddenResponseBody is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body for the "forbidden" error.
type UploadForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadBadRequestResponseBody is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body for the "bad_request" error.
type UploadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadBadGatewayResponseBody is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body for the "bad_gateway" error.
type UploadBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadInternalErrorResponseBody is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body for the "internal_error" error.
type UploadInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadInvalidTemplateResponseBody is the type of the "PolicyTemplate"
// service "upload" endpoint HTTP response body for the "invalid_template"
// error.
type UploadInvalidTemplateResponseBody struct {
	// id is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// errors is a JSON Array of compilation errors.
	Errors []*CompilationErrorResponseBody `form:"errors" json:"errors" xml:"errors"`
	// name of error
	Name string `form:"name" json:"name" xml:"name"`
}

// UploadConflictResponseBody is the type of the "PolicyTemplate" service
// "upload" endpoint HTTP response body for the "conflict" error.
type UploadConflictResponseBody struct {
	// a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// name of error.
	Name string `form:"name" json:"name" xml:"name"`
	// updatable indicates whether a 'create' request error can be resolved by
	// making an 'update' request instead. It is used to indicate whether a
	// resource is built-in and whether the user has permission to modify it.
	Updatable bool `form:"updatable" json:"updatable" xml:"updatable"`
}

// UpdateNotFoundResponseBody is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUnauthorizedResponseBody is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateForbiddenResponseBody is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadGatewayResponseBody is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body for the "bad_gateway" error.
type UpdateBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalErrorResponseBody is the type of the "PolicyTemplate" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInvalidTemplateResponseBody is the type of the "PolicyTemplate"
// service "update" endpoint HTTP response body for the "invalid_template"
// error.
type UpdateInvalidTemplateResponseBody struct {
	// id is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// errors is a JSON Array of compilation errors.
	Errors []*CompilationErrorResponseBody `form:"errors" json:"errors" xml:"errors"`
	// name of error
	Name string `form:"name" json:"name" xml:"name"`
}

// RetrieveDataUnprocessableEntityResponseBody is the type of the
// "PolicyTemplate" service "retrieve_data" endpoint HTTP response body for the
// "unprocessable_entity" error.
type RetrieveDataUnprocessableEntityResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RetrieveDataUnauthorizedResponseBody is the type of the "PolicyTemplate"
// service "retrieve_data" endpoint HTTP response body for the "unauthorized"
// error.
type RetrieveDataUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RetrieveDataForbiddenResponseBody is the type of the "PolicyTemplate"
// service "retrieve_data" endpoint HTTP response body for the "forbidden"
// error.
type RetrieveDataForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RetrieveDataBadRequestResponseBody is the type of the "PolicyTemplate"
// service "retrieve_data" endpoint HTTP response body for the "bad_request"
// error.
type RetrieveDataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RetrieveDataBadGatewayResponseBody is the type of the "PolicyTemplate"
// service "retrieve_data" endpoint HTTP response body for the "bad_gateway"
// error.
type RetrieveDataBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RetrieveDataInternalErrorResponseBody is the type of the "PolicyTemplate"
// service "retrieve_data" endpoint HTTP response body for the "internal_error"
// error.
type RetrieveDataInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNotFoundResponseBody is the type of the "PolicyTemplate" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "PolicyTemplate" service
// "show" endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "PolicyTemplate" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "PolicyTemplate" service
// "show" endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "PolicyTemplate" service
// "show" endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "PolicyTemplate" service
// "show" endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexUnauthorizedResponseBody is the type of the "PolicyTemplate" service
// "index" endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexForbiddenResponseBody is the type of the "PolicyTemplate" service
// "index" endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadRequestResponseBody is the type of the "PolicyTemplate" service
// "index" endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadGatewayResponseBody is the type of the "PolicyTemplate" service
// "index" endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexInternalErrorResponseBody is the type of the "PolicyTemplate" service
// "index" endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "PolicyTemplate" service
// "delete" endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "PolicyTemplate" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "PolicyTemplate" service
// "delete" endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "PolicyTemplate" service
// "delete" endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadGatewayResponseBody is the type of the "PolicyTemplate" service
// "delete" endpoint HTTP response body for the "bad_gateway" error.
type DeleteBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalErrorResponseBody is the type of the "PolicyTemplate" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompilationErrorResponseBody is used to define fields on response body types.
type CompilationErrorResponseBody struct {
	// origin includes the template name and line number which generated the error.
	Origin string `form:"origin" json:"origin" xml:"origin"`
	// problem is the kind of error.
	Problem string `form:"problem" json:"problem" xml:"problem"`
	// summary includes detailed error information.
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// resolutions indicates how to resolve the error.
	Resolution string `form:"resolution" json:"resolution" xml:"resolution"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID uint `form:"id" json:"id" xml:"id"`
	// email of user
	Email string `form:"email" json:"email" xml:"email"`
	// name of user, usually of the form 'First Last'
	Name string `form:"name" json:"name" xml:"name"`
}

// PermissionResponseBody is used to define fields on response body types.
type PermissionResponseBody struct {
	// Name of a permission
	Name string `json:"name"`
	// Label is used in the UI
	Label *string `json:"label"`
	// List of resource names the permission is applied to
	Resources []string `json:"resources"`
	// List of action names the permission is applied to
	Actions []string `json:"actions"`
}

// ParameterResponseBody is used to define fields on response body types.
type ParameterResponseBody struct {
	// Name of the parameter
	Name string `json:"name"`
	// Type of the parameter
	Type string `json:"type"`
	// Label to show in the UI
	Label string `json:"label"`
	// The index of this parameter in the list
	Index uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpResponseBody `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpResponseBody is used to define fields on response body types.
type RegexpResponseBody struct {
	// Pattern is the regular expression pattern.
	Pattern string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// Name in policy template source code
	Name string `json:"name"`
	// Schemes of credentials service resource supported.
	Schemes []string `json:"schemes"`
	// Label for the auth reference
	Label string `json:"label"`
	// Description of what types of permissions need to be provided by auth.
	Description *string `json:"description"`
	// Tags is an optional filter to only show credentials matching a certain tag.
	Tags []*CredentialsTagResponseBody `json:"tags"`
}

// CredentialsTagResponseBody is used to define fields on response body types.
type CredentialsTagResponseBody struct {
	// Key is the tag key.
	Key string `json:"key"`
	// Value is the tag value.
	Value string `json:"value"`
}

// DataResponse is used to define fields on response body types.
type DataResponse struct {
	// name is the unique name of the datasource.
	Name string `form:"name" json:"name" xml:"name"`
	// type is is either Resource or Datasource
	Type string `form:"type" json:"type" xml:"type"`
	// is the extracted data
	Data interface{} `form:"data" json:"data" xml:"data"`
}

// PolicyTemplateResponseBodyCollection is used to define fields on response
// body types.
type PolicyTemplateResponseBodyCollection []*PolicyTemplateResponseBody

// PolicyTemplateResponseBody is used to define fields on response body types.
type PolicyTemplateResponseBody struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// PolicyTemplateResponseBodyExtendedCollection is used to define fields on
// response body types.
type PolicyTemplateResponseBodyExtendedCollection []*PolicyTemplateResponseBodyExtended

// PolicyTemplateResponseBodyExtended is used to define fields on response body
// types.
type PolicyTemplateResponseBodyExtended struct {
	// id identifies a policy template by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// name is the unique name of the policy template in the project.
	Name string `form:"name" json:"name" xml:"name"`
	// project_id is the ID of the project that the policy template applies to.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// rs_pt_ver is the policy engine version.
	RsPtVer *uint `form:"rs_pt_ver,omitempty" json:"rs_pt_ver,omitempty" xml:"rs_pt_ver,omitempty"`
	// short_description is the short description of the policy template.
	ShortDescription *string `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	// long_description is the long description of the policy template. The content
	// can be markdown.
	LongDescription *string `form:"long_description,omitempty" json:"long_description,omitempty" xml:"long_description,omitempty"`
	// doc_link is an HTTP URI to a page containing detailed documentation for the
	// policy.
	DocLink *string `form:"doc_link,omitempty" json:"doc_link,omitempty" xml:"doc_link,omitempty"`
	// info is an arbitrary set of key/value pairs that provide additional
	// information such as the policy author, support contact information, etc.
	Info map[string]string `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// default_frequency defines the interval the template will be run unless set
	// differently during application.
	DefaultFrequency *string `form:"default_frequency,omitempty" json:"default_frequency,omitempty" xml:"default_frequency,omitempty"`
	// href is the href of the policy template.
	Href string `form:"href" json:"href" xml:"href"`
	// fingerprint is a SHA created during compilation. It is used to determine if
	// the template is outdated.
	Fingerprint string `form:"fingerprint" json:"fingerprint" xml:"fingerprint"`
	// category is the type categorization of the policy template.
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// created_by is the RightScale user that created the policy template.
	CreatedBy *UserResponseBody `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// created_at is the policy template creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// created_by is the RightScale user that created the policy template.
	UpdatedBy *UserResponseBody `form:"updated_by,omitempty" json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// permissions is a list of permissions required to run the policy.
	Permissions map[string]*PermissionResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// required_roles is a list of governance roles, derived from permissions,
	// required to run the policy.
	RequiredRoles []string `form:"required_roles,omitempty" json:"required_roles,omitempty" xml:"required_roles,omitempty"`
	// parameters is a list of parameters required to apply the policy.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// severity defines the severity level of incidents raised from this policy
	// template.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty" xml:"severity,omitempty"`
	// tenancy indicates whether this template can be run across multiple projects
	// or is restricted to a single project.
	Tenancy *string `form:"tenancy,omitempty" json:"tenancy,omitempty" xml:"tenancy,omitempty"`
	// credentials is a list of authorization for external APIs needed to run the
	// policy.
	Credentials map[string]*CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
	// kind is "gov#policy_template".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ConfigurationOptionCreateTypeRequestBody is used to define fields on request
// body types.
type ConfigurationOptionCreateTypeRequestBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// value of option
	Value interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewUploadResponseBody builds the HTTP response body from the result of the
// "upload" endpoint of the "PolicyTemplate" service.
func NewUploadResponseBody(res *policytemplateviews.PolicyTemplateView) *UploadResponseBody {
	body := &UploadResponseBody{
		ID:               *res.ID,
		Name:             *res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             *res.Href,
		Fingerprint:      *res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             *res.Kind,
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		body.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			body.RequiredRoles[i] = val
		}
	}
	return body
}

// NewUploadResponseBodyExtended builds the HTTP response body from the result
// of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadResponseBodyExtended(res *policytemplateviews.PolicyTemplateView) *UploadResponseBodyExtended {
	body := &UploadResponseBodyExtended{
		ID:               *res.ID,
		Name:             *res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		LongDescription:  res.LongDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             *res.Href,
		Fingerprint:      *res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             *res.Kind,
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	if res.Permissions != nil {
		body.Permissions = make(map[string]*PermissionResponseBody, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			body.Permissions[tk] = marshalPolicytemplateviewsPermissionViewToPermissionResponseBody(val)
		}
	}
	if res.RequiredRoles != nil {
		body.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			body.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		body.Parameters = make(map[string]*ParameterResponseBody, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			body.Parameters[tk] = marshalPolicytemplateviewsParameterViewToParameterResponseBody(val)
		}
	}
	if res.Credentials != nil {
		body.Credentials = make(map[string]*CredentialsResponseBody, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			body.Credentials[tk] = marshalPolicytemplateviewsCredentialsViewToCredentialsResponseBody(val)
		}
	}
	return body
}

// NewUploadResponseBodySource builds the HTTP response body from the result of
// the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadResponseBodySource(res *policytemplateviews.PolicyTemplateView) *UploadResponseBodySource {
	body := &UploadResponseBodySource{
		ID:          *res.ID,
		Name:        *res.Name,
		Href:        *res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: *res.Fingerprint,
		Kind:        *res.Kind,
	}
	return body
}

// NewUploadResponseBodyLink builds the HTTP response body from the result of
// the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadResponseBodyLink(res *policytemplateviews.PolicyTemplateView) *UploadResponseBodyLink {
	body := &UploadResponseBodyLink{
		ID:          *res.ID,
		Name:        *res.Name,
		Href:        *res.Href,
		Fingerprint: *res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		Kind:        *res.Kind,
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "PolicyTemplate" service.
func NewUpdateResponseBody(res *policytemplateviews.PolicyTemplateView) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:               *res.ID,
		Name:             *res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             *res.Href,
		Fingerprint:      *res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             *res.Kind,
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		body.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			body.RequiredRoles[i] = val
		}
	}
	return body
}

// NewUpdateResponseBodyExtended builds the HTTP response body from the result
// of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateResponseBodyExtended(res *policytemplateviews.PolicyTemplateView) *UpdateResponseBodyExtended {
	body := &UpdateResponseBodyExtended{
		ID:               *res.ID,
		Name:             *res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		LongDescription:  res.LongDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             *res.Href,
		Fingerprint:      *res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             *res.Kind,
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	if res.Permissions != nil {
		body.Permissions = make(map[string]*PermissionResponseBody, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			body.Permissions[tk] = marshalPolicytemplateviewsPermissionViewToPermissionResponseBody(val)
		}
	}
	if res.RequiredRoles != nil {
		body.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			body.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		body.Parameters = make(map[string]*ParameterResponseBody, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			body.Parameters[tk] = marshalPolicytemplateviewsParameterViewToParameterResponseBody(val)
		}
	}
	if res.Credentials != nil {
		body.Credentials = make(map[string]*CredentialsResponseBody, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			body.Credentials[tk] = marshalPolicytemplateviewsCredentialsViewToCredentialsResponseBody(val)
		}
	}
	return body
}

// NewUpdateResponseBodySource builds the HTTP response body from the result of
// the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateResponseBodySource(res *policytemplateviews.PolicyTemplateView) *UpdateResponseBodySource {
	body := &UpdateResponseBodySource{
		ID:          *res.ID,
		Name:        *res.Name,
		Href:        *res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: *res.Fingerprint,
		Kind:        *res.Kind,
	}
	return body
}

// NewUpdateResponseBodyLink builds the HTTP response body from the result of
// the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateResponseBodyLink(res *policytemplateviews.PolicyTemplateView) *UpdateResponseBodyLink {
	body := &UpdateResponseBodyLink{
		ID:          *res.ID,
		Name:        *res.Name,
		Href:        *res.Href,
		Fingerprint: *res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		Kind:        *res.Kind,
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	return body
}

// NewRetrieveDataResponseBody builds the HTTP response body from the result of
// the "retrieve_data" endpoint of the "PolicyTemplate" service.
func NewRetrieveDataResponseBody(res []*policytemplate.Data) RetrieveDataResponseBody {
	body := make([]*DataResponse, len(res))
	for i, val := range res {
		body[i] = marshalPolicytemplateDataToDataResponse(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "PolicyTemplate" service.
func NewShowResponseBody(res *policytemplateviews.PolicyTemplateView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:               *res.ID,
		Name:             *res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             *res.Href,
		Fingerprint:      *res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             *res.Kind,
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	if res.RequiredRoles != nil {
		body.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			body.RequiredRoles[i] = val
		}
	}
	return body
}

// NewShowResponseBodyExtended builds the HTTP response body from the result of
// the "show" endpoint of the "PolicyTemplate" service.
func NewShowResponseBodyExtended(res *policytemplateviews.PolicyTemplateView) *ShowResponseBodyExtended {
	body := &ShowResponseBodyExtended{
		ID:               *res.ID,
		Name:             *res.Name,
		ProjectID:        res.ProjectID,
		RsPtVer:          res.RsPtVer,
		ShortDescription: res.ShortDescription,
		LongDescription:  res.LongDescription,
		DocLink:          res.DocLink,
		DefaultFrequency: res.DefaultFrequency,
		Href:             *res.Href,
		Fingerprint:      *res.Fingerprint,
		Category:         res.Category,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
		Severity:         res.Severity,
		Tenancy:          res.Tenancy,
		Kind:             *res.Kind,
	}
	if res.Info != nil {
		body.Info = make(map[string]string, len(res.Info))
		for key, val := range res.Info {
			tk := key
			tv := val
			body.Info[tk] = tv
		}
	}
	if res.CreatedBy != nil {
		body.CreatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.CreatedBy)
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	if res.Permissions != nil {
		body.Permissions = make(map[string]*PermissionResponseBody, len(res.Permissions))
		for key, val := range res.Permissions {
			tk := key
			body.Permissions[tk] = marshalPolicytemplateviewsPermissionViewToPermissionResponseBody(val)
		}
	}
	if res.RequiredRoles != nil {
		body.RequiredRoles = make([]string, len(res.RequiredRoles))
		for i, val := range res.RequiredRoles {
			body.RequiredRoles[i] = val
		}
	}
	if res.Parameters != nil {
		body.Parameters = make(map[string]*ParameterResponseBody, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			body.Parameters[tk] = marshalPolicytemplateviewsParameterViewToParameterResponseBody(val)
		}
	}
	if res.Credentials != nil {
		body.Credentials = make(map[string]*CredentialsResponseBody, len(res.Credentials))
		for key, val := range res.Credentials {
			tk := key
			body.Credentials[tk] = marshalPolicytemplateviewsCredentialsViewToCredentialsResponseBody(val)
		}
	}
	return body
}

// NewShowResponseBodySource builds the HTTP response body from the result of
// the "show" endpoint of the "PolicyTemplate" service.
func NewShowResponseBodySource(res *policytemplateviews.PolicyTemplateView) *ShowResponseBodySource {
	body := &ShowResponseBodySource{
		ID:          *res.ID,
		Name:        *res.Name,
		Href:        *res.Href,
		Filename:    res.Filename,
		Source:      res.Source,
		Fingerprint: *res.Fingerprint,
		Kind:        *res.Kind,
	}
	return body
}

// NewShowResponseBodyLink builds the HTTP response body from the result of the
// "show" endpoint of the "PolicyTemplate" service.
func NewShowResponseBodyLink(res *policytemplateviews.PolicyTemplateView) *ShowResponseBodyLink {
	body := &ShowResponseBodyLink{
		ID:          *res.ID,
		Name:        *res.Name,
		Href:        *res.Href,
		Fingerprint: *res.Fingerprint,
		UpdatedAt:   res.UpdatedAt,
		Kind:        *res.Kind,
	}
	if res.UpdatedBy != nil {
		body.UpdatedBy = marshalPolicytemplateviewsUserViewToUserResponseBody(res.UpdatedBy)
	}
	return body
}

// NewIndexOKResponseBody builds the HTTP response body from the result of the
// "index" endpoint of the "PolicyTemplate" service.
func NewIndexOKResponseBody(res *policytemplateviews.PolicyTemplateListView) *IndexOKResponseBody {
	body := &IndexOKResponseBody{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*PolicyTemplateResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalPolicytemplateviewsPolicyTemplateViewToPolicyTemplateResponseBody(val)
		}
	}
	return body
}

// NewIndexOKResponseBodyExtended builds the HTTP response body from the result
// of the "index" endpoint of the "PolicyTemplate" service.
func NewIndexOKResponseBodyExtended(res *policytemplateviews.PolicyTemplateListView) *IndexOKResponseBodyExtended {
	body := &IndexOKResponseBodyExtended{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*PolicyTemplateResponseBodyExtended, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalPolicytemplateviewsPolicyTemplateViewToPolicyTemplateResponseBodyExtended(val)
		}
	}
	return body
}

// NewCompileUnauthorizedResponseBody builds the HTTP response body from the
// result of the "compile" endpoint of the "PolicyTemplate" service.
func NewCompileUnauthorizedResponseBody(res *goa.ServiceError) *CompileUnauthorizedResponseBody {
	body := &CompileUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompileForbiddenResponseBody builds the HTTP response body from the
// result of the "compile" endpoint of the "PolicyTemplate" service.
func NewCompileForbiddenResponseBody(res *goa.ServiceError) *CompileForbiddenResponseBody {
	body := &CompileForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompileBadRequestResponseBody builds the HTTP response body from the
// result of the "compile" endpoint of the "PolicyTemplate" service.
func NewCompileBadRequestResponseBody(res *goa.ServiceError) *CompileBadRequestResponseBody {
	body := &CompileBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompileBadGatewayResponseBody builds the HTTP response body from the
// result of the "compile" endpoint of the "PolicyTemplate" service.
func NewCompileBadGatewayResponseBody(res *goa.ServiceError) *CompileBadGatewayResponseBody {
	body := &CompileBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompileInternalErrorResponseBody builds the HTTP response body from the
// result of the "compile" endpoint of the "PolicyTemplate" service.
func NewCompileInternalErrorResponseBody(res *goa.ServiceError) *CompileInternalErrorResponseBody {
	body := &CompileInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompileInvalidTemplateResponseBody builds the HTTP response body from the
// result of the "compile" endpoint of the "PolicyTemplate" service.
func NewCompileInvalidTemplateResponseBody(res *policytemplate.CompilationErrors) *CompileInvalidTemplateResponseBody {
	body := &CompileInvalidTemplateResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	if res.Errors != nil {
		body.Errors = make([]*CompilationErrorResponseBody, len(res.Errors))
		for i, val := range res.Errors {
			body.Errors[i] = marshalPolicytemplateCompilationErrorToCompilationErrorResponseBody(val)
		}
	}
	return body
}

// NewUploadUnauthorizedResponseBody builds the HTTP response body from the
// result of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadUnauthorizedResponseBody(res *goa.ServiceError) *UploadUnauthorizedResponseBody {
	body := &UploadUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadForbiddenResponseBody builds the HTTP response body from the result
// of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadForbiddenResponseBody(res *goa.ServiceError) *UploadForbiddenResponseBody {
	body := &UploadForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadBadRequestResponseBody builds the HTTP response body from the
// result of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadBadRequestResponseBody(res *goa.ServiceError) *UploadBadRequestResponseBody {
	body := &UploadBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadBadGatewayResponseBody builds the HTTP response body from the
// result of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadBadGatewayResponseBody(res *goa.ServiceError) *UploadBadGatewayResponseBody {
	body := &UploadBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadInternalErrorResponseBody builds the HTTP response body from the
// result of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadInternalErrorResponseBody(res *goa.ServiceError) *UploadInternalErrorResponseBody {
	body := &UploadInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadInvalidTemplateResponseBody builds the HTTP response body from the
// result of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadInvalidTemplateResponseBody(res *policytemplate.CompilationErrors) *UploadInvalidTemplateResponseBody {
	body := &UploadInvalidTemplateResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	if res.Errors != nil {
		body.Errors = make([]*CompilationErrorResponseBody, len(res.Errors))
		for i, val := range res.Errors {
			body.Errors[i] = marshalPolicytemplateCompilationErrorToCompilationErrorResponseBody(val)
		}
	}
	return body
}

// NewUploadConflictResponseBody builds the HTTP response body from the result
// of the "upload" endpoint of the "PolicyTemplate" service.
func NewUploadConflictResponseBody(res *policytemplate.ConflictError) *UploadConflictResponseBody {
	body := &UploadConflictResponseBody{
		ID:        res.ID,
		Name:      res.Name,
		Updatable: res.Updatable,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateForbiddenResponseBody(res *goa.ServiceError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadGatewayResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateBadGatewayResponseBody(res *goa.ServiceError) *UpdateBadGatewayResponseBody {
	body := &UpdateBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateInternalErrorResponseBody(res *goa.ServiceError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInvalidTemplateResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "PolicyTemplate" service.
func NewUpdateInvalidTemplateResponseBody(res *policytemplate.CompilationErrors) *UpdateInvalidTemplateResponseBody {
	body := &UpdateInvalidTemplateResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	if res.Errors != nil {
		body.Errors = make([]*CompilationErrorResponseBody, len(res.Errors))
		for i, val := range res.Errors {
			body.Errors[i] = marshalPolicytemplateCompilationErrorToCompilationErrorResponseBody(val)
		}
	}
	return body
}

// NewRetrieveDataUnprocessableEntityResponseBody builds the HTTP response body
// from the result of the "retrieve_data" endpoint of the "PolicyTemplate"
// service.
func NewRetrieveDataUnprocessableEntityResponseBody(res *goa.ServiceError) *RetrieveDataUnprocessableEntityResponseBody {
	body := &RetrieveDataUnprocessableEntityResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRetrieveDataUnauthorizedResponseBody builds the HTTP response body from
// the result of the "retrieve_data" endpoint of the "PolicyTemplate" service.
func NewRetrieveDataUnauthorizedResponseBody(res *goa.ServiceError) *RetrieveDataUnauthorizedResponseBody {
	body := &RetrieveDataUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRetrieveDataForbiddenResponseBody builds the HTTP response body from the
// result of the "retrieve_data" endpoint of the "PolicyTemplate" service.
func NewRetrieveDataForbiddenResponseBody(res *goa.ServiceError) *RetrieveDataForbiddenResponseBody {
	body := &RetrieveDataForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRetrieveDataBadRequestResponseBody builds the HTTP response body from the
// result of the "retrieve_data" endpoint of the "PolicyTemplate" service.
func NewRetrieveDataBadRequestResponseBody(res *goa.ServiceError) *RetrieveDataBadRequestResponseBody {
	body := &RetrieveDataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRetrieveDataBadGatewayResponseBody builds the HTTP response body from the
// result of the "retrieve_data" endpoint of the "PolicyTemplate" service.
func NewRetrieveDataBadGatewayResponseBody(res *goa.ServiceError) *RetrieveDataBadGatewayResponseBody {
	body := &RetrieveDataBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRetrieveDataInternalErrorResponseBody builds the HTTP response body from
// the result of the "retrieve_data" endpoint of the "PolicyTemplate" service.
func NewRetrieveDataInternalErrorResponseBody(res *goa.ServiceError) *RetrieveDataInternalErrorResponseBody {
	body := &RetrieveDataInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "PolicyTemplate" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "PolicyTemplate" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "PolicyTemplate" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "PolicyTemplate" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "PolicyTemplate" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "PolicyTemplate" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexUnauthorizedResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "PolicyTemplate" service.
func NewIndexUnauthorizedResponseBody(res *goa.ServiceError) *IndexUnauthorizedResponseBody {
	body := &IndexUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexForbiddenResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "PolicyTemplate" service.
func NewIndexForbiddenResponseBody(res *goa.ServiceError) *IndexForbiddenResponseBody {
	body := &IndexForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadRequestResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "PolicyTemplate" service.
func NewIndexBadRequestResponseBody(res *goa.ServiceError) *IndexBadRequestResponseBody {
	body := &IndexBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadGatewayResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "PolicyTemplate" service.
func NewIndexBadGatewayResponseBody(res *goa.ServiceError) *IndexBadGatewayResponseBody {
	body := &IndexBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexInternalErrorResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "PolicyTemplate" service.
func NewIndexInternalErrorResponseBody(res *goa.ServiceError) *IndexInternalErrorResponseBody {
	body := &IndexInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "PolicyTemplate" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyTemplate" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "PolicyTemplate" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyTemplate" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadGatewayResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyTemplate" service.
func NewDeleteBadGatewayResponseBody(res *goa.ServiceError) *DeleteBadGatewayResponseBody {
	body := &DeleteBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "PolicyTemplate" service.
func NewDeleteInternalErrorResponseBody(res *goa.ServiceError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompilePayload builds a PolicyTemplate service compile endpoint payload.
func NewCompilePayload(body *CompileRequestBody, projectID uint, apiVersion string, token *string) *policytemplate.CompilePayload {
	v := &policytemplate.CompilePayload{
		Filename: *body.Filename,
		Source:   *body.Source,
	}
	v.ProjectID = projectID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewUploadPayload builds a PolicyTemplate service upload endpoint payload.
func NewUploadPayload(body *UploadRequestBody, projectID uint, apiVersion string, token *string) *policytemplate.UploadPayload {
	v := &policytemplate.UploadPayload{
		Filename: *body.Filename,
		Source:   *body.Source,
	}
	v.ProjectID = projectID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewUpdatePayload builds a PolicyTemplate service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, projectID uint, templateID string, apiVersion string, token *string) *policytemplate.UpdatePayload {
	v := &policytemplate.UpdatePayload{
		Filename: *body.Filename,
		Source:   *body.Source,
	}
	v.ProjectID = projectID
	v.TemplateID = templateID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewRetrieveDataPayload builds a PolicyTemplate service retrieve_data
// endpoint payload.
func NewRetrieveDataPayload(body *RetrieveDataRequestBody, projectID uint, templateID string, apiVersion string, token *string) *policytemplate.RetrieveDataPayload {
	v := &policytemplate.RetrieveDataPayload{}
	if body.Options != nil {
		v.Options = make([]*policytemplate.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = unmarshalConfigurationOptionCreateTypeRequestBodyToPolicytemplateConfigurationOptionCreateType(val)
		}
	}
	if body.Credentials != nil {
		v.Credentials = make(map[string]string, len(body.Credentials))
		for key, val := range body.Credentials {
			tk := key
			tv := val
			v.Credentials[tk] = tv
		}
	}
	if body.Names != nil {
		v.Names = make([]string, len(body.Names))
		for i, val := range body.Names {
			v.Names[i] = val
		}
	}
	v.ProjectID = projectID
	v.TemplateID = templateID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewShowPayload builds a PolicyTemplate service show endpoint payload.
func NewShowPayload(projectID uint, templateID string, view *string, apiVersion string, token *string) *policytemplate.ShowPayload {
	v := &policytemplate.ShowPayload{}
	v.ProjectID = projectID
	v.TemplateID = templateID
	v.View = view
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// NewIndexPayload builds a PolicyTemplate service index endpoint payload.
func NewIndexPayload(projectID uint, view *string, apiVersion string, etag *string, token *string) *policytemplate.IndexPayload {
	v := &policytemplate.IndexPayload{}
	v.ProjectID = projectID
	v.View = view
	v.APIVersion = apiVersion
	v.Etag = etag
	v.Token = token

	return v
}

// NewDeletePayload builds a PolicyTemplate service delete endpoint payload.
func NewDeletePayload(projectID uint, templateID string, apiVersion string, token *string) *policytemplate.DeletePayload {
	v := &policytemplate.DeletePayload{}
	v.ProjectID = projectID
	v.TemplateID = templateID
	v.APIVersion = apiVersion
	v.Token = token

	return v
}

// ValidateCompileRequestBody runs the validations defined on CompileRequestBody
func ValidateCompileRequestBody(body *CompileRequestBody) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	return
}

// ValidateUploadRequestBody runs the validations defined on UploadRequestBody
func ValidateUploadRequestBody(body *UploadRequestBody) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	return
}

// ValidateRetrieveDataRequestBody runs the validations defined on
// retrieve_data_request_body
func ValidateRetrieveDataRequestBody(body *RetrieveDataRequestBody) (err error) {
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateConfigurationOptionCreateTypeRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateConfigurationOptionCreateTypeRequestBody runs the validations
// defined on ConfigurationOptionCreateTypeRequestBody
func ValidateConfigurationOptionCreateTypeRequestBody(body *ConfigurationOptionCreateTypeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
